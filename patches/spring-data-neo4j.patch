From dacb8c2b92df7e3f92d53b5536b77bdccdb6193e Mon Sep 17 00:00:00 2001
From: Jennifer Hickey <jennifer.hickey@springsource.com>
Date: Tue, 1 Mar 2011 18:42:59 -0800
Subject: [PATCH 1/3] Avoid stale EntityManager references

---
 .../graph/neo4j/config/Neo4jConfiguration.java     |    2 +-
 .../node/PartialNeo4jEntityInstantiator.java       |    8 +++++---
 2 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/config/Neo4jConfiguration.java b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/config/Neo4jConfiguration.java
index 3e8efb6..9612715 100644
--- a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/config/Neo4jConfiguration.java
+++ b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/config/Neo4jConfiguration.java
@@ -88,7 +88,7 @@ public class Neo4jConfiguration {
 		gdc.setGraphDatabaseService(getGraphDatabaseService());
 		gdc.setRelationshipEntityInstantiator(new ConstructorBypassingGraphRelationshipInstantiator());
 		if (isUsingCrossStorePersistence()) {
-			gdc.setGraphEntityInstantiator(new PartialNeo4jEntityInstantiator(new Neo4jConstructorGraphEntityInstantiator(), getEntityManagerFactory().createEntityManager()));
+			gdc.setGraphEntityInstantiator(new PartialNeo4jEntityInstantiator(new Neo4jConstructorGraphEntityInstantiator()));
 		}
 		else {
 			gdc.setGraphEntityInstantiator(new Neo4jConstructorGraphEntityInstantiator());
diff --git a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/support/node/PartialNeo4jEntityInstantiator.java b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/support/node/PartialNeo4jEntityInstantiator.java
index 08ea06f..cdf66da 100644
--- a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/support/node/PartialNeo4jEntityInstantiator.java
+++ b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/support/node/PartialNeo4jEntityInstantiator.java
@@ -17,6 +17,7 @@
 package org.springframework.data.graph.neo4j.support.node;
 
 import org.neo4j.graphdb.Node;
+import org.springframework.beans.factory.annotation.Configurable;
 import org.springframework.data.graph.core.NodeBacked;
 import org.springframework.data.graph.neo4j.fieldaccess.PartialNodeEntityStateAccessors;
 import org.springframework.persistence.support.EntityInstantiator;
@@ -30,15 +31,16 @@ import javax.persistence.PersistenceContext;
  * @author Michael Hunger
  * @since 02.10.2010
  */
+@Configurable
 public class PartialNeo4jEntityInstantiator implements EntityInstantiator<NodeBacked, Node> {
 
 	private final Neo4jConstructorGraphEntityInstantiator delegate;
 
-    private final EntityManager entityManager;
+	@PersistenceContext
+    private EntityManager entityManager;
 
-    public PartialNeo4jEntityInstantiator(Neo4jConstructorGraphEntityInstantiator delegate, EntityManager entityManager) {
+    public PartialNeo4jEntityInstantiator(Neo4jConstructorGraphEntityInstantiator delegate) {
 		this.delegate = delegate;
-        this.entityManager = entityManager;
     }
 
     /**
-- 
1.6.4.4


From c2effe4e39e3c652e6991499f113fa13403a3eed Mon Sep 17 00:00:00 2001
From: Jennifer Hickey <jennifer.hickey@springsource.com>
Date: Tue, 1 Mar 2011 18:51:18 -0800
Subject: [PATCH 2/3] Temp patch to avoid ConcurrentModificationExceptions when first attaching a graph node with Fields that are not marked with @GraphProperty

---
 .../fieldaccess/DefaultEntityStateAccessors.java   |    2 +-
 .../DetachableEntityStateAccessors.java            |    4 ++++
 .../neo4j/fieldaccess/EntityStateAccessors.java    |    1 +
 3 files changed, 6 insertions(+), 1 deletions(-)

diff --git a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DefaultEntityStateAccessors.java b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DefaultEntityStateAccessors.java
index 6604463..4f0af96 100644
--- a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DefaultEntityStateAccessors.java
+++ b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DefaultEntityStateAccessors.java
@@ -91,7 +91,7 @@ public abstract class DefaultEntityStateAccessors<ENTITY extends GraphBacked<STA
         return result;
     }
 
-    private FieldAccessor<ENTITY> accessorFor(final Field field) {
+    public FieldAccessor<ENTITY> accessorFor(final Field field) {
         return fieldAccessors.get(field);
     }
 
diff --git a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DetachableEntityStateAccessors.java b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DetachableEntityStateAccessors.java
index 04d32c7..b990ffa 100644
--- a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DetachableEntityStateAccessors.java
+++ b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DetachableEntityStateAccessors.java
@@ -160,6 +160,10 @@ public class DetachableEntityStateAccessors<ENTITY extends GraphBacked<STATE>, S
     }
 
     private void checkConcurrentModification(final ENTITY entity, final Map.Entry<Field, Object> entry, final Field field) {
+        //Temp hack to avoid the CME when we are dealing with non-Graph properties (the accessor for these is always null)
+        if(delegate instanceof DefaultEntityStateAccessors && ((DefaultEntityStateAccessors)delegate).accessorFor(field) == null) {
+            return;
+        }
         final Object nodeValue = unwrap(delegate.getValue(field));
         final Object previousValue = entry.getValue();
         if (!ObjectUtils.nullSafeEquals(nodeValue, previousValue)) {
diff --git a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/EntityStateAccessors.java b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/EntityStateAccessors.java
index 53d9ce6..266d47c 100644
--- a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/EntityStateAccessors.java
+++ b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/EntityStateAccessors.java
@@ -59,4 +59,5 @@ public interface EntityStateAccessors<ENTITY extends GraphBacked<STATE>,STATE> {
     STATE getUnderlyingState();
 
     ENTITY attach(boolean isOnCreate);
+   
 }
-- 
1.6.4.4


From 7f665aee55909f8a2f2b0b3bdeffc85c173f9f9c Mon Sep 17 00:00:00 2001
From: Jennifer Hickey <jennifer.hickey@springsource.com>
Date: Wed, 2 Mar 2011 16:14:10 -0800
Subject: [PATCH 3/3] Temp hack to remove getValue()'s call to get id if a tx is running (since we always initialize the id by calling getId() immediately after a new object is persisted). Profiling results showed the isAnnotationPresent reflection call was causing huge bottlenecks.

---
 .../DetachableEntityStateAccessors.java            |    2 +-
 .../NodeEntityStateAccessorsFactory.java           |    2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DetachableEntityStateAccessors.java b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DetachableEntityStateAccessors.java
index b990ffa..63269fa 100644
--- a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DetachableEntityStateAccessors.java
+++ b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/DetachableEntityStateAccessors.java
@@ -86,7 +86,7 @@ public class DetachableEntityStateAccessors<ENTITY extends GraphBacked<STATE>, S
 
     @Override
     public Object setValue(final Field field, final Object newVal) {
-        if (!transactionIsRunning() || !hasUnderlyingState()) {
+        if ((!transactionIsRunning()  || PartialNodeEntityStateAccessors.getId(getEntity(),getEntity().getClass()) == null) || !hasUnderlyingState()) {
             final ENTITY entity = getEntity();
             if (!isDirty(field) && isWritable(field)) {
                 Object existingValue;
diff --git a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/NodeEntityStateAccessorsFactory.java b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/NodeEntityStateAccessorsFactory.java
index 16a3eb2..898c66b 100644
--- a/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/NodeEntityStateAccessorsFactory.java
+++ b/spring-data-neo4j/src/main/java/org/springframework/data/graph/neo4j/fieldaccess/NodeEntityStateAccessorsFactory.java
@@ -40,7 +40,7 @@ public class NodeEntityStateAccessorsFactory {
             return new DetachableEntityStateAccessors<NodeBacked, Node>(partialNodeEntityStateAccessors, graphDatabaseContext, false) {
                 @Override
                 protected boolean transactionIsRunning() {
-                    return super.transactionIsRunning() && getId(entity, entity.getClass()) != null;
+                    return super.transactionIsRunning();
                 }
             };
         } else {
-- 
1.6.4.4

