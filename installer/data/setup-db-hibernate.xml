
   <!-- Hibernate common targets -->

  <property name="build.dir" location="${server.installdir}/server-${version}/tmp" />
  <property name="hq-ear.dir" location="${server.installdir}/server-${version}/hq-engine/server/default/deploy/hq.ear" />
  <property name="hibernate-properties" location="${install.dir}/etc/hibernate/hibernate.properties" />
  <property name="hibernate-properties-gen" location="${build.dir}/hibernate/hibernate.properties" />
  <property name="hibernate-hq-config" location="${install.dir}/etc/hibernate/hibernate.hq-cfg-xml" />
  <property name="hibernate-mapping.xslt" location="${install.dir}/etc/hibernate/hibernate-mapping.xsl" /> 
  <property name="hibernate-config.xslt" location="${install.dir}/etc/hibernate/hibernate-config.xsl" />
  <property name="hibernate-sql" location="${install.dir}/etc/hibernate/sql" />
  <property name="hibernate-jar" location="${hq-ear.dir}/lib/hibernate3.jar" />
  
  <target name="common-taskdefs" unless="init-taskdefs.notrequired">
    <taskdef name="for" classname="net.sf.antcontrib.logic.For">
      <classpath>
        <fileset dir="${install.dir}/lib" includes="*.jar"/>
      </classpath>
    </taskdef>
  </target>

  <target name="hibernate-init-taskdefs" depends="common-taskdefs"
          unless="hibernate-init-taskdefs.notrequired">
    <taskdef name="hibernatetool"
             classname="org.hibernate.tool.ant.HibernateToolTask">
      <classpath>
        <fileset dir="${install.dir}/lib" includes="*.jar"/>
      </classpath>
    </taskdef>
    <property name="hibernate-init-taskdefs.notrequired" value="true"/>
  </target>

  <target name="hibernate-taskdefs" depends="hibernate-init-taskdefs">
    <switch value="${server.database}">
      <case value="Oracle8">
        <property name="hyperic.dialect" value="Oracle" />
      </case>
      <case value="Oracle9i">
        <property name="hyperic.dialect" value="Oracle9" />
        <property name="hibernate.dialect" value="org.hyperic.hibernate.dialect.${hyperic.dialect}Dialect" />
      </case>
      <case value="Oracle10g">
        <property name="hyperic.dialect" value="Oracle9" />
        <property name="hibernate.dialect" value="org.hyperic.hibernate.dialect.${hyperic.dialect}Dialect" />
      </case>
      <case value="PostgreSQL">
        <property name="do-first-pass" value="true" />
        <property name="hyperic.dialect" value="PostgreSQL" />
        <property name="hibernate.dialect" value="org.hyperic.hibernate.dialect.${hyperic.dialect}Dialect" />
      </case>
      <case value="mySQL">
        <property name="hyperic.dialect" value="MySQL" />
      </case>
      <default>
        <fail>
        Unrecognized datasource mapping name: ${server.database}
        </fail>
      </default>
    </switch>
  </target>

  <target name="hibernate-prep" depends="hibernate-taskdefs">
    <delete failonerror="false">
      <fileset dir="${hq-ear.dir}/META-INF" includes="**/*.hbm.xml,**/*.cfg.xml" />
      <fileset dir="${build.dir}/hibernate" />
    </delete>
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dir}/hibernate" />
    <mkdir dir="${build.dir}/hibernate/sql" />
    <mkdir dir="${build.dir}/hibernate/classes" />

    <unjar dest="${build.dir}/hibernate/classes">
      <fileset dir="${hq-ear.dir}">
        <include name="hq*.jar" />
      </fileset>
    </unjar>

    <copy todir="${build.dir}/hibernate/sql">
      <fileset dir="${hibernate-sql}" includes="**/*.hq-xml" />
    </copy>

    <!-- generate hibernate mapping files from hyperic mapping file -->

    <style
        basedir="${build.dir}/hibernate/sql"
        destdir="${hq-ear.dir}/META-INF"
        style="${hibernate-mapping.xslt}">

      <include name="**/*.hq-xml" />

      <param name="dialect" expression="${hyperic.dialect}" />

      <mapper>
        <chainedmapper>
          <globmapper from="*.hq-xml" to="*.hbm.xml" />
        </chainedmapper>
      </mapper>

      <xmlcatalog>
        <classpath>
          <pathelement location="${hibernate-jar}" />
        </classpath>
        <dtd
            publicId="-//Hibernate/Hibernate Mapping DTD 3.0//EN"
            location="org/hibernate/hibernate-mapping-3.0.dtd"/>
      </xmlcatalog>
    </style>

    <!-- export hibernate properties (these values can be from .hq/build.properties file) -->
    <pathconvert property="hbm-files" pathsep=",">
      <path>
        <fileset dir="${hq-ear.dir}/META-INF">
          <include name="**/*.hbm.xml"/>
        </fileset>
      </path>
      <map from="${hq-ear.dir}/" to="" />
    </pathconvert>
    <for param="file" list="${hbm-files}">
      <sequential>
        <property name="mapping.@{file}" value="@{file}" />
      </sequential>
    </for>

    <property name="hibernate.dialect" value="org.hibernate.dialect.${hyperic.dialect}Dialect" />
    <echoproperties destfile="${hibernate-properties-gen}.xml" format="xml">
      <propertyset>
        <propertyref prefix="mapping."/>
        <propertyref prefix="hibernate."/>
        <propertyref prefix="hq."/>
      </propertyset>
    </echoproperties>

    <property name="hibernate.connection.url" value="${server.database-url}" />
    <property name="hibernate.connection.driver_class" value="${server.database-driver}" />
    <property name="hibernate.connection.username" value="${server.database-user}" />
    <property name="hibernate.connection.password" value="${server.database-password}" />
    <property file="${hibernate-properties}" />

    <echoproperties destfile="${hibernate-properties-gen}" format="text">
      <propertyset>
        <propertyref prefix="hibernate."/>
        <propertyref prefix="hq."/>
      </propertyset>
    </echoproperties>

    <!-- generate hibernate configuration file  -->
    <style
        style="${hibernate-config.xslt}"
        in="${hibernate-hq-config}"
        out="${hq-ear.dir}/META-INF/hibernate.cfg.xml">

      <param name="dialect" expression="${hyperic.dialect}" />
      <param name="properties" expression="${hibernate-properties-gen}.xml" />

      <!-- search hibernate-mapping.dtd in the classpath -->
      <xmlcatalog>
        <classpath>
          <pathelement location="${hibernate-jar}" />
        </classpath>
        <dtd
            publicId="-//Hibernate/Hibernate Configuration DTD 3.0//EN"
            location="org/hibernate/hibernate-configuration-3.0.dtd"/>
      </xmlcatalog>
    </style>
  </target>

  <target name="hibernate-schema-create-init">
    <delete failonerror="false" file="${build.dir}/sql/hibernate.sql" />
    <mkdir dir="${build.dir}/sql" />
  </target>

  <target name="hibernate-schema-first-pass" depends="hibernate-schema-create-init" if="do-first-pass">
    <!--
        these two classes have nextval() as a default value on the ID.
        On database version that perform nextval ID sequence referential integrity
        checks such as PostgreSQL v8.1.3, hibernate table create fails on these two
        tables.  The reason. Hibernate creates sequences after it creates table...

        The workaround is to perform hibernate schema export on these two tables twice, :(.
        The first time table creation will fail, but sequences will be created, the second
        pass the table will be created... :)
    -->
    <hibernatetool>
      <classpath>
        <path location="${hq-ear.dir}" />
        <path location="${build.dir}/hibernate/classes" />
      </classpath>
      <configuration propertyFile="${hibernate-properties-gen}">
        <fileset dir="${hq-ear.dir}">
          <include name="**/CpropKey.hbm.xml" />
          <include name="**/Cprop.hbm.xml" />
          <include name="**/FiredTrigger.hbm.xml" />
        </fileset>
      </configuration>

      <!-- generate DDL -->
      <hbm2ddl
          destdir="${build.dir}/sql"
          outputFileName="hibernate.sql"
          drop="false"
          create="true"
          update="false"
          format="true"
          console="true"
          export="true"
          delimiter=";"
          />
    </hibernatetool>
  </target>

  <target name="hibernate-schema-create" depends="hibernate-prep,hibernate-schema-first-pass">
    <!-- the second pass.  all tables will be created -->
    <hibernatetool>
      <classpath>
        <path location="${hq-ear.dir}" />
        <path location="${build.dir}/hibernate/classes" />
      </classpath>
      <configuration propertyFile="${hibernate-properties-gen}">
        <fileset dir="${hq-ear.dir}">
          <include name="**/*.hbm.xml" />
        </fileset>
      </configuration>

      <hbm2ddl
          destdir="${build.dir}/sql"
          outputFileName="hibernate.sql"
          drop="false"
          create="true"
          update="false"
          format="true"
          console="false"
          export="true"
          delimiter=";"
          />
    </hibernatetool>
  </target>

  <target name="hibernate-schema-upgrade" depends="hibernate-prep">

    <hibernatetool>
      <classpath>
        <path location="${hq-ear.dir}" />
        <path location="${build.dir}/hibernate/classes" />
      </classpath>
      <configuration propertyFile="${hibernate-properties-gen}">
        <fileset dir="${hq-ear.dir}">
          <include name="**/*.hbm.xml" />
        </fileset>
      </configuration>

      <hbm2ddl
          destdir="${build.dir}/sql"
          update="true"
          console="true"
          />
    </hibernatetool>
  </target>

  <target name="hibernate-schema-drop" depends="hibernate-prep">

    <delete failonerror="false" file="${build.dir}/sql/hibernate.sql" />
    <mkdir dir="${build.dir}/sql" />
    <hibernatetool>
      <classpath>
        <path location="${hq-ear.dir}" />
        <path location="${build.dir}/hibernate/classes" />
      </classpath>
      <configuration propertyFile="${hibernate-properties-gen}">
        <fileset dir="${hq-ear.dir}">
          <include name="**/*.hbm.xml" />
        </fileset>
      </configuration>

      <hbm2ddl
          destdir="${build.dir}/sql"
          outputFileName="hibernate.sql"
          drop="true"
          create="false"
          update="false"
          format="true"
          console="false"
          export="true"
          delimiter=";"
          />
    </hibernatetool>
  </target>

  <target name="hibernate-schema-validation" depends="hibernate-prep">
    <taskdef name="validate-schema"
             classname="org.hibernate.tool.hbm2ddl.SchemaValidatorTask">
      <classpath>
        <path location="${hq-ear.dir}" />
        <path location="${build.dir}/hibernate/classes" />
      </classpath>
    </taskdef>
    <validate-schema properties="${hibernate-properties-gen}">
      <fileset dir="${hq-ear.dir}">
        <include name="**/*.hbm.xml" />
      </fileset>
    </validate-schema>
  </target>

  <target name="hibernate-setup" depends="hibernate-schema-drop,hibernate-schema-create" />

  <target name="hibernate-create" depends="hibernate-schema-create" />
  <target name="hibernate-drop" depends="hibernate-schema-drop" />
  <target name="hibernate-upgrade" depends="hibernate-schema-upgrade" />
  <target name="hibernate-validate" depends="hibernate-schema-validation" />
