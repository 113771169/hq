/*
 * NOTE: This copyright does *not* cover user programs that use HQ
 * program services by normal system calls through the application
 * program interfaces provided as part of the Hyperic Plug-in Development
 * Kit or the Hyperic Client Development Kit - this is merely considered
 * normal use of the program, and does *not* fall under the heading of
 * "derived work".
 * 
 * Copyright (C) [2004, 2005, 2006], Hyperic, Inc.
 * This file is part of HQ.
 * 
 * HQ is free software; you can redistribute it and/or modify
 * it under the terms version 2 of the GNU General Public License as
 * published by the Free Software Foundation. This program is distributed
 * in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA.
 */

package org.hyperic.image.chart.test;

import org.hyperic.image.chart.*;
import org.hyperic.util.data.*;
import org.hyperic.util.units.*;

import java.awt.*;
import java.util.Random;
import javax.swing.*;
import java.util.*;
import org.hyperic.util.pager.PageList;
import org.hyperic.util.TimeUtil;

/**
 * A basic JFC 1.1 based application.
 */
public class ChartTest extends javax.swing.JFrame
{
    public Chart m_chart;
    
	public ChartTest()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("JFC Application");
		setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(972,490);
		setVisible(false);
		JPanel1.setLayout(null);
		getContentPane().add(BorderLayout.CENTER, JPanel1);
		JPanel1.setBackground(new java.awt.Color(226,226,226));
		JPanel1.setFont(new Font("SansSerif", Font.BOLD, 11));
		try {
			imageViewer.setStyle(symantec.itools.multimedia.ImageViewer.IMAGE_NORMAL);
		}
		catch(java.beans.PropertyVetoException e) { }
		JPanel1.add(imageViewer);
		imageViewer.setBounds(216,0,755,500);
		JPanel1.add(textFieldBorderR);
		textFieldBorderR.setBounds(108,120,26,20);
		label1.setText("Border Color:");
		JPanel1.add(label1);
		label1.setBounds(12,120,74,20);
		radioButtonLineChart.setCheckboxGroup(Group1);
		radioButtonLineChart.setState(true);
		radioButtonLineChart.setLabel("Line Chart");
		JPanel1.add(radioButtonLineChart);
		radioButtonLineChart.setBounds(12,36,80,20);
		radioButtonColumnChart.setCheckboxGroup(Group1);
		radioButtonColumnChart.setLabel("Performance Chart");
		JPanel1.add(radioButtonColumnChart);
		radioButtonColumnChart.setBounds(110,36,100,20);
		label2.setText("Chart Type:");
		JPanel1.add(label2);
		label2.setBounds(12,12,100,20);
		label3.setText("Colors:");
		JPanel1.add(label3);
		label3.setBounds(12,96,60,20);
		label4.setText("Bkgnd Color:");
		JPanel1.add(label4);
		label4.setBounds(12,144,72,20);
		JPanel1.add(textFieldBorderG);
		textFieldBorderG.setBounds(144,120,26,20);
		JPanel1.add(textFieldBorderB);
		textFieldBorderB.setBounds(180,120,26,20);
		JPanel1.add(textFieldBkgndR);
		textFieldBkgndR.setBounds(108,144,26,20);
		JPanel1.add(textFieldBkgndG);
		textFieldBkgndG.setBounds(144,144,26,20);
		JPanel1.add(textFieldBkgndB);
		textFieldBkgndB.setBounds(180,144,26,20);
		label5.setText("Line Color:");
		JPanel1.add(label5);
		label5.setBounds(12,168,72,20);
		JPanel1.add(textFieldLineR);
		textFieldLineR.setBounds(108,168,26,20);
		JPanel1.add(textFieldLineG);
		textFieldLineG.setBounds(144,168,26,20);
		JPanel1.add(textFieldLineB);
		textFieldLineB.setBounds(180,168,26,20);
		label6.setText("Bar Color:");
		JPanel1.add(label6);
		label6.setBounds(12,192,72,20);
		JPanel1.add(textFieldBarR);
		textFieldBarR.setBounds(108,192,26,20);
		JPanel1.add(textFieldBarG);
		textFieldBarG.setBounds(144,192,26,20);
		JPanel1.add(textFieldBarB);
		textFieldBarB.setBounds(180,192,26,20);
		label7.setText("Sizes:");
		JPanel1.add(label7);
		label7.setBounds(12,324,100,20);
		label8.setText("Border Width:");
		JPanel1.add(label8);
		label8.setBounds(12,348,84,20);
		JPanel1.add(textFieldBorderWidth);
		textFieldBorderWidth.setBounds(120,348,26,20);
		label9.setText("Line Width:");
		JPanel1.add(label9);
		label9.setBounds(12,372,72,20);
		JPanel1.add(textFieldLineWidth);
		textFieldLineWidth.setBounds(120,372,26,20);
		label10.setText("Horizontal Lines:");
		JPanel1.add(label10);
		label10.setBounds(12,396,100,20);
		JPanel1.add(textFieldHorizLines);
		textFieldHorizLines.setBounds(120,396,26,20);
		label11.setText("Line Overhang:");
		JPanel1.add(label11);
		label11.setBounds(12,420,100,20);
		JPanel1.add(textFieldLineOverhang);
		textFieldLineOverhang.setBounds(120,420,26,20);
		label12.setText("Chart Color:");
		JPanel1.add(label12);
		label12.setBounds(12,216,72,20);
		JPanel1.add(textFieldChartR);
		textFieldChartR.setBounds(108,216,26,20);
		JPanel1.add(textFieldChartG);
		textFieldChartG.setBounds(144,216,26,20);
		JPanel1.add(textFieldChartB);
		textFieldChartB.setBounds(180,216,26,20);
		label13.setText("Avg Line Color:");
		JPanel1.add(label13);
		label13.setBounds(12,240,85,20);
		JPanel1.add(textFieldAvgLineR);
		textFieldAvgLineR.setBounds(108,240,26,20);
		JPanel1.add(textFieldAvgLineG);
		textFieldAvgLineG.setBounds(144,240,26,20);
		JPanel1.add(textFieldAvgLineB);
		textFieldAvgLineB.setBounds(180,240,26,20);
		label14.setText("Low Line Color:");
		JPanel1.add(label14);
		label14.setBounds(12,264,90,20);
		JPanel1.add(textFieldLowLineR);
		textFieldLowLineR.setBounds(108,264,26,20);
		JPanel1.add(textFieldLowLineG);
		textFieldLowLineG.setBounds(144,264,26,20);
		JPanel1.add(textFieldLowLineB);
		textFieldLowLineB.setBounds(180,264,26,20);
		label15.setText("Peak Line Color:");
		JPanel1.add(label15);
		label15.setBounds(12,288,90,20);
		JPanel1.add(textFieldPeakLineR);
		textFieldPeakLineR.setBounds(108,288,26,20);
		JPanel1.add(textFieldPeakLineG);
		textFieldPeakLineG.setBounds(144,288,26,20);
		JPanel1.add(textFieldPeakLineB);
		textFieldPeakLineB.setBounds(180,288,26,20);
		radioButtonColumnLineChart.setCheckboxGroup(Group1);
		radioButtonColumnLineChart.setLabel("Availability Chart");
		JPanel1.add(radioButtonColumnLineChart);
		radioButtonColumnLineChart.setBounds(12,60,130,20);
		buttonSave.setLabel("Save");
		JPanel1.add(buttonSave);
		buttonSave.setBackground(java.awt.Color.lightGray);
		buttonSave.setBounds(12,456,60,24);
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymItem lSymItem = new SymItem();
		radioButtonLineChart.addItemListener(lSymItem);
		radioButtonColumnChart.addItemListener(lSymItem);
		SymFocus aSymFocus = new SymFocus();
		textFieldBorderR.addFocusListener(aSymFocus);
		textFieldBorderG.addFocusListener(aSymFocus);
		textFieldBorderB.addFocusListener(aSymFocus);
		textFieldBkgndR.addFocusListener(aSymFocus);
		textFieldBkgndG.addFocusListener(aSymFocus);
		textFieldBkgndB.addFocusListener(aSymFocus);
		textFieldLineR.addFocusListener(aSymFocus);
		textFieldLineG.addFocusListener(aSymFocus);
		textFieldLineB.addFocusListener(aSymFocus);
		textFieldBarR.addFocusListener(aSymFocus);
		textFieldBarG.addFocusListener(aSymFocus);
		textFieldBarB.addFocusListener(aSymFocus);
		textFieldBorderWidth.addFocusListener(aSymFocus);
		textFieldHorizLines.addFocusListener(aSymFocus);
		textFieldLineOverhang.addFocusListener(aSymFocus);
		textFieldChartR.addFocusListener(aSymFocus);
		textFieldChartG.addFocusListener(aSymFocus);
		textFieldChartB.addFocusListener(aSymFocus);
		textFieldAvgLineR.addFocusListener(aSymFocus);
		textFieldAvgLineG.addFocusListener(aSymFocus);
		textFieldAvgLineB.addFocusListener(aSymFocus);
		textFieldLowLineR.addFocusListener(aSymFocus);
		textFieldLowLineG.addFocusListener(aSymFocus);
		textFieldLowLineB.addFocusListener(aSymFocus);
		textFieldPeakLineR.addFocusListener(aSymFocus);
		textFieldPeakLineG.addFocusListener(aSymFocus);
		textFieldPeakLineB.addFocusListener(aSymFocus);
		radioButtonColumnLineChart.addItemListener(lSymItem);
		SymAction lSymAction = new SymAction();
		buttonSave.addActionListener(lSymAction);
		//}}
	
    	this.createChart();

        Color color;
		//Color color = this.m_chart.getBarColor();
		//this.textFieldBarR.setText(String.valueOf(color.getRed()));
		//this.textFieldBarG.setText(String.valueOf(color.getGreen()));
		//this.textFieldBarB.setText(String.valueOf(color.getBlue()));

		//color = this.m_chart.getBarBorderColor();
		//this.textFieldBorderR.setText(String.valueOf(color.getRed()));
		//this.textFieldBorderG.setText(String.valueOf(color.getGreen()));
		//this.textFieldBorderB.setText(String.valueOf(color.getBlue()));

		color = this.m_chart.backgroundColor;
		this.textFieldBkgndR.setText(String.valueOf(color.getRed()));
		this.textFieldBkgndG.setText(String.valueOf(color.getGreen()));
		this.textFieldBkgndB.setText(String.valueOf(color.getBlue()));

		color = this.m_chart.xLineColor;
		this.textFieldLineR.setText(String.valueOf(color.getRed()));
		this.textFieldLineG.setText(String.valueOf(color.getGreen()));
		this.textFieldLineB.setText(String.valueOf(color.getBlue()));

		color = this.m_chart.chartColor;
		this.textFieldChartR.setText(String.valueOf(color.getRed()));
		this.textFieldChartG.setText(String.valueOf(color.getGreen()));
		this.textFieldChartB.setText(String.valueOf(color.getBlue()));

		color = this.m_chart.averageLineColor;
		this.textFieldAvgLineR.setText(String.valueOf(color.getRed()));
		this.textFieldAvgLineG.setText(String.valueOf(color.getGreen()));
		this.textFieldAvgLineB.setText(String.valueOf(color.getBlue()));

		color = this.m_chart.lowLineColor;
		this.textFieldLowLineR.setText(String.valueOf(color.getRed()));
		this.textFieldLowLineG.setText(String.valueOf(color.getGreen()));
		this.textFieldLowLineB.setText(String.valueOf(color.getBlue()));

		color = this.m_chart.peakLineColor;
		this.textFieldPeakLineR.setText(String.valueOf(color.getRed()));
		this.textFieldPeakLineG.setText(String.valueOf(color.getGreen()));
		this.textFieldPeakLineB.setText(String.valueOf(color.getBlue()));

		//this.textFieldBorderHeight.Value = chart.BorderHeight;
		this.textFieldBorderWidth.setText(String.valueOf(this.m_chart.leftBorder));
		this.textFieldLineWidth.setText(String.valueOf(this.m_chart.lineWidth));
		this.textFieldHorizLines.setText(String.valueOf(this.m_chart.valueLines));
		this.textFieldLineOverhang.setText(String.valueOf(this.m_chart.tickMarkHeight));

		//this.labelFontName.Text		  = this.m_chart.Font.FontFamily.Name;
		//this.labelFontSize.Text		  = this.m_chart.Font.SizeInPoints.ToString() + " pt.";
		//this.labelFontColor.BackColor = this.m_chart.TextColor;
	}

    /**
     * Creates a new instance of JFrame1 with the given title.
     * @param sTitle the title for the new frame.
     * @see #JFrame1()
     */
	public ChartTest(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	/**
	 * The entry point for this application.
	 * Sets the Look and Feel to the System Look and Feel.
	 * Creates a new JFrame1 and makes it visible.
	 */
	static public void main(String args[])
	{
		try {
		    // Add the following code if you want the Look and Feel
		    // to be set to the Look and Feel of the native system.
		    try {
		        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		    } 
		    catch (Exception e) { 
		    }

			//Create a new instance of our application's frame, and make it visible.
			(new ChartTest()).setVisible(true);
		} 
		catch (Throwable t) {
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}

	public void createChart() {
        DataPointCollection bars;
        
		if(this.radioButtonLineChart.getState() == true) {
			//this.m_chart = new LineChart(this.imageViewer.getWidth(), this.imageViewer.getHeight(), 2);
            //this.m_chart = new ColumnChart(this.imageViewer.getWidth(), this.imageViewer.getHeight());
            
            this.m_chart = new HighLowChart(this.imageViewer.getWidth());
//            this.m_chart.showLeftLabels = false;
//            this.m_chart.showBottomLabels = false;
//            this.m_chart.showBottomLegend = false;
//            this.m_chart.valueLines = 5;
//            this.m_chart.showAverage = false;
//            this.m_chart.showPeak = false;
//            this.m_chart.showLow = false;
//            this.m_chart.showBaseline = false;
//            this.m_chart.showHighRange = true;
//            this.m_chart.showLowRange = true;
            
            //this.m_chart = new AreaChart(this.imageViewer.getWidth(), this.imageViewer.getHeight());
            double  high = 0;
            double  low  = 0;
            double  avg  = 0;
            
            for(int dataset = 0;dataset < 1;dataset ++) {
                Random random = new Random(dataset * 100);
                bars = this.m_chart.getDataPoints(dataset);
                
                Date time  = new Date();
                long start = time.getTime();
                int  evt   = 1;
                
                for(int datapt = 0;datapt < 60;datapt++) {
                    long timestamp = start + (600000 * datapt);
                    double value = random.nextInt(100000);
                    double highVal = value * 2;
                    double lowVal = value / 2;
                    
                    //if(datapt >= 10 && datapt <= 20) {                    
                    //    bars.add(new HighLowDataPoint(Double.NaN, Double.NaN, Double.NaN, timestamp));
                    //} else {
                        if(datapt > 0) {
                            highVal = (highVal + (int)((IHighLowDataPoint)bars.get(datapt - 1)).getHighValue()) / 2;
                            lowVal  = (lowVal + (int)((IHighLowDataPoint)bars.get(datapt - 1)).getLowValue()) / 2;
                            value   = (value + (int)((IDataPoint)bars.get(datapt - 1)).getValue()) / 2;
                            avg    += value;
                        }
                        
                        //bars.add(new DataPoint(value, timestamp));
                        bars.add(new HighLowDataPoint(highVal, lowVal, value, timestamp));
                    //}

//                    if(datapt % 17 == 0) {
//                        long evtTime = timestamp; // - 150000;
//                        this.m_chart.getEventPoints(dataset).add(new EventPoint(evt++, evtTime));
//                    }

                    if(value != Double.NaN) {                                            
                        if(value < low)
                            low = value;
                        else if(value > high)
                            high = value;
                    }
                }
            }

            //this.m_chart.getEventPoints().add(new EventPoint(1, 150000));
            
            avg /= 60;
            
            this.m_chart.lowRange     = 0;
//            this.m_chart.showLowRange = true;
            
            this.m_chart.highRange     = 60000; 
//            this.m_chart.showHighRange = true;
            
            this.m_chart.baseline     = avg;
//            this.m_chart.showBaseline = true;
//            this.m_chart.showAverage  = true;
                        
//            bars = this.m_chart.getDataPoints();
//            bars.add(new DataPoint(1, "Foo"));
//            bars.add(new DataPoint(1.25, "Foo"));
//            bars.add(new DataPoint(1.50, "Foo"));
//            bars.add(new DataPoint(1.75, "Foo"));
//            bars.add(new DataPoint(2, "Foo"));
//            bars.add(new DataPoint(1.75, "Foo"));
//            bars.add(new DataPoint(1.5, "Foo"));
//            bars.add(new DataPoint(1.25, "Foo"));
//            bars.add(new DataPoint(1, "Foo"));

//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
//            bars.add(new DataPoint(8000, "Foo"));
//            bars.add(new DataPoint(9000, "Foo"));
//            bars.add(new DataPoint(10000, "Foo"));
            
//            this.m_chart.setFormat(UnitsConstants.UNIT_DURATION, UnitsConstants.SCALE_MILLI);
//            this.m_chart.showAverage = false;
//            this.m_chart.showLow = false;
//            this.m_chart.showPeak = false;
//            this.m_chart.width = 200;
//            this.m_chart.height = 100;
//            this.m_chart.showBottomLegend = false;
//            this.m_chart.valueLines = 4;
//            this.m_chart.valueIndent = 0;
//            this.m_chart.showBottomLabels = false;
//            this.m_chart.showLeftLegend = false;
//            this.m_chart.showValues = true;
            
            //((VerticalChart)this.m_chart).setCumulativeTrend(Trend.TREND_UP);

//          bars.add(new DataPoint(0, "Foo"));
//          bars.add(new DataPoint(0, "Foo"));
//          bars.add(new DataPoint(0, "Foo"));
//          bars.add(new DataPoint(0, "Foo"));
//          bars.add(new DataPoint(0, "Foo"));
//          bars.add(new DataPoint(0, "Foo"));
//          bars.add(new DataPoint(0, "Foo"));
//          bars.add(new DataPoint(0, "Foo"));
//          bars.add(new DataPoint(0, "Foo"));
//          bars.add(new DataPoint(0, "Foo"));
          
            /*
            bars.add(new DataPoint(9000, "Foo"));
            bars.add(new DataPoint(8000, "Foo"));
            bars.add(new DataPoint(7000, "Foo"));
            bars.add(new DataPoint(6000, "Foo"));
            bars.add(new DataPoint(5000, "Foo"));
            bars.add(new DataPoint(4000, "Foo"));
            bars.add(new DataPoint(3000, "Foo"));
            bars.add(new DataPoint(2000, "Foo"));
            bars.add(new DataPoint(1000, "Foo"));
            ((VerticalChart)this.m_chart).setCumulativeTrend(Trend.TREND_DOWN);
            */
                        
            /*            
            bars = this.m_chart.getDataPoints();
            bars.add(new DataPoint(0.49345, 1));
            bars.add(new DataPoint(Double.NaN, 2));
            bars.add(new DataPoint(0.49638, 3));
            bars.add(new DataPoint(Double.NaN, 4));
            bars.add(new DataPoint(0.49638, 5));
            bars.add(new DataPoint(Double.NaN, 6));
            bars.add(new DataPoint(0.49638, 7));
            bars.add(new DataPoint(Double.NaN, 8));
            bars.add(new DataPoint(0.49645, 9));
            bars.add(new DataPoint(Double.NaN, 10));
            bars.add(new DataPoint(0.49618, 11));
            */
            
            /*
            bars.add(new DataPoint(Double.NaN, 1));
            bars.add(new DataPoint(0.204576484, 2));
            bars.add(new DataPoint(0.15043386833333333, 3));
            bars.add(new DataPoint(0.15308839833333332, 4));
            bars.add(new DataPoint(0.16162907666666668, 5));
            bars.add(new DataPoint(0.16748924642857144, 6));
            bars.add(new DataPoint(0.13819594, 7));
            */

            /*
            bars.add(new DataPoint(0.18495296785714285, 1));
            bars.add(new DataPoint(0.15037910166666665, 2));
            bars.add(new DataPoint(0.15302118166666667, 3));
            bars.add(new DataPoint(0.16141389333333334, 4));
            bars.add(new DataPoint(0.16698326964285715, 5));
            bars.add(new DataPoint(0.15646505166666666, 6));
            bars.add(new DataPoint(0.14297036333333332, 7));
            bars.add(new DataPoint(0.16507098666666667, 8));                        
            */

            /*
            bars.add(new DataPoint(0.17728894444444446, 1));
            bars.add(new DataPoint(0.15193925333333333, 2));
            bars.add(new DataPoint(0.13805905833333335, 3));
            bars.add(new DataPoint(0.2009737375, 4));
            bars.add(new DataPoint(0.138602875, 5));
            bars.add(new DataPoint(0.14292789666666667, 6));
            bars.add(new DataPoint(0.14183346666666666, 7));
            bars.add(new DataPoint(0.186940545, 8));
            */
            
            /*
            bars.add(new DataPoint(0, 1));
            bars.add(new DataPoint(0, 2));
            bars.add(new DataPoint(0, 3));
            bars.add(new DataPoint(0, 4));
            bars.add(new DataPoint(0, 5));
            bars.add(new DataPoint(0, 6));
            bars.add(new DataPoint(0, 7));
            bars.add(new DataPoint(0, 8));
            */
            
            //((ColumnChart)this.m_chart).isCumulative = true;
            //this.m_chart.setFormat(org.hyperic.util.units.UnitsConstants.UNIT_NONE,
            //                       org.hyperic.util.units.UnitsConstants.SCALE_NONE);
        }
		else if(this.radioButtonColumnChart.getState() == true) {
			//this.m_chart = new UsageChart(250, 150);
            //this.m_chart = new PerformanceChart(250, 130);
            this.m_chart = new StackedPerformanceChart(this.imageViewer.getWidth(), 4);
            
//            bars = this.m_chart.getDataPoints(0);
//
//            double[] val1 = {2100, 1000, 500};
//            double[] val2 = {1500, 600, 500};
//            double[] val3 = {500, 400, 100};
//
//            bars.add(new StackedDataPoint(val1, "PEAK"));
//            bars.add(new StackedDataPoint(val2, "AVG"));
//            bars.add(new StackedDataPoint(val3, "LOW"));

            /*
            bars.add(new StackedDataPoint(new double[] {145}, "Peak"));
            bars.add(new StackedDataPoint(new double[] {83}, "Avg"));
            bars.add(new StackedDataPoint(new double[] {154}, "Low"));

            bars = this.m_chart.getDataPoints(1);
            bars.add(new StackedDataPoint(new double[] {0, 0, 0}, "Peak"));
            bars.add(new StackedDataPoint(new double[] {0, 0, 0}, "Avg"));
            bars.add(new StackedDataPoint(new double[] {0}, "Low"));

            bars = this.m_chart.getDataPoints(2);
            bars.add(new StackedDataPoint(new double[] {450}, "Peak"));
            bars.add(new StackedDataPoint(new double[] {550}, "Avg"));
            bars.add(new StackedDataPoint(new double[] {0}, "Low"));
            */
            
//            bars.add(new DataPoint(0, 2));
//            bars.add(new DataPoint(0, 3));
//            bars.add(new DataPoint(0, 4));
//            bars.add(new DataPoint(0, 5));
//            bars.add(new DataPoint(0, 6));
//            bars.add(new DataPoint(0, 7));
//            bars.add(new DataPoint(0, 8));
//            bars.add(new DataPoint(0, 9));
//            bars.add(new DataPoint(0, 10));

//            bars.add(new DataPoint(0,    "Foo"));
//            bars.add(new DataPoint(1000, "Foo"));
//            bars.add(new DataPoint(2000, "Foo"));
//            bars.add(new DataPoint(3000, "Foo"));
//            bars.add(new DataPoint(4000, "Foo"));
//            bars.add(new DataPoint(5000, "Foo"));
//            bars.add(new DataPoint(6000, "Foo"));
//            bars.add(new DataPoint(7000, "Foo"));
            
            /*
            bars.add(new DataPoint(Double.NaN, 1));
            bars.add(new DataPoint(Double.NaN, 2));
            bars.add(new DataPoint(.876, 3));
            bars.add(new DataPoint(Double.NaN, 4));
            bars.add(new DataPoint(.867, 5));
            bars.add(new DataPoint(Double.NaN, 6));
            bars.add(new DataPoint(Double.NaN, 7));
            bars.add(new DataPoint(.883, 8));
            */
            
            /*
            bars.add(new DataPoint(25,  "-7hr"));
            bars.add(new DataPoint(50,  "-6hr"));
            bars.add(new DataPoint(75,  "-5hr"));
            bars.add(new DataPoint(100, "-4hr"));
            bars.add(new DataPoint(125, "-3hr"));
            bars.add(new DataPoint(150, "-2hr"));
            bars.add(new DataPoint(175, "-1hr"));
            bars.add(new DataPoint(25, "Now"));
            */

            /*
            bars.add(new DataPoint(60000, "-8hr"));
            bars.add(new DataPoint(12000, "-7hr"));
            bars.add(new DataPoint(18000,  "-6hr"));
            bars.add(new DataPoint(10003235,  "-5hr"));
            bars.add(new DataPoint(203586233, "-4hr"));
            bars.add(new DataPoint(2100, "-3hr"));
            bars.add(new DataPoint(3800, "-2hr"));
            bars.add(new DataPoint(3600, "-1hr"));
            */

            double[] val1 = {1, 1, 0};
            double[] val2 = {0, 0, 0};
            double[] val3 = {3, 2, 1};

//            double[] val1 = {2100, 1000, 500};
//            double[] val2 = {1500, 600, 500};
//            double[] val3 = {500, 400, 100};
            
            PerfDataPointCollection coll =
                (PerfDataPointCollection)this.m_chart.getDataPoints(0);            
            coll.add(new StackedDataPoint(val1, "PEAK"));
            coll.add(new StackedDataPoint(val2, "AVG"));
            coll.add(new StackedDataPoint(val3, "LOW"));
            coll.setRequest(250);
            coll.setURL("http://foobar/foo");

//            coll = (PerfDataPointCollection)this.m_chart.getDataPoints(1);            
//            coll.add(new DataPoint(2500, "PEAK"));
//            coll.add(new DataPoint(2000, "AVG"));
//            coll.add(new DataPoint(1500, "LOW"));
//            coll.setRequest(250);
//            coll.setType(PerfDataPointCollection.ENDUSER); 
//            coll.setURL("http://foobar/foo");
//
//            coll = (PerfDataPointCollection)this.m_chart.getDataPoints(2);            
//            coll.add(new DataPoint(2000, "PEAK"));
//            coll.add(new DataPoint(1500, "AVG"));
//            coll.add(new DataPoint(1000, "LOW"));
//            coll.setRequest(250);
//            coll.setType(PerfDataPointCollection.WEBSERVER, "Some VHost"); 
//            coll.setURL("http://foobar/foo");
//            
//            coll = (PerfDataPointCollection)this.m_chart.getDataPoints(3);            
//            coll.add(new DataPoint(Double.NaN, "PEAK"));
//            coll.add(new DataPoint(Double.NaN, "AVG"));
//            coll.add(new DataPoint(Double.NaN, "LOW"));
//            coll.setRequest(250);
//            coll.setType(PerfDataPointCollection.APPSERVER, "Some WebApp"); 
//            coll.setURL("http://foobar/foo");
            
            /*
            Iterator dpIter = this.m_chart.getDataSetIterator();
                        
            for(int i = 0;i < 4;i ++) {
                bars = (PerfDataPointCollection)dpIter.next();

                // header value
                //bars.setType(segmentId.intValue(), segmentLabel);
                //bars.setURL(summary.getMe().getName());
                //if (data.getShowReq() != null && data.getShowReq().booleanValue() 
                //     && summary.getRequestCount() != null) {
                //    bars.setRequest(summary.getRequestCount().intValue());
                //}
                   
                if (false)
                    bars.add(new StackedDataPoint(new double[] {i * 1000}, "Low"));
                else
                    bars.add(new StackedDataPoint(new double[] { Double.NaN }, "Low"));
                    
                if (false)
                    bars.add(new StackedDataPoint(new double[] {i * 1500}, "Avg"));
                else
                    bars.add(new StackedDataPoint(new double[] { Double.NaN }, "Avg"));

                if (false)
                    bars.add(new StackedDataPoint(new double[] {i * 2000}, "Peak"));
                else
                    bars.add(new StackedDataPoint(new double[] { Double.NaN }, "Peak"));
            }
            */
        }
        else if(this.radioButtonColumnLineChart.getState() == true) {
            //this.m_chart = new ColumnLineChart(this.imageViewer.getWidth(), this.imageViewer.getHeight());
            //this.m_chart = new ColumnChart(250, 130);
            //this.m_chart = new AvailabilityChart(250, 130);
            //this.m_chart = new UsageChart(250, 150);
            this.m_chart = new AvailabilityReportChart();
            bars = this.m_chart.getDataPoints();
            bars.add(new DataPoint(111, null));
            bars.add(new DataPoint(222, null));
            bars.add(new DataPoint(333, null));
            
            /*
            ArrayList src = new ArrayList();
            src.add(new DataPoint(Double.NaN,  1));
            src.add(new DataPoint(Double.NaN,  2));
            src.add(new DataPoint(Double.NaN,  3));
            src.add(new DataPoint(Double.NaN,  4));
            src.add(new DataPoint(Double.NaN,  5));
            src.add(new DataPoint(Double.NaN,  6));
            src.add(new DataPoint(Double.NaN,  7));
            src.add(new DataPoint(1, 8));
            
            PageList list = new PageList(src, src.size());
            */
            
            /*
            bars = this.m_chart.getDataPoints();
            //bars.addAll(list);
            
            bars.add(new DataPoint(1,  null));
            bars.add(new DataPoint(.75,  null));
            bars.add(new DataPoint(.98,  null));
            bars.add(new DataPoint(1,    null));
            bars.add(new DataPoint(1,    null));
            bars.add(new DataPoint(.99,  null));
            bars.add(new DataPoint(.98,  null));
            */
        }
        		
        try {
		    this.imageViewer.setImage(this.m_chart.getImage());
		    this.imageViewer.repaint();
		} catch(Exception e) {
		    System.out.println(e);
		}
	}

    /**
     * Notifies this component that it has been added to a container
     * This method should be called by <code>Container.add</code>, and 
     * not by user code directly.
     * Overridden here to adjust the size of the frame if needed.
     * @see java.awt.Container#removeNotify
     */
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();
		
		super.addNotify();
		
		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;
		
		// Adjust size of frame according to the insets and menu bar
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
		    menuBarHeight = menuBar.getPreferredSize().height;
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	symantec.itools.multimedia.ImageViewer imageViewer = new symantec.itools.multimedia.ImageViewer();
	java.awt.TextField textFieldBorderR = new java.awt.TextField();
	java.awt.Label label1 = new java.awt.Label();
	java.awt.Checkbox radioButtonLineChart = new java.awt.Checkbox();
	java.awt.CheckboxGroup Group1 = new java.awt.CheckboxGroup();
	java.awt.Checkbox radioButtonColumnChart = new java.awt.Checkbox();
	java.awt.Label label2 = new java.awt.Label();
	java.awt.Label label3 = new java.awt.Label();
	java.awt.Label label4 = new java.awt.Label();
	java.awt.TextField textFieldBorderG = new java.awt.TextField();
	java.awt.TextField textFieldBorderB = new java.awt.TextField();
	java.awt.TextField textFieldBkgndR = new java.awt.TextField();
	java.awt.TextField textFieldBkgndG = new java.awt.TextField();
	java.awt.TextField textFieldBkgndB = new java.awt.TextField();
	java.awt.Label label5 = new java.awt.Label();
	java.awt.TextField textFieldLineR = new java.awt.TextField();
	java.awt.TextField textFieldLineG = new java.awt.TextField();
	java.awt.TextField textFieldLineB = new java.awt.TextField();
	java.awt.Label label6 = new java.awt.Label();
	java.awt.TextField textFieldBarR = new java.awt.TextField();
	java.awt.TextField textFieldBarG = new java.awt.TextField();
	java.awt.TextField textFieldBarB = new java.awt.TextField();
	java.awt.Label label7 = new java.awt.Label();
	java.awt.Label label8 = new java.awt.Label();
	java.awt.TextField textFieldBorderWidth = new java.awt.TextField();
	java.awt.Label label9 = new java.awt.Label();
	java.awt.TextField textFieldLineWidth = new java.awt.TextField();
	java.awt.Label label10 = new java.awt.Label();
	java.awt.TextField textFieldHorizLines = new java.awt.TextField();
	java.awt.Label label11 = new java.awt.Label();
	java.awt.TextField textFieldLineOverhang = new java.awt.TextField();
	java.awt.Label label12 = new java.awt.Label();
	java.awt.TextField textFieldChartR = new java.awt.TextField();
	java.awt.TextField textFieldChartG = new java.awt.TextField();
	java.awt.TextField textFieldChartB = new java.awt.TextField();
	java.awt.Label label13 = new java.awt.Label();
	java.awt.TextField textFieldAvgLineR = new java.awt.TextField();
	java.awt.TextField textFieldAvgLineG = new java.awt.TextField();
	java.awt.TextField textFieldAvgLineB = new java.awt.TextField();
	java.awt.Label label14 = new java.awt.Label();
	java.awt.TextField textFieldLowLineR = new java.awt.TextField();
	java.awt.TextField textFieldLowLineG = new java.awt.TextField();
	java.awt.TextField textFieldLowLineB = new java.awt.TextField();
	java.awt.Label label15 = new java.awt.Label();
	java.awt.TextField textFieldPeakLineR = new java.awt.TextField();
	java.awt.TextField textFieldPeakLineG = new java.awt.TextField();
	java.awt.TextField textFieldPeakLineB = new java.awt.TextField();
	java.awt.Checkbox radioButtonColumnLineChart = new java.awt.Checkbox();
	java.awt.Button buttonSave = new java.awt.Button();
	//}}

	//{{DECLARE_MENUS
	//}}

	void exitApplication()
	{
    	this.setVisible(false);    // hide the Frame
    	this.dispose();            // free the system resources
    	System.exit(0);            // close the application
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ChartTest.this)
				JFrame1_windowClosing(event);
		}
	}

	void JFrame1_windowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		JFrame1_windowClosing_Interaction1(event);
	}

	void JFrame1_windowClosing_Interaction1(java.awt.event.WindowEvent event) {
		try {
			this.exitApplication();
		} catch (Exception e) {
		}
	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == radioButtonLineChart)
				radioButtonChart_ItemStateChanged(event);
			else if (object == radioButtonColumnChart)
				radioButtonChart_ItemStateChanged(event);
			else if (object == radioButtonColumnLineChart)
				radioButtonColumnLineChart_ItemStateChanged(event);
		}
	}

	void radioButtonChart_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		this.createChart();
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusLost(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == textFieldBorderR)
				textFieldBorder_FocusLost(event);
			else if (object == textFieldBorderG)
				textFieldBorder_FocusLost(event);
			else if (object == textFieldBorderB)
				textFieldBorder_FocusLost(event);
			else if (object == textFieldBkgndR)
				textFieldBkgnd_FocusLost(event);
			else if (object == textFieldBkgndG)
				textFieldBkgnd_FocusLost(event);
			else if (object == textFieldBkgndB)
				textFieldBkgnd_FocusLost(event);
			else if (object == textFieldLineR)
				textFieldLine_FocusLost(event);
			else if (object == textFieldLineG)
				textFieldLine_FocusLost(event);
			else if (object == textFieldLineB)
				textFieldLine_FocusLost(event);
			else if (object == textFieldBarR)
				textFieldBar_FocusLost(event);
			else if (object == textFieldBarG)
				textFieldBar_FocusLost(event);
			else if (object == textFieldBarB)
				textFieldBar_FocusLost(event);
			else if (object == textFieldBorderWidth)
				textFieldBorderWidth_FocusLost(event);
			else if (object == textFieldHorizLines)
				textFieldHorizLines_FocusLost(event);
			else if (object == textFieldLineOverhang)
				textFieldLineOverhang_FocusLost(event);
			else if (object == textFieldChartR)
				textFieldChart_FocusLost(event);
			else if (object == textFieldChartG)
				textFieldChart_FocusLost(event);
			else if (object == textFieldChartB)
				textFieldChart_FocusLost(event);
			else if (object == textFieldAvgLineR)
				textFieldAvgLine_FocusLost(event);
			else if (object == textFieldAvgLineG)
				textFieldAvgLine_FocusLost(event);
			else if (object == textFieldAvgLineB)
				textFieldAvgLine_FocusLost(event);
			else if (object == textFieldLowLineR)
				textFieldLowLine_FocusLost(event);
			else if (object == textFieldLowLineG)
				textFieldLowLine_FocusLost(event);
			else if (object == textFieldLowLineB)
				textFieldLowLine_FocusLost(event);
			else if (object == textFieldPeakLineR)
				textFieldPeakLine_FocusLost(event);
			else if (object == textFieldPeakLineG)
				textFieldPeakLine_FocusLost(event);
			else if (object == textFieldPeakLineB)
				textFieldPeakLine_FocusLost(event);
		}
	}

	void textFieldBorder_FocusLost(java.awt.event.FocusEvent event)
	{
	    /*
	    int R = Integer.valueOf(this.textFieldBorderR.getText()).intValue();
	    int G = Integer.valueOf(this.textFieldBorderG.getText()).intValue();
	    int B = Integer.valueOf(this.textFieldBorderB.getText()).intValue();
	    
	    Color clr = this.m_chart.getBarBorderColor();
	    
	    if(R != clr.getRed() || G != clr.getGreen() || B != clr.getBlue())
	    {
    		this.m_chart.setBarBorderColor(new Color(R, G, B));

	        try
	        {
		        this.imageViewer.setImage(this.m_chart.getImage());
		    }
		    catch(Exception e)
		    {
		    }
		
		    this.imageViewer.repaint();
		}
		*/
	}

	void textFieldBkgnd_FocusLost(java.awt.event.FocusEvent event)
	{
	    int R = Integer.valueOf(this.textFieldBkgndR.getText()).intValue();
	    int G = Integer.valueOf(this.textFieldBkgndG.getText()).intValue();
	    int B = Integer.valueOf(this.textFieldBkgndB.getText()).intValue();
	    
	    Color clr = this.m_chart.backgroundColor;
	    
	    if(R != clr.getRed() || G != clr.getGreen() || B != clr.getBlue())
	    {
    		this.m_chart.backgroundColor = new Color(R, G, B);

	        try {
		        this.imageViewer.setImage(this.m_chart.getImage());
		    } catch(Exception e) {}
		
		    this.imageViewer.repaint();
		}
	}

	void textFieldLine_FocusLost(java.awt.event.FocusEvent event)
	{
	    int R = Integer.valueOf(this.textFieldLineR.getText()).intValue();
	    int G = Integer.valueOf(this.textFieldLineG.getText()).intValue();
	    int B = Integer.valueOf(this.textFieldLineB.getText()).intValue();
	    
	    Color clr = this.m_chart.xLineColor;
	    
	    if(R != clr.getRed() || G != clr.getGreen() || B != clr.getBlue())
	    {
    		this.m_chart.xLineColor = new Color(R, G, B);

	        try {
		        this.imageViewer.setImage(this.m_chart.getImage());
		    } catch(Exception e) {}
		
		    this.imageViewer.repaint();
		}
	}

	void textFieldBar_FocusLost(java.awt.event.FocusEvent event)
	{
	    /*
	    int R = Integer.valueOf(this.textFieldBarR.getText()).intValue();
	    int G = Integer.valueOf(this.textFieldBarG.getText()).intValue();
	    int B = Integer.valueOf(this.textFieldBarB.getText()).intValue();
	    
	    Color clr = this.m_chart.getBarColor();
	    
	    if(R != clr.getRed() || G != clr.getGreen() || B != clr.getBlue())
	    {
    		this.m_chart.setBarColor(new Color(R, G, B));

	        try
	        {
		        this.imageViewer.setImage(this.m_chart.getImage());
		    }
		    catch(Exception e)
		    {
		    }
		
		    this.imageViewer.repaint();
		}
		*/
	}

	void textFieldBorderWidth_FocusLost(java.awt.event.FocusEvent event)
	{
	    int iWidth = Integer.valueOf(this.textFieldBorderWidth.getText()).intValue();
        
        if(iWidth != this.m_chart.leftBorder) {
            this.m_chart.topBorder = iWidth;
            this.m_chart.leftBorder = iWidth;
            
            try {
                this.imageViewer.setImage( this.m_chart.getImage() );
            } catch(Exception e) {}
            
            this.imageViewer.repaint();
        }
	}

	void textFieldHorizLines_FocusLost(java.awt.event.FocusEvent event)
	{
	    int iHorizLines = Integer.valueOf(this.textFieldHorizLines.getText()).intValue();
        
        if(iHorizLines != this.m_chart.valueLines)
        {
            this.m_chart.valueLines = iHorizLines;
            
            try {
                this.imageViewer.setImage(this.m_chart.getImage());
            } catch(Exception e) {}
            
            this.imageViewer.repaint();
        }
	}

	void textFieldLineOverhang_FocusLost(java.awt.event.FocusEvent event)
	{
	    int iOverhang = Integer.valueOf(this.textFieldLineOverhang.getText()).intValue();
        
        if(iOverhang != this.m_chart.tickMarkHeight) {
            this.m_chart.tickMarkHeight = iOverhang;
            
            try {
                this.imageViewer.setImage(this.m_chart.getImage());
            } catch(Exception e) {}
            
            this.imageViewer.repaint();
        }
	}

	void textFieldChart_FocusLost(java.awt.event.FocusEvent event)
	{
	    int R = Integer.valueOf(this.textFieldChartR.getText()).intValue();
	    int G = Integer.valueOf(this.textFieldChartG.getText()).intValue();
	    int B = Integer.valueOf(this.textFieldChartB.getText()).intValue();
	    
	    Color clr = this.m_chart.chartColor;
	    
	    if(R != clr.getRed() || G != clr.getGreen() || B != clr.getBlue()) {
    		this.m_chart.chartColor = new Color(R, G, B);

	        try {
		        this.imageViewer.setImage(this.m_chart.getImage());
		    } catch(Exception e) {}
		
		    this.imageViewer.repaint();
		}
	}

	void textFieldAvgLine_FocusLost(java.awt.event.FocusEvent event)
	{
	    int R = Integer.valueOf(this.textFieldAvgLineR.getText()).intValue();
	    int G = Integer.valueOf(this.textFieldAvgLineG.getText()).intValue();
	    int B = Integer.valueOf(this.textFieldAvgLineB.getText()).intValue();
	    
	    Color clr = this.m_chart.averageLineColor;
	    
	    if(R != clr.getRed() || G != clr.getGreen() || B != clr.getBlue()) {
    		this.m_chart.averageLineColor = new Color(R, G, B);

	        try {
		        this.imageViewer.setImage(this.m_chart.getImage());
		    } catch(Exception e) {}
		
		    this.imageViewer.repaint();
		}
	}

	void textFieldLowLine_FocusLost(java.awt.event.FocusEvent event)
	{
	    int R = Integer.valueOf(this.textFieldLowLineR.getText()).intValue();
	    int G = Integer.valueOf(this.textFieldLowLineG.getText()).intValue();
	    int B = Integer.valueOf(this.textFieldLowLineB.getText()).intValue();
	    
	    Color clr = this.m_chart.lowLineColor;
	    
	    if(R != clr.getRed() || G != clr.getGreen() || B != clr.getBlue()) {
    		this.m_chart.lowLineColor = new Color(R, G, B);

	        try {
		        this.imageViewer.setImage(this.m_chart.getImage());
		    } catch(Exception e) {}
		
		    this.imageViewer.repaint();
		}
	}

	void textFieldPeakLine_FocusLost(java.awt.event.FocusEvent event)
	{
	    int R = Integer.valueOf(this.textFieldPeakLineR.getText()).intValue();
	    int G = Integer.valueOf(this.textFieldPeakLineG.getText()).intValue();
	    int B = Integer.valueOf(this.textFieldPeakLineB.getText()).intValue();
	    
	    Color clr = this.m_chart.peakLineColor;
	    
	    if(R != clr.getRed() || G != clr.getGreen() || B != clr.getBlue()) {
    		this.m_chart.peakLineColor = new Color(R, G, B);

	        try {
		        this.imageViewer.setImage(this.m_chart.getImage());
		    } catch(Exception e) {}
		
		    this.imageViewer.repaint();
		}
	}

	void radioButtonColumnLineChart_ItemStateChanged(java.awt.event.ItemEvent event)
	{
	    this.createChart();
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == buttonSave)
				buttonSave_ActionPerformed(event);
		}
	}

	void buttonSave_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    try
	    {
		    this.m_chart.writeJpegImage("\\test.jpg");
		    this.m_chart.writePngImage("\\test.png");
		}
		catch(Exception e)
		{
		    System.out.println(e);
		}
	}
}
