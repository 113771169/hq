/*                                                                 
 * NOTE: This copyright does *not* cover user programs that use HQ 
 * program services by normal system calls through the application 
 * program interfaces provided as part of the Hyperic Plug-in Development 
 * Kit or the Hyperic Client Development Kit - this is merely considered 
 * normal use of the program, and does *not* fall under the heading of 
 * "derived work". 
 *  
 * Copyright (C) [2004, 2005, 2006], Hyperic, Inc. 
 * This file is part of HQ.         
 *  
 * HQ is free software; you can redistribute it and/or modify 
 * it under the terms version 2 of the GNU General Public License as 
 * published by the Free Software Foundation. This program is distributed 
 * in the hope that it will be useful, but WITHOUT ANY WARRANTY; without 
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details. 
 *                
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 
 * USA. 
 */

package org.hyperic.hq.measurement;
// Generated Oct 19, 2006 11:49:50 AM by Hibernate Tools 3.1.0.beta4



/**
 * MetricProblem generated by hbm2java
 */
public class MetricProblem  implements java.io.Serializable {

    // Fields    

     private MeasurementDataId id;
     private Integer type;
     private Integer additional;

     // Constructors

    /** default constructor */
    public MetricProblem() {
    }

	/** minimal constructor */
    public MetricProblem(MeasurementDataId id, Integer type) {
        this.id = id;
        this.type = type;
    }
    /** full constructor */
    public MetricProblem(MeasurementDataId id, Integer type, Integer additional) {
        this.id = id;
        this.type = type;
        this.additional = additional;
    }
    
   
    // Property accessors
    public MeasurementDataId getId() {
        return this.id;
    }
    
    public void setId(MeasurementDataId id) {
        this.id = id;
    }
    public Integer getType() {
        return this.type;
    }
    
    public void setType(Integer type) {
        this.type = type;
    }
    public Integer getAdditional() {
        return this.additional;
    }
    
    public void setAdditional(Integer additional) {
        this.additional = additional;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof MetricProblem) ) return false;
		 MetricProblem castOther = ( MetricProblem ) other; 
         
		 return ( (this.getId()==castOther.getId()) || ( this.getId()!=null && castOther.getId()!=null && this.getId().equals(castOther.getId()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getId() == null ? 0 : this.getId().hashCode() );
         
         
         return result;
   }   


}


