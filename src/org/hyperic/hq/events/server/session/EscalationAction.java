/*
 * NOTE: This copyright does *not* cover user programs that use HQ
 * program services by normal system calls through the application
 * program interfaces provided as part of the Hyperic Plug-in Development
 * Kit or the Hyperic Client Development Kit - this is merely considered
 * normal use of the program, and does *not* fall under the heading of
 * "derived work".
 *
 * Copyright (C) [2004, 2005, 2006], Hyperic, Inc.
 * This file is part of HQ.
 *
 * HQ is free software; you can redistribute it and/or modify
 * it under the terms version 2 of the GNU General Public License as
 * published by the Free Software Foundation. This program is distributed
 * in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA.
 */

package org.hyperic.hq.events.server.session;

import org.json.JSONObject;
import org.json.JSONException;
import org.hyperic.hq.Json;

import java.util.Set;
import java.io.Serializable;
// Generated Nov 15, 2006 3:20:57 PM by Hibernate Tools 3.2.0.beta8


/**
 * EscalationAction generated by hbm2java
 */
public class EscalationAction implements Serializable, Json
{

    // Fields

    private Action action;
    private long waitTime;

    /**
     *
     * @param type  Action Type
     * @param notifs  list of notification types
     * @param waitTime  time to wait until escalating to the next level
     * @return
     */
    public static EscalationAction newEmailAction(int type, Set notifs,
                                                  long waitTime) {
        Action act = Action.newEmailAction(type, notifs);
        return createEscalationAction(act, waitTime);
    }

    public static EscalationAction newSyslogAction(String metaProject,
                                                   String project,
                                                   String version,
                                                   long waitTime)
    {
        Action act = Action.newSyslogAction(metaProject, project, version);
        return createEscalationAction(act, waitTime);
    }

    private static EscalationAction createEscalationAction(Action act,
                                                           long waitTime)
    {
        EscalationAction eact = new EscalationAction();
        eact.setAction(act);
        eact.setWaitTime(waitTime);
        return eact;
    }

    // Constructors

    /**
     * default constructor
     */
    protected EscalationAction() {
    }

    /**
     * full constructor
     */
    protected EscalationAction(Action action, long waitTime) {
        this.action = action;
        this.waitTime = waitTime;
    }


    // Property accessors
    public Action getAction() {
        return this.action;
    }

    public void setAction(Action action) {
        this.action = action;
    }

    public long getWaitTime() {
        return this.waitTime;
    }

    public void setWaitTime(long waitTime) {
        this.waitTime = waitTime;
    }

    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || !(obj instanceof EscalationAction)) {
            return false;
        }
        EscalationAction o = (EscalationAction)obj;
        return waitTime == o.getWaitTime() &&
               (action == o.getAction() ||
                (action!=null && o.getAction()!=null &&
                 action.equals(o.getAction())
                )
               );
    }

    public JSONObject toJSON()  throws JSONException
    {
        return new JSONObject()
                .put("action", action.toJSON())
                .put("waitTime", waitTime);
    }

    public int hashCode() {
        int result = 17;

        result = 37*result + (int)(waitTime ^ (waitTime >>> 32));
        result = 37*result + (action != null ? action.hashCode() : 0);

        return result;
    }

    public String toString() {
        return new StringBuffer()
            .append("(action=")
            .append(action)
            .append(", waitTime=" + waitTime)
            .toString();
    }
}


