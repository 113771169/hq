<?xml version="1.0"?>

<project name="setup" default="all" basedir=".">

  <!-- true for text based installs -->
  <available property="server.pgsql.available"
             file="${install.dir}/data/hqdb/pgsql.tar.gz"/>

  <target name="load-basics">
    <property file="${install.dir}/data/version.properties"/>
    <echo>^^^INFO: Initializing Hyperic HQ ${version} Installation...</echo>

    <path id="alljars">
      <fileset dir="${install.dir}/lib" includes="*.jar"/>
    </path>

    <available property="use.builtin.jre" file="${install.dir}/jres"/>

    <condition property="isWin32">
      <os family="windows"/>
    </condition>

    <echo>^^^DEBUG: Loading taskdefs...</echo>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"
             classpathref="alljars"/>
    <taskdef resource="org/hyperic/tools/ant/ant-tools.properties"
             classpathref="alljars"/>
    <echo>^^^DEBUG: Taskdefs loaded</echo>


    <if>
      <equals arg1="${install.mode}" arg2="upgrade"/>
      <then>
        <property name="setup.upgrade" value="true"/>
      </then>
    </if>

    <absolutePath property="base"
                  path="${install.dir}/.."
                  failOnMissing="true"/>

  </target>

  <!-- The server uses a 1.5 JRE. -->
  <target name="pick-server-jre" if="use.builtin.jre">
    <condition property="jre.tar.name" value="amd64-linux-jre-1_6.tar.gz">
        <available file="${install.dir}/jres/amd64-linux-jre-1_6.tar.gz"/>
    </condition>
    <condition property="jre.tar.name" value="x86-linux-glibc2-jre-1_6.tar.gz">
        <available file="${install.dir}/jres/x86-linux-glibc2-jre-1_6.tar.gz"/>
    </condition>
    <condition property="jre.tar.name" value="sparc-sun-solaris-jre-1_6.tar.gz">
        <available file="${install.dir}/jres/sparc-sun-solaris-jre-1_6.tar.gz"/>
    </condition>
    <condition property="jre.exe.name" value="x86-win32-jre-1_6.exe">
        <available file="${install.dir}/jres/x86-win32-jre-1_6.exe"/>
    </condition>
  </target>

  <target name="install-jre-tar" if="jre.tar.name">
    <echo>^^^INFO:
      Unpacking JRE ${jre.tar.name} to: ${destination}...
    </echo>
    <untar src="${install.dir}/jres/${jre.tar.name}"
           dest="${destination}"
           compression="gzip"/>
  </target>

  <target name="install-jre-exe" if="jre.exe.name">
    <echo>^^^INFO:
      Unpacking JRE ${jre.exe.name} to: ${destination}...
    </echo>
    <exec executable="${install.dir}/jres/${jre.exe.name}">
      <arg line="-d '${destination}'"/>
    </exec>
  </target>

 

  <target name="install-server-jre" depends="pick-server-jre" if="use.builtin.jre">
    <echo>^^^INFO: Installing the server JRE ...</echo>
    <antcall target="install-jre-tar"/>
    <antcall target="install-jre-exe"/>
  </target>

  <target name="load-user-setup-properties" if="setup">
    <echo>^^^DEBUG:
      Checking for existence of install configuration file (${setup})
    </echo>

    <absolutePath property="setup.absolute"
                  path="${setup}"
                  pwd="${install.dir}/.."
                  failOnMissing="false"/>
    <available property="user-setup-properties.available"
               file="${setup.absolute}"/>
    <msgfail unless="user-setup-properties.available">^^^ERROR:\
       The specified Hyperic HQ install configuration file does not exist:
         ${setup.absolute}
       Make sure that the setup property is set to the correct file and
       try running the installer again.
    </msgfail>

    <echo>^^^INFO: Loading install configuration...</echo>
    <echo>^^^DEBUG: Loading from ${setup}...</echo>
    <property file="${setup.absolute}"/>
    <ant antfile="setup-noninteractive.xml" target="generate-props"/>
    <echo>^^^DEBUG: Install configuration loaded.</echo>
  </target>

  <target name="load-default-setup-properties" unless="setup">

    <findWritable property="setup"
                  preferredDir="${install.dir}"
                  filename="data/setup.properties"
                  altDirPrefix="HQ_tmp">^^^INFO:
WARNING: Setup properties file can't be written to %ORIGINALFILE%
Setup properties will be written to %WRITABLEFILE% instead.
    </findWritable>
    <delete file="${setup}"/>
    <ant antfile="setup-interactive.xml" target="generate-props"/>
    <echo>^^^INFO: Loading install configuration...</echo>
    <property file="${setup}"/>
    <absolutePath property="setup.absolute"
                  path="${setup}"
                  failOnMissing="true"/>
    <echo>^^^DEBUG: Install configuration loaded.</echo>
  </target>

  <target name="check-eula">
  	<available file="eula.txt" property="eula.present"/>
  </target>

  <target name="show-eula" depends="check-eula" if="eula.present" unless="accept.eula">
  	<loadfile property="eula.text" srcFile="eula.txt"/>
	<echo>^^^INFO:
__ll__
${eula.text}
__ll__
	</echo>
    <input message="Do accept the terms of the agreement?"
           validargs="y,n"
           addproperty="license.accepted" />
	<condition property="do.abort">
      <equals arg1="n" arg2="${license.accepted}"/>
    </condition>
    <fail if="do.abort">The license must be accepted in order to proceed with the installation.</fail>
  </target>

  <target name="init"
          depends="load-basics,load-user-setup-properties,show-eula,load-default-setup-properties">

    <!-- Parameterized names of things to deploy -->
    <echo>^^^INFO: Preparing to install...</echo>
	<property name="tomcat.home" value="${server.installdir}/server-${version}/hq-engine"/>
    <condition property="script-ext" value=".bat">
      <os family="windows"/>
    </condition>
    <condition property="exe-ext" value=".exe">
      <os family="windows"/>
    </condition>
    <condition property="script-ext" value=".sh">
      <os family="unix"/>
    </condition>
    <condition property="exe-ext" value="">
      <os family="unix"/>
    </condition>

    <condition property="server.dont-check-for-overwrite">
      <equals arg1="${server.overwrite}" arg2="Yes"/>
    </condition>
  </target>

  <target name="validate-any" depends="init">
    <if>
      <and>
        <not><isset property="server.installdir"/></not>
        <not><isset property="agent.installdir"/></not>
      </and>
      <then>
        <property name="nothing-to-install" value="true"/>
      </then>
    </if>
    <msgfail if="nothing-to-install">^^^ERROR:
      No software was chosen to install.
    </msgfail>
  </target>

  <target name="all"
          depends="validate-any,agent.valid-props,server.valid-props,agent,server">
    <echo>^^^INFO:
__ll__
Setup completed.
A copy of the output shown above has been saved to:
  ${install.log.path}
__ll__
    </echo>
    <antcall target="pause-before-exit"/>
  </target>

  <!-- If the installer was started by someone double-clicking on the
       setup.bat file, we don't want to make the DOS window just
       disappear on them when the install is done -->
  <target name="pause-before-exit" if="isWin32">
    <if>
      <istrue value="${server.pgsql.available}" />
      <then>
        <input message="Press the Enter key to exit setup."/>
      </then>
    </if>
  </target>

  <target name="agent.valid-props" if="agent.installdir">
    <echo>^^^DEBUG: Validating agent install configuration...</echo>
  </target>

  <target name="validate-os-install">
  </target>

  <target name="agent"
          depends="agent.valid-props"
          if="agent.installdir"
          description="Install the HQ agent.">
    <echo>^^^INFO: Installing the agent...</echo>
    <echo>^^^DEBUG: Looking for previous installation</echo>
    <echo>^^^INFO:
      Unpacking agent to: ${agent.installdir}/agent-${version}...
    </echo>
    <untar src="${base}/agent-${version}.tgz"
           dest="${agent.installdir}"
           compression="gzip"/>

   
    <echo>^^^INFO: Setting permissions on agent binaries...</echo>
    <antcall target="chmod-exec">
      <param name="chmod.dir" value="${agent.installdir}/agent-${version}"/>
    </antcall>
    <echo>^^^INFO: Fixing line endings on text files...</echo>
    <antcall target="fix-text-files">
      <param name="crlf.dir" value="${agent.installdir}/agent-${version}"/>
    </antcall>
    <echo>^^^COMPLETION:
      Agent successfully installed to: ${agent.installdir}/agent-${version}
    </echo>
    <concatWithPrefix failOnMissing="false" file="${setup}.agent-summary.txt" prefix="^^^INFO:"/>
  </target>

  <target name="validate-user-privs"
          if="server.database-url"
          unless="using.builtin.db">
    <!-- Do a sanity check - does the user have the perms required on the DB -->
    <echo>^^^DEBUG: Checking database permissions...</echo>
    <dbprivcheck jdbcUrl="${server.database-url}"
                 jdbcUser="${server.database-user}"
                 jdbcPassword="${server.database-password}"
                 property="server.db.user.permission"
                 errMsgProperty="errMsg"/>
    <antcall target="fail-if-no-permission">
      <param name="errMsg" value="${errMsg}"/>
    </antcall>
  </target>

  <target name="load-upgrade-conf" if="setup.upgrade">
    <!-- Source the existing consolidated config as properties -->
    <property file="${server.upgradedir}/conf/hq-server.conf"/>
  </target>

  <target name="server.valid-props" depends="load-upgrade-conf" if="server.installdir">
    <echo>^^^DEBUG: Validating server install configuration...</echo>
    <msgfail unless="server.database">^^^ERROR:
      No server.database property specified.
    </msgfail>
    <msgfail unless="server.webapp.port">^^^ERROR:
      No server.webapp.port property specified.
    </msgfail>
    <msgfail unless="server.webapp.secure.port">^^^ERROR:
      No server.webapp.secure.port property specified.
    </msgfail>
    <msgfail unless="server.mail.host">^^^ERROR:
      No server.mail.host property specified.
    </msgfail>
    <if>
      <istrue value="${server.database.create}" />
      <then>
        <msgfail unless="server.webapp.baseurl">^^^ERROR:
          No server.webapp.baseurl property specified.
        </msgfail>
      </then>
    </if>

    <!-- Do a sanity check - is anything listening on the server port now? -->
    <echo>^^^DEBUG: Checking server webapp port...</echo>
    <condition property="server.webapp.port.isAlreadyUsed">
      <socket server="127.0.0.1" port="${server.webapp.port}"/>
    </condition>
    <antcall target="fail-if-webapp-port-used"/>

    <!-- Do a sanity check - is anything listening on the server's secure port now? -->
    <echo>^^^DEBUG: Checking server secure webapp port...</echo>
    <condition property="server.webapp.secure.port.isAlreadyUsed">
      <socket server="127.0.0.1" port="${server.webapp.secure.port}"/>
    </condition>
    <antcall target="fail-if-webapp-secure-port-used"/>

    <!-- Hack to set the builtin flag if hqdb exists in previous install -->
    <available file="${server.upgradedir}/hqdb" property="using.builtin.db"/>

    <!-- Do a sanity check - does the user have the perms required on the DB -->
    <antcall target="validate-user-privs" />

    <if>
      <istrue value="${server.database.create}" />
      <then>
        <echo>^^^DEBUG: Verifying admin user properties</echo>
        <msgfail unless="server.admin.username">^^^ERROR:\
          No server.admin.username property was specified.
        </msgfail>
        <msgfail unless="server.admin.password">^^^ERROR:\
          No server.admin.password property was specified.
        </msgfail>
        <msgfail unless="server.admin.email">^^^ERROR:\
          No server.admin.email property was specified.
        </msgfail>

        <condition property="server.admin.username.illegal">
          <equals arg1="${server.admin.username}" arg2="admin" trim="true"/>
        </condition>
        <msgfail if="server.admin.username.illegal">^^^ERROR:\
          The server.admin.username property has an illegal or reserved value.
        </msgfail>
      </then>
    </if>

    <!-- Do DB-specific validation stuff -->
    <echo>^^^DEBUG: Validating server DB configuration...</echo>
    <ant antfile="setup-db-${server.database}.xml"
         target="validate"/>
  </target>

  <target name="fail-if-webapp-port-used" if="server.webapp.port.isAlreadyUsed">
    <msgfail>^^^ERROR:\
      There is another program using port ${server.webapp.port}.
      Please choose a different value for the server.webapp.port property.
    	
      Run the setup program with the "-full" option so that you
      can pick either an alternate port or a different database to use
      for the HQ server.
    </msgfail>
  </target>
  <target name="fail-if-webapp-secure-port-used" if="server.webapp.secure.port.isAlreadyUsed">
    <msgfail>^^^ERROR:\
      There is another program using port ${server.webapp.secure.port}.
      Please choose a different value for the server.webapp.secure.port property.
    	
      Run the setup program with the "-full" option so that you
      can pick either an alternate port or a different database to use
      for the HQ server.
    </msgfail>
  </target>
  <target name="fail-if-no-permission" unless="server.db.user.permission">
    <msgfail>^^^ERROR:\
${errMsg}
    </msgfail>
  </target>

  <target name="server"
          depends="validate-os-install,server.valid-props,fail-if--server.alreadyInstalled"
          if="server.installdir"
          description="Install or upgrade the HQ server.">
    <antcall target="server-install"/>
    <antcall target="server-upgrade"/>
  </target>

  <target name="server-install" depends="setup-server-init" unless="setup.upgrade">
    <echo>^^^INFO: Installing the server...</echo>
    <antcall target="setup-server"/>
    <echo>^^^COMPLETION:
      Server successfully installed to: ${server.product.dir}
    </echo>
    <concatWithPrefix failOnMissing="false" file="${setup}.server-summary.txt" prefix="^^^INFO:"/>
  </target>

  <target name="server-upgrade" depends="setup-server-init" if="setup.upgrade">
    <echo>^^^INFO: Upgrading the server...</echo>
    <antcall target="setup-server"/>
    <echo>^^^INFO: Copying existing hq-server.conf</echo>
    <!-- Copy the existing config -->
    <serverConfigUpgrade existing="${server.upgradedir}/conf/hq-server.conf" 
    	new="${server.installdir}/server-${version}/conf/hq-server.conf" upgradeDir="${server.upgradedir}"/>
  	
    <!-- Copy the existing license file, if there is one -->
    <echo>^^^INFO: Copying existing license file</echo>
    <copy file="${server.upgradedir}/conf/license.xml"
          todir="${server.installdir}/server-${version}/conf"
          failonerror="false"/>
  	
  	<!-- Copy log4j.xml from evolution or later -->
    <copy file="${server.upgradedir}/conf/log4j.xml"
            todir="${server.installdir}/server-${version}/conf"
            failonerror="false"/>
  	
    <echo>^^^INFO: Copying existing HQ server cache information</echo>
  	<!-- Copy from 4.3 or earlier -->
    <ehcacheUpgrade existing="${server.upgradedir}/hq-engine/server/default/deploy/hq.ear/ehcache.xml"
                    new="${server.installdir}/server-${version}/hq-engine/hq-server/webapps/ROOT/WEB-INF/classes/ehcache.xml"/>

  	<!-- Copy from evolution or later -->
  	<ehcacheUpgrade existing="${server.upgradedir}/hq-engine/hq-server/webapps/ROOT/WEB-INF/classes/ehcache.xml"
  	                    new="${server.installdir}/server-${version}/hq-engine/hq-server/webapps/ROOT/WEB-INF/classes/ehcache.xml"/>
  	
    <echo>^^^INFO: Copying existing HQU plugins</echo>
  	<!-- Copy from 4.3 or earlier-->
    <copy todir="${server.installdir}/server-${version}/hq-engine/hq-server/webapps/ROOT/hqu" failonerror="false">
      <fileset dir="${server.upgradedir}/hq-engine/server/default/deploy/hq.ear/hq.war/hqu"/>
    </copy>
  	
  	<!--Copy from evolution or later -->
  	<copy todir="${server.installdir}/server-${version}/hq-engine/hq-server/webapps/ROOT/hqu" failonerror="false">
  	      <fileset dir="${server.upgradedir}/hq-engine/hq-server/webapps/ROOT/hqu"/>
  	</copy>

  	<echo>^^^INFO: Copying existing state files</echo>
  	<!-- Copy from 4.3 or earlier-->
  	<copy todir="${server.installdir}/server-${version}/hq-engine/hq-server" failonerror="false">
      <fileset dir="${server.upgradedir}/hq-engine/" includes="*.dat"/>
    </copy>
  	
  	<!--Copy from evolution or later -->
	<copy todir="${server.installdir}/server-${version}/hq-engine/hq-server" failonerror="false">
      <fileset dir="${server.upgradedir}/hq-engine/hq-server" includes="*.dat"/>
    </copy>	
  	

    <echo>^^^COMPLETION:
      Server successfully upgraded to: ${server.product.dir}
    </echo>
    <concatWithPrefix failOnMissing="false" file="${setup}.server-summary.txt" prefix="^^^INFO:"/>
  </target>

  <target name="setup-server-init">
    <property name="server.vname" value="server-${version}"/>
    <property name="server.product.dir"
              value="${server.installdir}/${server.vname}"/>
  </target>

  <target name="generate-hq-server-conf" unless="setup.upgrade">
    <substProps src="${install.dir}/data/hq-server.conf"
                dest="${conf-dir}/hq-server.conf"/>
  </target>

  <target name="setup-server">
    <echo>
      ^^^INFO: Unpacking server to: ${server.installdir}/server-${version}...
    </echo>
    <untar src="${base}/${server.vname}.tgz"
           dest="${server.installdir}"
           compression="gzip"/>

    <!-- Setup conf directory -->
    <echo>^^^INFO: Creating server configuration files...</echo>
    <property name="conf-dir" value="${server.product.dir}/conf"/>
    <antcall target="copy-license"/>
    <antcall target="generate-hq-server-conf"/>

    <property name="tomcat.home"
              value="${server.product.dir}/hq-engine"/>
   

    <echo>^^^INFO: Copying binaries and libraries to server installation...</echo>

    <!-- We only keep this file around for debugging, in case we need
         to know what settings the user used when they originally
         installed the server -->
    <echo>^^^DEBUG: Copying server configuration file...</echo>
    <copy tofile="${server.product.dir}/data/hq-server-install.conf"
          file="${setup.absolute}"/>
    <chmod file="${server.product.dir}/data/hq-server-install.conf" perm="go-rwx"/>

    <!-- Copy server control file to server's data dir -->
    <mkdir dir="${server.product.dir}/data"/>

    <echo>^^^DEBUG: Copying server db-upgrade files...</echo>
    <copy todir="${server.product.dir}/data">
      <fileset dir="${install.dir}/data">
        <include name="db-upgrade.xml"/>
        <include name="common-dbsetup-typemap.xml"/>
      </fileset>
    </copy>

    <!-- Copy lib jars to server's lib dir -->
    <echo>^^^DEBUG: Copying server libs...</echo>
    <mkdir dir="${server.product.dir}/lib"/>
    <copy todir="${server.product.dir}/lib">
      <fileset dir="${install.dir}/lib">
        <include name="ant-contrib.jar"/>
        <include name="ant.jar"/>
        <include name="ant-launcher.jar"/>
        <include name="commons-logging-1.0.4.jar"/>
        <include name="hq-installer.jar"/>
    	<include name="hq-util.jar"/>
      	<include name="hq-common.jar"/>
        <include name="oro-2.0.8.jar"/>
        <include name="sigar-*.dll"/>
        <include name="libsigar-*"/>
        <include name="libreadline-java.jar"/>
        <include name="optional.jar"/>
        <include name="sigar.jar"/>
        <include name="xercesImpl.jar"/>
        <include name="xml-apis.jar"/>
        <include name="groovy-all-*.jar"/>
        <include name="hibernate3.jar"/>
        <include name="postgresql-*.jar"/>
        <include name="mysql-connector-java-*.jar"/>
        <include name="ojdbc*.jar"/>
      </fileset>
    </copy>

    <!-- Do DB-specific stuff -->
    <echo>^^^INFO: Setting up server database...</echo>
    <ant antfile="setup-db-${server.database}.xml" target="setup"/>

    <antcall target="install-server-jre">
      <param name="destination" value="${server.product.dir}" />
    </antcall>

    <!-- Mark executables as executable -->
    <echo>^^^INFO: Setting permissions on server binaries...</echo>
    <antcall target="chmod-exec">
      <param name="chmod.dir" value="${server.product.dir}"/>
    </antcall>
    <echo>^^^INFO: Fixing line endings on text files...</echo>
    <antcall target="fix-text-files">
      <param name="crlf.dir" value="${server.product.dir}"/>
    </antcall>

    <delete dir="${server.product.dir}/data/conf"/>

    <antcall target="debug-setup"/>
  </target>

  <target name="copy-license" unless="setup.upgrade">
    <copy file="${install.dir}/data/license.xml" todir="${conf-dir}"
          failonerror="false"/>
  </target>

  <!-- If server.overwrite is not set or is false, check for an
       existing HQ server installation -->
  <target name="fail-if--server.alreadyInstalled"
		  if="server.installdir"
          unless="server.dont-check-for-overwrite">
    <condition property="server.isInstalled">
      <or>
        <available file="${server.installdir}/server-${version}"/>
        <available file="${server.installdir}/conf/hq-server.conf"/>
      </or>
    </condition>
    <msgfail if="server.isInstalled">^^^ERROR:\
      The installer detected that a Hyperic HQ server is already
      installed in ${server.installdir}/server-${version}
    </msgfail>
  </target>

  <!-- Only fix line endings on windows.  Line endings will not contain CR's
       so there should be no reason to run this on unix platforms.  This
       task is also broken on Darwin with Ant 1.5 -->
  <target name="fix-text-files" if="isWin32">
    <fixcrlf srcdir="${crlf.dir}"
        includes="**/*.bat **/*.properties **/*.txt **/ReadMe* **/*.conf **/*.xml"/>
  </target>

  <target name="chmod-exec">
    <chmod perm="a+rx">
      <fileset dir="${chmod.dir}">
        <include name="**/bin/*"/>
        <include name="**/sbin/*"/>
		<!-- Set java permissions for Sun Sparc 64 bit JVM -->
		<include name="**/bin/sparcv9/*"/>
        <include name="**/*.sh"/>
        <include name="**/*.bat"/>
        <include name="**/*.cmd"/>
        <include name="**/*.sl"/>
      </fileset>
    </chmod>
  </target>

  <target name="debug-check">
    <condition property="debug.enabled">
      <available file="${install.dir}/data/debug"/>
    </condition>
  </target>
  <target name="debug-setup" depends="debug-check" if="debug.enabled">
    <echo>^^^INFO: Setting up debugging code...</echo>
    <ant antfile="${install.dir}/data/debug/install-build.xml"
         target="install">
      <property name="debug.home" value="${install.dir}/data/debug"/>
      <property name="tomcat.home" value="${tomcat.home}"/>
    </ant>
  </target>

</project>
