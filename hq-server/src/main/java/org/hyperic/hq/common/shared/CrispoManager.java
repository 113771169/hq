/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.common.shared;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.hyperic.hq.common.server.session.Crispo;
import org.hyperic.hq.common.server.session.CrispoOption;
import org.hyperic.util.config.ConfigResponse;

/**
 * Local interface for CrispoManager.
 */
public interface CrispoManager {
    /**
     * Create a new {@link Crispo} from a {@link Map} of {@link String}
     * key/value pairs
     */
    public Crispo createCrispo(Map<String, String> keyVals);

    public Collection<Crispo> findAll();

    public Crispo findById(Integer id);

    /**
     * Delete a {@link Crispo} and all the options contained within.
     */
    public void deleteCrispo(Crispo c);

    /**
     * Create a new Crispo, filled out with the values from a
     * {@link ConfigResponse}
     */
    public Crispo create(ConfigResponse cfg);

    /**
     * Update a crispo, matching the saved crispo to the values in the config
     * repsonse.
     */
    public void update(Crispo c, ConfigResponse cfg);

    /**
     * Find a List of CrispoOptions given the search key.
     * @param key The key to search for
     * @return A list of CrispoOptions that have a key that matches in whole or
     *         part the given key parameter.
     */
    public List<CrispoOption> findOptionByKey(String key);

    /**
     * Find a List of CrispoOptions given the search value.
     * @param val The value to search for
     * @return A list of CrispoOptions that have a value (in the array) that
     *         matches
     */
    public List<CrispoOption> findOptionByValue(String val);

    /**
     * Update the given CrispoOption with the given value.
     * @param o The CrispoOption to update
     * @param val The new value for this option
     */
    public void updateOption(CrispoOption o, String val);

}
