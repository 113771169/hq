<?xml version="1.0" encoding="UTF-8"?>
<!-- NOTE: This copyright does *not* cover user programs that use HQ program 
	services by normal system calls through the application program interfaces 
	provided as part of the Hyperic Plug-in Development Kit or the Hyperic Client 
	Development Kit - this is merely considered normal use of the program, and 
	does *not* fall under the heading of "derived work". Copyright (C) [2009-2010], 
	VMware, Inc. This file is part of HQ. HQ is free software; you can redistribute 
	it and/or modify it under the terms version 2 of the GNU General Public License 
	as published by the Free Software Foundation. This program is distributed 
	in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
	the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
	See the GNU General Public License for more details. You should have received 
	a copy of the GNU General Public License along with this program; if not, 
	write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
	Boston, MA 02111-1307 USA. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<context:spring-configured />

	<tx:annotation-driven mode="aspectj"/>

	<bean id="performanceMonitorAspect" class="org.hyperic.hq.monitor.aop.aspects.PerformanceMonitor"
		factory-method="aspectOf">
		<description>Monitors duration of execution on transactional methods
			in the service layer.</description>
		<property name="maximumDuration" value="${hq.methodWarn.time}" />
		<property name="warningMessage" value="Method exceeded acceptable duration: " />
	</bean>
	
	<bean id="jasyptConfiguration"
		class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES" />
		<property name="passwordSysPropertyName" value="server.encryption-key" />
	</bean>

	<bean id="propertyPasswordEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="jasyptConfiguration" />
	</bean>

	<!-- hq-server.conf may be copied to the WEB-INF/classes dir by the installer 
		and should override any properties defined in other files, so it's last on 
		the list -->
	<bean
		class="org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer"
		p:ignoreResourceNotFound="true" p:systemPropertiesModeName="SYSTEM_PROPERTIES_MODE_OVERRIDE">
		<constructor-arg ref="propertyPasswordEncryptor" />
		<property name="locations">
			<list>
				<value>classpath:/hq-version.properties</value>
				<value>classpath:/spring-jdbc.properties</value>
				<value>classpath:/mail-config.properties</value>
				<value>classpath:/quartz.properties</value>
				<value>classpath:/jms.properties</value>
				<value>classpath:/hibernate.properties</value>
				<value>classpath:/tweak.properties</value>
				<value>classpath:/neo4j.properties</value>
				<value>file://#{ systemProperties['user.home']
					}/.hq/build.properties</value>
				<value>classpath:/hq-server.conf</value>
			</list>
		</property>
		<property name="properties">
			<props>
				<prop key="ha.partition"></prop>
				<prop key="ha.node.address"></prop>
				<prop key="ha.node.mcast_addr">238.1.2.3</prop>
				<prop key="ha.node.mcast_port">45566</prop>
				<prop key="ha.node.cacheListener.port">45567</prop>
				<prop key="ha.node.cacheProvider.port">45568</prop>
				<prop key="ha.node.ipTTL">64</prop>
				<prop key="server.admin.email">hqadmin@localhost</prop>
				<prop key="server.webapp.baseurl">http://localhost:8080</prop>
				<prop key="server.mail.host">127.0.0.1</prop>
				<prop key="server.mail.sender">hqadmin@localhost</prop>
				<prop key="server.multicast.addr"></prop>
				<prop key="server.multicast.port"></prop>
				<prop key="server.admin.password">XfLzwfNQujo/CxxaYX3OCg==</prop>
			</props>
		</property>
	</bean>

	<context:component-scan base-package="org.hyperic,com.hyperic">
		<context:exclude-filter expression=".*_Roo_.*"
			type="regex" />
	</context:component-scan>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.jobStore.driverDelegateClass">${server.quartzDelegate}</prop>
				<prop key="org.quartz.scheduler.rmi.export">${quartz.scheduler.rmi.export}</prop>
				<prop key="org.quartz.scheduler.rmi.proxy">${quartz.scheduler.rmi.proxy}</prop>
				<prop key="org.quartz.threadPool.class">${quartz.threadPool.class}</prop>
				<prop key="org.quartz.threadPool.threadCount">${quartz.threadPool.threadCount}</prop>
				<prop key="org.quartz.threadPool.threadPriority">${quartz.threadPool.threadPriority}</prop>
				<prop key="org.quartz.jobStore.useProperties">${quartz.jobStore.useProperties}</prop>
			</props>
		</property>
	</bean>

	<bean id="runtimeReportProcessor"
		class="org.hyperic.hq.autoinventory.server.session.RuntimeReportProcessor"
		scope="prototype" />

	<bean class="org.hyperic.hq.appdef.server.session.ResourceTreeGenerator" />


	<bean id="tweakProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean"
		p:location="classpath:/tweak.properties" />

	<context:mbean-export />
	<context:mbean-server />

	<bean class="org.hyperic.hq.transport.util.AsynchronousInvoker">
		<constructor-arg value="4" />
	</bean>

	<!-- This bean refers to various classes that should be loaded at startup. 
		Its only interest is loading the classes listed to have static blocks in 
		them executed (which typically register event types) -->
	<util:list id="triggers">
		<bean class="org.hyperic.hq.bizapp.server.trigger.conditional.AlertTrigger" />
		<bean
			class="org.hyperic.hq.bizapp.server.trigger.conditional.ConfigChangedTrigger" />
		<bean
			class="org.hyperic.hq.bizapp.server.trigger.conditional.ValueChangeTrigger" />
		<bean
			class="org.hyperic.hq.bizapp.server.trigger.conditional.ControlEventTrigger" />
		<bean
			class="org.hyperic.hq.bizapp.server.trigger.conditional.CustomPropertyTrigger" />
		<bean
			class="org.hyperic.hq.bizapp.server.trigger.conditional.LogEventTrigger" />
		<bean
			class="org.hyperic.hq.bizapp.server.trigger.conditional.MeasurementThresholdTrigger" />
		<bean
			class="org.hyperic.hq.bizapp.server.trigger.conditional.ValueChangeTrigger" />
	</util:list>

	<!-- This bean refers to various classes that should be loaded at startup. 
		Its only interest is loading the classes listed to have the no-argument constructor 
		called to do some initialization. -->
	<util:list id="actions">
		<bean class="org.hyperic.hq.bizapp.server.action.integrate.OpenNMSAction" />
	</util:list>

	<task:scheduler id="scheduler" pool-size="4"/>
	
	<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler" id="concurrentStatsScheduler" p:poolSize="8">
		<property name="threadFactory">
			<bean class="org.hyperic.hq.stats.ConcurrentStatsCollectorThreadFactory"/>
		</property>
	</bean>

	<!-- Executor that ControlManager uses to run tasks that wait for control 
		action results -->
	<task:executor id="controlExecutor" pool-size="1-5"
		queue-capacity="500" rejection-policy="CALLER_RUNS" />

	<bean class="org.hyperic.hq.application.Scheduler">
		<constructor-arg value="10" />
	</bean>

	<bean class="org.hyperic.hq.common.Log4jWatcher">
		<constructor-arg value="/log4j.xml" />
	</bean>
	
	<bean id="sessionFactory"
		class="org.hyperic.hibernate.CacheInitializingLocalSessionFactoryBean">
		<constructor-arg ref="preloadCaches" />
	</bean>
	
	<util:list id="preloadCaches">
		<value>org.hyperic.hq.agent.mgmt.domain.AgentType</value>
		<value>org.hyperic.hq.agent.mgmt.domain.Agent</value>
		<value>org.hyperic.hq.agent.mgmt.domain.ManagedResource</value>
		<value>org.hyperic.hq.measurement.server.session.Category</value>
		<value>org.hyperic.hq.measurement.server.session.MonitorableType
		</value>
		<value>org.hyperic.hq.plugin.mgmt.domain.Plugin</value>
	</util:list>
	
	<bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase" depends-on="dataSource">
		<property name="dataSource" ref="dataSource" />
		<property name="changeLog"
			value="classpath:/data/liquibase-db-master.xml" />
		<property name="changeLogParameters">
			<map>
				<entry key="server.admin.email" value="${server.admin.email}"/>
				<entry key="server.webapp.baseurl" value="${server.webapp.baseurl}"/>
				<entry key="server.mail.host" value="${server.mail.host}"/>
				<entry key="server.mail.sender" value="${server.mail.sender}"/>
				<entry key="server.multicast.addr" value="${server.multicast.addr}"/>
				<entry key="server.multicast.port" value="${server.multicast.port}"/>
				<entry key="hq.version" value="${version}"/>
				<entry key="server.admin.password" value="${server.admin.password}"/>
			</map>
		</property>
	</bean>

</beans>
