// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.hyperic.hq.inventory.web;

import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.hyperic.hq.inventory.domain.Agent;
import org.hyperic.hq.inventory.domain.Config;
import org.hyperic.hq.inventory.domain.Ip;
import org.hyperic.hq.inventory.domain.Platform;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PlatformController_Roo_Controller {
    
    @Autowired
    private GenericConversionService PlatformController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String PlatformController.create(@Valid Platform platform, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("platform", platform);
            return "platforms/create";
        }
        platform.persist();
        return "redirect:/platforms/" + encodeUrlPathSegment(platform.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String PlatformController.createForm(Model model) {
        model.addAttribute("platform", new Platform());
        return "platforms/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String PlatformController.show(@PathVariable("id") Long id, Model model) {
        model.addAttribute("platform", Platform.findPlatform(id));
        model.addAttribute("itemId", id);
        return "platforms/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String PlatformController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("platforms", Platform.findPlatformEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Platform.countPlatforms() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("platforms", Platform.findAllPlatforms());
        }
        return "platforms/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String PlatformController.update(@Valid Platform platform, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("platform", platform);
            return "platforms/update";
        }
        platform.merge();
        return "redirect:/platforms/" + encodeUrlPathSegment(platform.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String PlatformController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("platform", Platform.findPlatform(id));
        return "platforms/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String PlatformController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Platform.findPlatform(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/platforms?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @RequestMapping(params = { "find=ByFqdnEquals", "form" }, method = RequestMethod.GET)
    public String PlatformController.findPlatformsByFqdnEqualsForm(Model model) {
        return "platforms/findPlatformsByFqdnEquals";
    }
    
    @RequestMapping(params = "find=ByFqdnEquals", method = RequestMethod.GET)
    public String PlatformController.findPlatformsByFqdnEquals(@RequestParam("fqdn") String fqdn, Model model) {
        model.addAttribute("platforms", Platform.findPlatformsByFqdnEquals(fqdn).getResultList());
        return "platforms/list";
    }
    
    @RequestMapping(params = { "find=ByFqdnLike", "form" }, method = RequestMethod.GET)
    public String PlatformController.findPlatformsByFqdnLikeForm(Model model) {
        return "platforms/findPlatformsByFqdnLike";
    }
    
    @RequestMapping(params = "find=ByFqdnLike", method = RequestMethod.GET)
    public String PlatformController.findPlatformsByFqdnLike(@RequestParam("fqdn") String fqdn, Model model) {
        model.addAttribute("platforms", Platform.findPlatformsByFqdnLike(fqdn).getResultList());
        return "platforms/list";
    }
    
    @ModelAttribute("agents")
    public Collection<Agent> PlatformController.populateAgents() {
        return Agent.findAllAgents();
    }
    
    @ModelAttribute("configs")
    public Collection<Config> PlatformController.populateConfigs() {
        return Config.findAllConfigs();
    }
    
    @ModelAttribute("ips")
    public Collection<Ip> PlatformController.populateIps() {
        return Ip.findAllIps();
    }
    
    Converter<Agent, String> PlatformController.getAgentConverter() {
        return new Converter<Agent, String>() {
            public String convert(Agent agent) {
                return new StringBuilder().append(agent.getAddress()).append(" ").append(agent.getPort()).append(" ").append(agent.getAuthToken()).toString();
            }
        };
    }
    
    Converter<Ip, String> PlatformController.getIpConverter() {
        return new Converter<Ip, String>() {
            public String convert(Ip ip) {
                return new StringBuilder().append(ip.getAddress()).append(" ").append(ip.getNetmask()).append(" ").append(ip.getMacAddress()).toString();
            }
        };
    }
    
    Converter<Platform, String> PlatformController.getPlatformConverter() {
        return new Converter<Platform, String>() {
            public String convert(Platform platform) {
                return new StringBuilder().append(platform.getFqdn()).append(" ").append(platform.getName()).toString();
            }
        };
    }
    
    @PostConstruct
    void PlatformController.registerConverters() {
        conversionService.addConverter(getAgentConverter());
        conversionService.addConverter(getIpConverter());
        conversionService.addConverter(getPlatformConverter());
    }
    
    private String PlatformController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
