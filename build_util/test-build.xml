<?xml version="1.0"?>

<project name="test-build" basedir="..">

<property file="${hq.home}/build_util/clover.properties"/>

<target name="init-tests">
  <delete dir="${junitResults.dir}"/>
  <mkdir dir="${junitResults.dir}"/>
</target>

<target name="single-test">
  <fail message="Must specify a test case system property: -Dtestcase=org.hyperic.My_test" unless="testcase"/>
    <echo message="Running Single Test: ${testcase}"/>
    <antcall target="test">
    <param name="single.test" value="true" />
    </antcall>
</target>


<target name="test" depends="init,init-taskdefs,init-tests">
  <path id="test.compile.classpath">
    <path refid="alljars"/>
     <path refid="testjars"/>
      <path location="${build.dir}/classes" />
  </path>
  <test-run classpath.id="test.compile.classpath" input.dir="${basedir}/unittest/src"/>
</target>

<macrodef name="test-run">
    <attribute name="classpath.id"/>
    <attribute name="input.dir"/>
    <sequential>


  <condition property="test.halt" value="false" else="true">
    <istrue value="${ci.build}"/>
  </condition>

  <echo message="Halt on error or failure: ${test.halt}"/>

    <junit reloading="no" fork="true" forkmode="once" printsummary="yes" haltOnError="${test.halt}" haltOnFailure="${test.halt}">
       
     <jvmarg value="-Dtest.halt=${test.halt}"/>
    <classpath refid="@{classpath.id}"/>

       <formatter type="xml"/>

       <test name="${testcase}" todir="${junitResults.dir}" if="single.test" />

       <batchtest todir="${junitResults.dir}" unless="single.test">
           <fileset dir="@{input.dir}">
				<include name="**/*Test.java"/>
           </fileset>
      </batchtest>
    </junit>
  </sequential>
  </macrodef>

  <target name="cactus" depends="init,init-taskdefs,init-tests">
    <junit reloading="no" fork="no" printsummary="yes" haltonerror="no">
      <classpath>
        <path refid="alljars"/>
        <path refid="testjars"/>
        <path location="${build.dir}/classes" />
        <path>
          <fileset dir="${thirdparty.lib}" includes="*.jar" />
        </path>
      </classpath>
      <formatter type="plain"/>
      <batchtest todir="${junitResults.dir}">
        <fileset dir="src">
          <include name="**/*CactusTest.java"/>
        </fileset>
      </batchtest>
      <sysproperty key="mockejb.cactus.mode" value="true"/>
      <sysproperty key="hq.example.plugins" value="${hq.home}/plugins/examples"/>
      <sysproperty key="pdk.dir" value="${pdk.dir}"/>
    </junit>

  </target>

  <target name="clover" depends="clover.pre, clover.instrument, clover.compile, pack, precompile-jsp, pack-test-coverage, pack-test-ear, clover.testdb.setup, test-prepare-jboss, clover.do, clover.post" description="Executes all tests resulting from a compilation of the test tree returning test coverage metrics."/>

  <target name="clover.pre">
    <delete dir="${clover.output.dir}" quiet="true"/>
    <mkdir dir="${clover.output.dir}"/>
  </target>

  <target name="clover.testdb.setup">
      <property name="unittest-lib" location="${hq.home}/unittest/lib" />
     <antcall target="test-dbsetup">
        <param name="unittest.lib" value="${unittest-lib}"/>
      </antcall>
  </target>

   <target name="clover.do" depends="clover.init, init-tests">
    <path id="clover.run.classpath">
      <pathelement location="${build.dir}/classes"/>
        <path refid="clover.classpath"/>
        <path refid="testjars"/>
    </path>
    <test-run classpath.id="clover.run.classpath" input.dir="${test.clover.dir}"/>
  </target>

    <target name="clover.instrument" depends="clover.init">
      <property name="unittest-lib" location="${hq.home}/unittest/lib" />
      <antcall target="hibernate-prep">
        <param name="unittest.lib" value="${unittest-lib}"/>
      </antcall>
      <antcall target="copy-resources"/>
    <instrument input.dir="${basedir}/src" output.dir="${main.clover.dir}"/>
    <instrument input.dir="${basedir}/unittest/src" output.dir="${test.clover.dir}"/>
  </target>

  <target name="clover.compile" depends="clover.pre,clover.instrument">
    <path id="clover.compile.classpath">
        <path refid="clover.classpath"/>
        <path refid="testjars"/>
        <pathelement location="${build.dir}/tools/txsnatch/classes"/>
    </path>
    <path id="main.src.path">
      <path location="${basedir}/generated-src" />
      <path location="${main.clover.dir}" />
    </path>
    <path id="test.src.path">
	  <path location="${test.clover.dir}" />
	</path>
    <path id="compile.classpath">
      <path refid="alljars" />
      <path refid="testjars" />
    </path>
    <compile-app classpath.id="clover.compile.classpath" srcpath.id="main.src.path" output.dir="${build.dir}/classes"/>
	<compile-test-sources classpath.id="clover.compile.classpath" srcpath.id="test.src.path" output.dir="${build.dir}/classes"/>
  </target>

  <target name="clover.init" depends="init">
    <taskdef resource="cloverlib.xml" classpathref="clover.classpath"/>
  </target>

  <target name="clover.post" depends="clover.init">
    <clover-report initstring="${clover.db.file}">
      <current outfile="${clover.output.dir}/clover.xml">
        <format type="xml"/>
        <testsources dir="${basedir}/unittest/src">
          <include name="**/*.java"/>
          <include name="*.java"/>
        </testsources>
      </current>
    </clover-report>
    <clover-report initstring="${clover.db.file}">
      <current outfile="${clover.output.dir}/html">
        <format type="html"/>
        <testsources dir="${basedir}/unittest/src">
          <include name="**/*.java"/>
          <include name="*.java"/>
        </testsources>
      </current>
    </clover-report>
    <clover-report initstring="${clover.db.file}">
      <current outfile="${clover.output.dir}/clover.pdf" summary="true">
        <format type="pdf"/>
        <testsources dir="${basedir}/unittest/src">
          <include name="**/*.java"/>
          <include name="*.java"/>
        </testsources>
      </current>
    </clover-report>
    <clover-check initstring="${clover.db.file}" target="${clover.coverage}" haltOnFailure="${clover.enforce}">
      <testsources dir="${basedir}/unittest/src">
        <include name="**/*.java"/>
        <include name="*.java"/>
      </testsources>
    </clover-check>
  </target>

  <macrodef name="instrument">
    <attribute name="input.dir"/>
    <attribute name="output.dir"/>
    <sequential>
      <clover-instr initstring="${clover.db.file}" destdir="@{output.dir}" source="1.5">
        <fileset dir="@{input.dir}">
          <include name="**/*.java"/>
        </fileset>
      </clover-instr>
      <copy todir="@{output.dir}">
        <fileset dir="@{input.dir}">
          <exclude name="**/*.java"/>
          <exclude name="*.java"/>
        </fileset>
      </copy>
    </sequential>
  </macrodef>


</project>
