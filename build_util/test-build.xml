<?xml version="1.0"?>

<project name="test-build" basedir="..">

<property file="${hq.home}/build_util/clover.properties"/>

<target name="init-tests">
  <delete dir="${junitResults.dir}"/>
  <mkdir dir="${junitResults.dir}"/>
  <condition property="test.halt" value="false" else="true">
	    <istrue value="${ci.build}"/>
   </condition>
   <echo message="Halt on error or failure: ${test.halt}"/>
</target>

<macrodef name="test.do">
	<attribute name="module.dir"/>
	<attribute name="compile.classpath.id"/>
	<sequential>
	<path id="test.compile.classpath">
		<path refid="@{compile.classpath.id}" />
		<path location="@{module.dir}/target/classes" />
	</path>
  	<compile-sources classpath.id="test.compile.classpath" src.dir="@{module.dir}/src/test/java" resource.dir="@{module.dir}/src/test/resources" output.dir="@{module.dir}/target/test-classes" />
	<path id="test.run.classpath">
	    <path refid="test.compile.classpath" />
	 	<path location="@{module.dir}/target/test-classes" />
	</path>
    <test-run classpath.id="test.run.classpath" input.dir="@{module.dir}/target/test-classes"/>
</sequential>
</macrodef>

  <macrodef name="test-run">
    <attribute name="classpath.id"/>
    <attribute name="input.dir"/>
    <sequential>

    <junit reloading="no" fork="true" forkmode="once" printsummary="yes" haltOnError="${test.halt}" haltOnFailure="${test.halt}">
       
    <jvmarg value="-Dtest.halt=${test.halt}"/>
    <classpath refid="@{classpath.id}"/>

       <formatter type="xml"/>
       <batchtest todir="${junitResults.dir}">
           <fileset dir="@{input.dir}">
				<include name="**/*Test.class"/>
           </fileset>
      </batchtest>
    </junit>
  </sequential>
  </macrodef>

  <path id="clover.classpath">
	 <pathelement location="${thirdparty.lib}/com.springsource.com.cenqua.clover-2.4.2.jar" />
  </path>

  <target name="clover" depends="clover.pre, clover.instrument, clover.do, clover.post" description="Executes all tests resulting from a compilation of the test tree returning test coverage metrics."/>

  <target name="clover.pre">
    <delete dir="${clover.output.dir}" quiet="true"/>
    <mkdir dir="${clover.output.dir}"/>
	<delete dir="${main.clover.classes.dir}" quiet="true"/>
    <mkdir dir="${main.clover.classes.dir}"/>
	<delete dir="${test.clover.classes.dir}" quiet="true"/>
    <mkdir dir="${test.clover.classes.dir}"/>
  </target>

   <target name="clover.do" depends="clover.init, init-tests">
    <path id="clover.run.classpath">
       <pathelement location="${main.clover.classes.dir}"/>
	   <pathelement location="${test.clover.classes.dir}"/>
       <path refid="clover.classpath"/>
       <path refid="testjars"/>
    </path>
    <test-run classpath.id="clover.run.classpath" input.dir="${test.clover.classes.dir}"/>
  </target>

  <macrodef name="instrument-module">
	<attribute name="input.dir"/>
	<attribute name="output.dir"/>
	<attribute name="resource.dir"/>
	<attribute name="staging.dir"/>
	<attribute name="classpath.id"/>
	 <sequential>
		<mkdir dir="@{staging.dir}"/>
	  	<instrument input.dir="@{input.dir}" output.dir="@{staging.dir}"/>
	   	<compile-sources classpath.id="@{classpath.id}" src.dir="@{staging.dir}" resource.dir="@{resource.dir}" output.dir="@{output.dir}"/>
	  </sequential>
  </macrodef>

  <path id="clover.compile.classpath">
        <path refid="clover.classpath"/>
        <path refid="testjars"/>
		<path location="${main.clover.classes.dir}"/>
		<path location="${test.clover.classes.dir}"/>
    </path>

  <macrodef name="instrument-module-with-tests">
	<attribute name="module.dir"/>
	 <sequential>
		<instrument-module input.dir="@{module.dir}/src/main/java" staging.dir="${main.clover.staging.dir}" resource.dir="@{module.dir}/src/main/resources" classpath.id="clover.compile.classpath" output.dir="${main.clover.classes.dir}"/>
		<instrument-module input.dir="@{module.dir}/src/test/java" staging.dir="${test.clover.staging.dir}" resource.dir="@{module.dir}/src/test/resources" classpath.id="clover.compile.classpath" output.dir="${test.clover.classes.dir}"/>
   </sequential>
</macrodef>
  
  <target name="clover.init" depends="init">
    <taskdef resource="cloverlib.xml" classpathref="clover.classpath"/>
  </target>

  <target name="clover.post" depends="clover.init">
    <clover-report initstring="${clover.db.file}">
      <current outfile="${clover.output.dir}/clover.xml">
        <format type="xml"/> 
      </current>
    </clover-report>
    <clover-report initstring="${clover.db.file}">
      <current outfile="${clover.output.dir}/html">
        <format type="html"/>
      </current>
    </clover-report>
    <clover-report initstring="${clover.db.file}">
      <current outfile="${clover.output.dir}/clover.pdf" summary="true">
        <format type="pdf"/>
      </current>
    </clover-report>
    <clover-check initstring="${clover.db.file}" target="${clover.coverage}" haltOnFailure="${clover.enforce}"/>
  </target>

  <macrodef name="instrument">
    <attribute name="input.dir"/>
    <attribute name="output.dir"/>
    <sequential>
	  <echo message="Output dir @{output.dir} Input dir @{input.dir} ${clover.db.file}"/>
      <clover-instr initstring="${clover.db.file}" destdir="@{output.dir}" source="1.5">
        <fileset dir="@{input.dir}">
          <include name="**/*.java"/>
        </fileset>
      </clover-instr>
      <copy todir="@{output.dir}">
        <fileset dir="@{input.dir}">
          <exclude name="**/*.java"/>
          <exclude name="*.java"/>
        </fileset>
      </copy>
    </sequential>
  </macrodef>


</project>
