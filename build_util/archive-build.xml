<?xml version="1.0"?>

<project name="archive-build" basedir="..">

	<!-- Common targets for rolling release archives -->
	<target name="roll-nojre-archives">
		<property name="archive-dir" location="${archive.build.dir}/${archive.basename}-installer" />
		<antcall target="roll-agent-bundle">
			<param name="archive-suffix" value="noJRE" />
			<param name="compress-mode" value="zip" />
		</antcall>
		<antcall target="roll-platform-specific-archive">
			<param name="jre-file" value="" />
			<param name="archive-suffix" value="noJRE" />
			<param name="compress-mode" value="zip" />
		</antcall>
		<antcall target="roll-agent-bundle">
			<param name="archive-suffix" value="noJRE" />
			<param name="compress-mode" value="tgz" />
		</antcall>
		<antcall target="roll-platform-specific-archive">
			<param name="jre-file" value="" />
			<param name="archive-suffix" value="noJRE" />
			<param name="compress-mode" value="tgz" />
		</antcall>
	</target>

	<target name="roll-archives" depends="roll-nojre-archives">
		<property name="archive-dir" location="${archive.build.dir}/${archive.basename}-installer" />
		<!-- Roll platform specific tarballs -->
		<antcall target="roll-platform-specific-archive">
			<param name="jre-file" value="amd64-linux-jre-1_*.tar.gz" />
			<param name="archive-suffix" value="x86_64-linux" />
			<param name="compress-mode" value="tgz" />
		</antcall>
		<antcall target="roll-platform-specific-archive">
			<param name="jre-file" value="" />
			<param name="archive-suffix" value="apple-osx" />
			<param name="compress-mode" value="tgz" />
		</antcall>
		<antcall target="roll-platform-specific-archive">
			<param name="jre-file" value="x86-linux-glibc2-jre-1_*.tar.gz" />
			<param name="archive-suffix" value="x86-linux" />
			<param name="compress-mode" value="tgz" />
		</antcall>
		<antcall target="roll-platform-specific-archive">
			<param name="jre-file" value="sparc-sun-solaris-jre-1_*.tar.gz" />
			<param name="archive-suffix" value="sparc-solaris" />
			<param name="compress-mode" value="tgz" />
		</antcall>
		<antcall target="roll-platform-specific-archive">
			<param name="jre-file" value="x86-win32-jre-1_*.exe" />
			<param name="archive-suffix" value="win32" />
			<param name="compress-mode" value="zip" />
		</antcall>
		<antcall target="roll-pdk-bundle" />
	</target>

	<target name="roll-agent-bundle">
		<copy todir="${build.dir}/${archive.basename}-agent-${version}">
			<fileset dir="${agent.dir}" />
		</copy>
		<property name="connectors.dir" location="${build.dir}/${archive.basename}-agent-${version}/product_connectors" />

		<!-- Copy SNMP and RT packages -->
		<copy toDir="${connectors.dir}">
			<fileset dir="${hq.bin}/product_connectors">
				<include name="**" />
			</fileset>
		</copy>

		<antcall target="compress-dir">
			<param name="archive-dir" value="${build.dir}/${archive.basename}-agent-${version}" />
			<param name="archive-file" value="${build.dir}/${archive.basename}-agent-${version}-${build}-${archive-suffix}.${compress-mode}" />
			<param name="compress-mode" value="${compress-mode}" />
		</antcall>

		<delete dir="${build.dir}/${archive.basename}-agent-${version}" />
	</target>

	<target name="roll-platform-specific-archive" depends="init-taskdefs">
		<if>
			<equals arg1="${jre-file}" arg2="" />
			<then>
				<delete dir="${archive-dir}/installer-${version}/jres" />
			</then>
			<else>
				<delete>
					<fileset dir="${archive-dir}/installer-${version}" includes="jres/**" />
				</delete>
				<copy todir="${archive-dir}/installer-${version}/jres">
					<fileset dir="${jre.dir}">
						<include name="${jre-file}" />
					</fileset>
				</copy>
			</else>
		</if>

		<!-- Is there a postgresql bundle available for this platform? -->
		<available property="pgsql.available" file="${pgsql.dir}/${archive-suffix}" />
		<delete dir="${archive-dir}/installer-${version}/data/hqdb" />
		<antcall target="bundle-pgsql" />

		<!-- include the license-info file -->
		<copy file="${hq.home}/LICENSES.txt" toFile="${archive-dir}/LICENSES.txt" />

		<!-- Packup the whole thing -->
		<antcall target="compress-dir">
			<param name="archive-dir" value="${archive-dir}" />
			<param name="archive-file" value="${build.dir}/${archive.basename}-installer-${version}-${build}-${archive-suffix}.${compress-mode}" />
			<param name="compress-mode" value="${compress-mode}" />
		</antcall>
	</target>

	<target name="roll-pdk-bundle">
		<antcall target="compress-dir">
			<param name="archive-dir" value="${agent.dir}/bundles/${agent.bundle.dir}/pdk" />
			<param name="archive-file" value="${build.dir}/hyperic-pdk-${version}-${build}.zip" />
			<param name="compress-mode" value="zip" />
		</antcall>
	</target>

	<target name="roll-upgrade-agent-bundle" description="Rolls the bundle required for the agent auto upgrade">
		<delete dir="${build.dir}/agent-upgrade" />
		<mkdir dir="${build.dir}/agent-upgrade" />

		<antcall target="compress-dir">
			<param name="archive-dir" value="${agent.dir}/bundles/${agent.bundle.dir}" />
			<param name="archive-file" value="${build.dir}/agent-upgrade/${agent.bundle.dir}.tgz" />
			<param name="compress-mode" value="tgz" />
		</antcall>
	</target>

	<target name="bundle-pgsql" if="pgsql.available">
		<mkdir dir="${archive-dir}/installer-${version}/data/hqdb" />
		<copy todir="${archive-dir}/installer-${version}/data/hqdb">
			<fileset dir="${pgsql.dir}/${archive-suffix}">
				<include name="*.sh" />
				<include name="*.bat" />
				<include name="pgsql.tar.gz" />
				<include name="pgsql.zip" />
			</fileset>
		</copy>
		<mkdir dir="${archive-dir}/installer-${version}/data/hqdb/conf" />
		<copy todir="${archive-dir}/installer-${version}/data/hqdb/conf">
			<fileset dir="${pgsql.dir}/${archive-suffix}/conf" includes="**" />
		</copy>
	</target>

	<target name="prepare-ssl" unless="available.keystore">
		<!-- Server key for ssl -->
		<echo message="Generating a SSL key for https" />
		<genkey alias="HQ" keystore="${tomcat.home}/hq-server/conf/hyperic.keystore" keyalg="rsa" storepass="hyperic" dname="CN=Hyperic HQ, OU=HQ, O=hyperic.net, C=US" />
	</target>

	<!-- ==================== PDK packaging ==================== -->
	<target name="pdk-javadoc">
		<property name="pdk.javadoc" location="${pdk.dir}/javadoc" />
		<property name="pdk.version" value="${version}" />
		<property name="pdk.title" value="Hyperic HQ Plugin API" />
		<mkdir dir="${pdk.javadoc}" />
		<javadoc destdir="${pdk.javadoc}" private="false" version="true" author="false" maxmemory="256M" windowtitle="${pdk.title}">
			<sourcepath>
				<pathelement location="${hq.pdk.shared}/src/main/java" />
				<pathelement location="${hq.pdk.agent}/src/main/java" />
			</sourcepath>
			<fileset dir="${hq.pdk.shared}/src/main/java">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${hq.pdk.agent}/src/main/java">
				<include name="**/*.java" />
			</fileset>
			<classpath>
				<path refid="shared.compile.classpath" />
			</classpath>
			<doctitle>${pdk.title}</doctitle>
			<header>
				<![CDATA[<font size="2">${pdk.title} v. ${pdk.version}</font>]]>
	      </header>
		<bottom>
			<![CDATA[Copyright &#169; 2004-2006 Hyperic, Inc. <a href="mailto:support@hyperic.net">support@hyperic.net</a>, All Rights Reserved.]]>
	      </bottom>
</javadoc>
</target>

<target name="archive-prep" depends="build-agent,build-war,pdk-javadoc,unpack-tomcat,pack-installer,pack-installer-archive" />

<target name="archive-full" depends="pre-build,check-release,archive-prep">
<antcall target="roll-archives" />
<antcall target="post-build" />
</target>

<target name="post-build">

    <property name="release.dir" value="/raid/release/candidates/hq"/>

    <property name="versionfile" value="${version.properties}"/>

    <!-- Increment build # -->
    <propertyfile file="${versionfile}">
      <entry key="build" type="int" default="0" operation="+" pattern="0000"/>
    </propertyfile>

    <property name="release.comment" value="Release Build"/>
    <property name="hq.isDev" value="false"/>
    <property file="${versionfile}" />
    
    <checksum forceOverwrite="yes" fileext=".md5">
        <fileset dir="${hq.home}/build" includes="hyperic-*.tgz"/>
        <fileset dir="${hq.home}/build" includes="hyperic-*.zip"/>
    </checksum>

    <git command="add version.properties" dir="${hq.home}"/>
    <git command="commit -m 'Release ${version} build #${build}'" dir="${hq.home}"/>
    <git command="push git@git.springsource.org:hq/hq.git" dir="${hq.home}"/>

    <!-- Copy to release dir -->
    <copy todir="${release.dir}">
      <fileset dir="${hq.home}/build" includes="hyperic-*.tgz"/>
      <fileset dir="${hq.home}/build" includes="hyperic-*.zip"/>
      <fileset dir="${hq.home}/build" includes="*.md5"/>
    </copy>


    <!-- Send email -->
    <mail subject="HQ Daily Build: ${version} build #${build}"
          mailhost="localhost"
          mailport="25">
      <from address="${mail.from}"/>
      <to address="${mail.to}"/>
      <message>
        The autobuild has completed successfully.

        This build is available for download from:
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-sparc-solaris.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-x86-linux.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-win32.zip
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-x86_64-linux.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-apple-osx.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-noJRE.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-noJRE.zip

        Agent bundles are available for download from:
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-hpux-11.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-sparc-solaris.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-x86-linux.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-win32.zip
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-x86_64-linux.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-apple-osx.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-ppc-aix.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-noJRE.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-noJRE.zip

        Source bundles are available for download from:

          ${release.dir}/hyperic-hq-src-${version}-${build}.zip
          ${release.dir}/hyperic-hq-src-${version}-${build}.tgz

      </message>
    </mail>
</target>

<target name="pre-build">
    <available type="dir" file="jre.dir" property="jre.available" />
    <available type="dir" file="pgsql.dir" property="pgsql.available" />
    <antcall target="checkout-pgsql"/>
    <antcall target="checkout-jre"/>
    <antcall target="update-pgsql"/>
    <antcall target="update-jre"/>
</target>

<target name="checkout-pgsql" unless="${pgsql.available}">
    <exec executable="svn">
      <arg line="co http://svn.hyperic.org/projects/pgsql/tags/PGSQL_8_2_5 ${pgsql.dir}"/>
    </exec>
</target>

<target name="checkout-jre" unless="${jre.available}">
    <exec executable="svn">
      <arg line="co http://svn.hyperic.org/projects/jres/tags/JRES_1_6_0_13_mixed ${jre.dir}"/>
    </exec>
</target>

<target name="update-pgsql" if="${pgsql.available}">
    <exec executable="svn">
      <arg line="up ${pgsql.dir}"/>
    </exec>
</target>

<target name="update-jre" if="${jre.available}">
    <exec executable="svn">
      <arg line="up ${jre.dir}"/>
    </exec>
</target>

<macrodef name="git">
    <attribute name="command"/>
    <attribute name="dir" default=""/>
    <element name="args" optional="true"/>
    <sequential>
        <echo message="git @{command}"/>
        <exec executable="git" dir="@{dir}">
            <arg line="@{command}"/>
            <args/>
        </exec>
    </sequential>
</macrodef>

</project>
