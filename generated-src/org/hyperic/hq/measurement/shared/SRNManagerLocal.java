/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.measurement.shared;

/**
 * Local interface for SRNManager.
 */
public interface SRNManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Initialize the SRN Cache, or just return if it's already been initialized.
    */
   public void initializeCache(  ) ;

   /**
    * Get a SRN
    * @param aid The entity id to lookup
    * @return The SRN for the given entity    */
   public org.hyperic.hq.measurement.server.session.ScheduleRevNum get( org.hyperic.hq.appdef.shared.AppdefEntityID aid ) ;

   /**
    * Remove a SRN.
    * @param aid The AppdefEntityID to remove.    */
   public void removeSrn( org.hyperic.hq.appdef.shared.AppdefEntityID aid ) ;

   /**
    * Increment SRN for the given entity.
    * @param aid The AppdefEntityID to remove.
    * @param newMin The new minimum interval
    * @return The ScheduleRevNum for the given entity id    */
   public int incrementSrn( org.hyperic.hq.appdef.shared.AppdefEntityID aid,long newMin ) ;

   /**
    * Handle a SRN report from an agent.
    * @param srns The list of SRNs from the agent report.
    * @return A Collection of ScheduleRevNum objects that do not have a corresponding appdef entity. (i.e. Out of sync)    */
   public java.util.Collection reportAgentSRNs( org.hyperic.hq.measurement.server.session.SRN[] srns ) ;

   /**
    * Get a List of out-of-sync entities.
    * @return A list of ScheduleReNum objects that are out of sync.    */
   public java.util.List getOutOfSyncEntities(  ) ;

   /**
    * Get the list of out-of-sync SRNs based on the number of intervals back to allow.
    * @param intervals The number of intervals to go back
    * @return A List of ScheduleRevNum objects.    */
   public java.util.List getOutOfSyncSRNs( int intervals ) ;

   /**
    * Refresh the SRN for the given entity.
    * @param eid The appdef entity to refresh
    * @return The new ScheduleRevNum object.    */
   public org.hyperic.hq.measurement.server.session.ScheduleRevNum refreshSRN( org.hyperic.hq.appdef.shared.AppdefEntityID eid ) ;

   /**
    * Reschedule metrics for an appdef entity. Generally should only be called from the {@link AgentScheduleSynchronizer}
    * @param List of {@link AppdefEntityId}
    */
   public void reschedule( java.util.List aeids ) throws org.hyperic.hq.measurement.MeasurementScheduleException, org.hyperic.hq.measurement.monitor.MonitorAgentException, org.hyperic.hq.measurement.MeasurementUnscheduleException;

}
