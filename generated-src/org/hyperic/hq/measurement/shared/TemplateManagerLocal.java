/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.measurement.shared;

/**
 * Local interface for TemplateManager.
 */
public interface TemplateManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Get a MeasurementTemplate
    */
   public org.hyperic.hq.measurement.server.session.MeasurementTemplate getTemplate( java.lang.Integer id ) ;

   /**
    * Look up measurement templates for an array of template IDs
    */
   public java.util.List getTemplates( java.util.List ids ) ;

   /**
    * Look up a measurement templates for an array of template IDs
    * @throws FinderException if no measurement templates are found.
    * @return a MeasurementTemplate value
    */
   public java.util.List getTemplates( java.lang.Integer[] ids,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.measurement.TemplateNotFoundException;

   /**
    * Get all the templates. Must be superuser to execute.
    * @param pInfo must contain a sort field of type {@link MeasurementTemplateSortField}
    * @param defaultOn If non-null, return templates with defaultOn == defaultOn
    * @return a list of {@link MeasurementTemplate}s
    */
   public java.util.List findTemplates( org.hyperic.hq.authz.server.session.AuthzSubject user,org.hyperic.hibernate.PageInfo pInfo,java.lang.Boolean defaultOn ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get all templates for a given MonitorableType
    * @param pInfo must contain a sort field of type {@link MeasurementTemplateSortField}
    * @param defaultOn If non-null, return templates with defaultOn == defaultOn
    * @return a list of {@link MeasurementTemplate}s
    */
   public java.util.List findTemplatesByMonitorableType( org.hyperic.hq.authz.server.session.AuthzSubject user,org.hyperic.hibernate.PageInfo pInfo,java.lang.String type,java.lang.Boolean defaultOn ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Look up a measurement templates for a monitorable type and category.
    * @return a MeasurementTemplate value
    */
   public java.util.List findTemplates( java.lang.String type,java.lang.String cat,java.lang.Integer[] excludeIds,org.hyperic.util.pager.PageControl pc ) ;

   /**
    * Look up a measurement templates for a monitorable type and filtered by categories and keyword.
    * @return a MeasurementTemplate value
    */
   public java.util.List findTemplates( java.lang.String type,long filters,java.lang.String keyword ) ;

   /**
    * Look up a measurement template IDs for a monitorable type.
    * @return an array of ID values
    */
   public java.lang.Integer[] findTemplateIds( java.lang.String type ) ;

   /**
    * Update the default interval for a list of meas. templates
    * @subject - the subject
    * @param templIds - a list of integer template ids
    * @param interval - the interval of collection to set to
    */
   public void updateTemplateDefaultInterval( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer[] templIds,long interval ) ;

   /**
    * Make metrics disabled by default for a list of meas. templates
    * @param templIds - a list of integer template ids
    */
   public void setTemplateEnabledByDefault( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer[] templIds,boolean on ) ;

   /**
    * Get the MonitorableType id, creating it if it does not exist.
    */
   public org.hyperic.hq.measurement.server.session.MonitorableType getMonitorableType( java.lang.String pluginName,org.hyperic.hq.product.TypeInfo info ) ;

   /**
    * Update measurement templates for a given entity. This still needs some refactoring.
    * @return A map of measurement info's that are new and will need to be created.
    */
   public java.util.Map updateTemplates( java.lang.String pluginName,org.hyperic.hq.product.TypeInfo ownerEntity,org.hyperic.hq.measurement.server.session.MonitorableType monitorableType,org.hyperic.hq.product.MeasurementInfo[] tmpls ) throws javax.ejb.CreateException, javax.ejb.RemoveException;

   /**
    * Add new measurement templates for a plugin. This does a batch style insert, and expects a map of maps indexed by the monitorable type id.
    */
   public void createTemplates( java.lang.String pluginName,java.util.Map toAdd ) throws javax.ejb.CreateException;

   public void setDesignated( org.hyperic.hq.measurement.server.session.MeasurementTemplate tmpl,boolean designated ) ;

   /**
    * Set the measurement templates to be "designated" for a monitorable type.
    */
   public void setDesignatedTemplates( java.lang.String mType,java.lang.Integer[] desigIds ) ;

}
