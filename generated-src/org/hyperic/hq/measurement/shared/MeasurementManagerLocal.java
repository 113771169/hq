/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.measurement.shared;

/**
 * Local interface for MeasurementManager.
 */
public interface MeasurementManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Create Measurement objects based their templates
    * @param templates List of Integer template IDs to add
    * @param id instance ID (appdef resource) the templates are for
    * @param intervals Millisecond interval that the measurement is polled
    * @param props Configuration data for the instance
    * @return a List of the associated Measurement objects
    */
   public java.util.List createMeasurements( org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.Integer[] templates,long[] intervals,org.hyperic.util.config.ConfigResponse props ) throws org.hyperic.hq.measurement.MeasurementCreateException, org.hyperic.hq.measurement.TemplateNotFoundException;

   /**
    * Create Measurements and enqueue for scheduling after commit
    */
   public java.util.List createMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.Integer[] templates,long[] intervals,org.hyperic.util.config.ConfigResponse props ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.MeasurementCreateException, org.hyperic.hq.measurement.TemplateNotFoundException;

   /**
    * Create Measurement objects based their templates and default intervals
    * @param templates List of Integer template IDs to add
    * @param id instance ID (appdef resource) the templates are for
    * @param props Configuration data for the instance
    * @return a List of the associated Measurement objects
    */
   public java.util.List createMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.Integer[] templates,org.hyperic.util.config.ConfigResponse props ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.MeasurementCreateException, org.hyperic.hq.measurement.TemplateNotFoundException;

   public org.hyperic.hq.measurement.server.session.Measurement findMeasurementById( java.lang.Integer mid ) ;

   /**
    * Remove all measurements no longer associated with a resource.
    * @return The number of Measurement objects removed.    */
   public int removeOrphanedMeasurements(  ) ;

   /**
    * Look up a Measurement for a Resource and Measurement alias
    * @return a The Measurement for the Resource of the given alias.
    */
   public org.hyperic.hq.measurement.server.session.Measurement getMeasurement( org.hyperic.hq.authz.server.session.AuthzSubject s,org.hyperic.hq.authz.server.session.Resource r,java.lang.String alias ) throws org.hyperic.hq.measurement.MeasurementNotFoundException;

   /**
    * Get a Measurement by Id.
    */
   public org.hyperic.hq.measurement.server.session.Measurement getMeasurement( java.lang.Integer mid ) ;

   /**
    * Get the live measurement values for a given resource.
    * @param id The id of the resource
    */
   public void getLiveMeasurementValues( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.monitor.LiveMeasurementException, org.hyperic.hq.measurement.MeasurementNotFoundException;

   /**
    * Count of metrics enabled for a particular entity
    * @return a The number of metrics enabled for the given entity
    */
   public int getEnabledMetricsCount( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) ;

   public java.util.Map findMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.util.Map resIdsToTemplIds ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Find the Measurement corresponding to the given MeasurementTemplate id and instance id.
    * @param tid The MeasurementTemplate id
    * @param aeid The entity id.
    * @return a Measurement value
    */
   public org.hyperic.hq.measurement.server.session.Measurement findMeasurement( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer tid,org.hyperic.hq.appdef.shared.AppdefEntityID aeid ) throws org.hyperic.hq.measurement.MeasurementNotFoundException;

   /**
    * Look up a Measurement, allowing for the query to return a stale copy of the Measurement (for efficiency reasons).
    * @param subject The subject.
    * @param tid The template Id.
    * @param iid The instance Id.
    * @param allowStale <code>true</code> to allow stale copies of an alert definition in the query results; <code>false</code> to never allow stale copies, potentially always forcing a sync with the database.
    * @return The Measurement
    */
   public org.hyperic.hq.measurement.server.session.Measurement findMeasurement( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer tid,java.lang.Integer iid,boolean allowStale ) throws org.hyperic.hq.measurement.MeasurementNotFoundException;

   /**
    * Look up a list of Measurements for a template and instances
    * @return a list of Measurement's
    */
   public java.util.List findMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer tid,org.hyperic.hq.appdef.shared.AppdefEntityID[] aeids ) ;

   /**
    * Look up a list of Measurements for a template and instances
    * @return An array of Measurement ids.
    */
   public java.lang.Integer[] findMeasurementIds( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer tid,java.lang.Integer[] ids ) ;

   /**
    * Look up a list of Measurements for a category XXX: Why is this method called findMeasurements() but only returns enabled measurements if cat == null??
    * @return a List of Measurement objects.
    */
   public java.util.List findMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String cat,org.hyperic.util.pager.PageControl pc ) ;

   /**
    * Look up a list of enabled Measurements for a category
    * @return a list of {@link Measurement}
    */
   public java.util.List findEnabledMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String cat ) ;

   /**
    * Look up a List of designated Measurements for an entity
    * @return A List of Measurements
    */
   public java.util.List findDesignatedMeasurements( org.hyperic.hq.appdef.shared.AppdefEntityID id ) ;

   /**
    * Look up a list of designated Measurements for an entity for a category
    * @return A List of Measurements
    */
   public java.util.List findDesignatedMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String cat ) ;

   /**
    * Look up a list of designated Measurements for an group for a category
    * @return A List of Measurements
    */
   public java.util.List findDesignatedMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.ResourceGroup g,java.lang.String cat ) ;

   /**
    * Get an Availabilty Measurement by AppdefEntityId
    * @deprecated Use getAvailabilityMeasurement(Resource) instead.
    */
   public org.hyperic.hq.measurement.server.session.Measurement getAvailabilityMeasurement( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) ;

   /**
    * Get an Availability Measurement by Resource. May return null.
    */
   public org.hyperic.hq.measurement.server.session.Measurement getAvailabilityMeasurement( org.hyperic.hq.authz.server.session.Resource r ) ;

   /**
    * Look up a list of Measurement objects by category
    */
   public java.util.List findMeasurementsByCategory( java.lang.String cat ) ;

   /**
    * Look up a Map of Measurements for a Category XXX: This method needs to be re-thought. It only returns a single designated metric per category even though HQ supports multiple designates per category.
    * @return A List of designated Measurements keyed by AppdefEntityID
    */
   public java.util.Map findDesignatedMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID[] ids,java.lang.String cat ) throws org.hyperic.hq.measurement.MeasurementNotFoundException;

   /**
    * TODO: scottmf, need to do some more work to handle other authz resource types other than platform, server, service, and group
    * @return {@link Map} of {@link Integer} to {@link List} of {@link Measurement}s, Integer => Resource.getId(),
    */
   public java.util.Map getAvailMeasurements( java.util.Collection resources ) ;

   /**
    * Look up a list of Measurement intervals for template IDs.
    * @return a map keyed by template ID and values of metric intervals There is no entry if a metric is disabled or does not exist for the given entity or entities. However, if there are multiple entities, and the intervals differ or some enabled/not enabled, then the value will be "0" to denote varying intervals.
    */
   public java.util.Map findMetricIntervals( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID[] aeids,java.lang.Integer[] tids ) ;

   public java.util.List findAllEnabledMeasurementsAndTemplates(  ) ;

   /**
    * Set the interval of Measurements based their template ID's Enable Measurements and enqueue for scheduling after commit
    */
   public void enableMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID[] aeids,java.lang.Integer[] mtids,long interval ) throws org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.measurement.MeasurementCreateException, org.hyperic.hq.measurement.TemplateNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Enable a collection of metrics, enqueue for scheduling after commit
    */
   public void enableMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer[] mids ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Enable the Measurement and enqueue for scheduling after commit
    */
   public void enableMeasurement( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer mId,long interval ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Enable the default on metrics for a given resource, enqueue for scheduling after commit
    */
   public void enableDefaultMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.authz.server.session.Resource r ) throws org.hyperic.hq.authz.shared.PermissionException;

   public void disableMeasurement( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer mId ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.MeasurementUnscheduleException;

   /**
    * Synchronously disables measurements according to the mids array. Removes measurements from the cache as well. XXX scottmf, may be a good idea to add a flag that specifies if the measurements should be removed in the background / foreground and removed from cache. XXX scottmf, probably a bad idea to throw a MeasurementUnscheduleException if a failure occurs considering this is done in batch without any error status on what succeeded and what did not.
    * @param subject {@link AuthzSubject} checks if subject has modify permission on the {@link AppdefEntityID} associated with the mid
    * @param mids {@link Integer} array of mids representing a MeasurementId
    */
   public void disableMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer[] mids ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.MeasurementUnscheduleException;

   public void updateMeasurementInterval( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer mId,long interval ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Disable all measurements for the given resources.
    * @param agentId The entity id to use to look up the agent connection
    * @param ids The list of entitys to unschedule
    */
   public void disableMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID agentId,org.hyperic.hq.appdef.shared.AppdefEntityID[] ids ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Disable all Measurements for a resource
    */
   public void disableMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Disable all Measurements for a resource
    */
   public void disableMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.Resource res ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * XXX: not sure why all the findMeasurements require an authz if they do not check the viewPermissions??
    */
   public java.util.List findMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.Resource res ) ;

   /**
    * Disable measurements for an instance Enqueues reschedule events after commit
    */
   public void disableMeasurements( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.Integer[] tids ) throws org.hyperic.hq.authz.shared.PermissionException;

   public void syncPluginMetrics( java.lang.String plugin ) ;

   /**
    * Gets a summary of the metrics which are scheduled for collection, across all resource types and metrics.
    * @return a list of {@link CollectionSummary} beans
    */
   public java.util.List findMetricCountSummaries(  ) ;

   /**
    * Find a list of tuples (of size 4) consisting of the {@link Agent} the {@link Platform} it manages the {@link Server} representing the Agent the {@link Measurement} that contains the Server Offset value
    */
   public java.util.List findAgentOffsetTuples(  ) ;

   /**
    * Get the # of metrics that each agent is collecting.
    * @return a map of {@link Agent} onto Longs indicating how many metrics that agent is collecting.
    */
   public java.util.Map findNumMetricsPerAgent(  ) ;

   /**
    * Handle events from the {@link MeasurementEnabler}. This method is required to place the operation within a transaction (and session)
    */
   public void handleCreateRefreshEvents( java.util.List events ) ;

   /**
    * Check a configuration to see if it returns DSNs which the agent can use to successfully monitor an entity. This routine will attempt to get live DSN values from the entity.
    * @param entity Entity to check the configuration for
    * @param config Configuration to check
    */
   public void checkConfiguration( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID entity,org.hyperic.util.config.ConfigResponse config ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.InvalidConfigException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException;

   public java.util.List getMeasurements( java.lang.Integer[] tids,java.lang.Integer[] aeids ) ;

   /**
    * Resource to be deleted, dissociate metrics from resource
    */
   public void handleResourceDelete( org.hyperic.hq.authz.server.session.Resource r ) ;

   /**
    * Initializes the units and resource properties of a measurement event
    */
   public void buildMeasurementEvent( org.hyperic.hq.measurement.ext.MeasurementEvent event ) ;

}
