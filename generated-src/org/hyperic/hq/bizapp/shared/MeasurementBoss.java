/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.bizapp.shared;

import java.util.List;
import java.util.Map;

import org.hyperic.hq.appdef.shared.AppdefCompatException;
import org.hyperic.hq.appdef.shared.AppdefEntityID;
import org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException;
import org.hyperic.hq.appdef.shared.AppdefEntityTypeID;
import org.hyperic.hq.appdef.shared.InvalidAppdefTypeException;
import org.hyperic.hq.auth.shared.SessionNotFoundException;
import org.hyperic.hq.auth.shared.SessionTimeoutException;
import org.hyperic.hq.authz.server.session.AuthzSubject;
import org.hyperic.hq.authz.shared.PermissionException;

/**
 * Remote interface for MeasurementBoss.
 */
public interface MeasurementBoss
   extends javax.ejb.EJBObject
{
   /**
    * Get Autogroup member ids
    */
   public org.hyperic.hq.appdef.shared.AppdefEntityID[] getAutoGroupMemberIDs( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID[] aids,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Update the default interval for a list of template ids
    */
   public void updateMetricDefaultInterval( int sessionId,java.lang.Integer[] tids,long interval )
      throws org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Update the templates to be indicators or not
    */
   public void updateIndicatorMetrics( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityTypeID aetid,java.lang.Integer[] tids )
      throws org.hyperic.hq.measurement.TemplateNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public java.util.List findMeasurementTemplates( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityTypeID typeId,java.lang.String category,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public java.util.List findMeasurementTemplates( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Retrieve list of measurement templates applicable to a monitorable type
    * @param mtype the monitorableType
    * @return a List of MeasurementTemplateValue objects
    */
   public java.util.List findMeasurementTemplates( int sessionId,java.lang.String mtype,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Retrieve list of measurement templates given specific IDs
    */
   public java.util.List findMeasurementTemplates( java.lang.String user,java.lang.Integer[] ids,org.hyperic.util.pager.PageControl pc )
      throws javax.security.auth.login.LoginException, org.hyperic.hq.common.ApplicationException, org.hyperic.util.ConfigPropertyException, java.rmi.RemoteException;

   /**
    * Retrieve list of measurement templates given specific IDs
    * @return a List of MeasurementTemplateValue objects
    */
   public java.util.List findMeasurementTemplates( int sessionId,java.lang.Integer[] ids,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.measurement.TemplateNotFoundException, java.rmi.RemoteException;

   /**
    * Retrieve a measurement template given specific ID
    */
   public org.hyperic.hq.measurement.server.session.MeasurementTemplate getMeasurementTemplate( int sessionId,java.lang.Integer id )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.measurement.TemplateNotFoundException, java.rmi.RemoteException;

   /**
    * Get the the availability metric template for the given autogroup
    * @return The availabililty metric template.
    */
   public org.hyperic.hq.measurement.server.session.MeasurementTemplate getAvailabilityMetricTemplate( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aid,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the the availability metric template for the given resource
    * @return template of availabililty metric
    */
   public org.hyperic.hq.measurement.server.session.MeasurementTemplate getAvailabilityMetricTemplate( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid )
      throws org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the the designated measurement template for the given resource and corresponding category.
    * @return Array of Measurement IDs
    */
   public java.util.List getDesignatedTemplates( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.util.Set cats )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the the designated measurement template for the autogroup given a type and corresponding category.
    * @param ctype the AppdefEntityTypeID of the AG members
    * @return Array of Measuremnt ids
    */
   public java.util.List getAGDesignatedTemplates( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] aids,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype,java.util.Set cats )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Update the measurements - set the interval
    * @param id the resource ID
    * @param tids the array of template ID's
    * @param interval the new interval value
    */
   public void updateMeasurements( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.Integer[] tids,long interval )
      throws org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.measurement.TemplateNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.measurement.MeasurementCreateException, org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.util.config.EncodingException, java.rmi.RemoteException;

   /**
    * Update measurements for the members of an autogroup
    * @param parentid - the parent resource of the autogroup
    * @param ctype - the type of child resource
    * @param tids - template ids to update
    * @param interval - the interval to set
    */
   public void updateAGMeasurements( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID parentid,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype,java.lang.Integer[] tids,long interval )
      throws org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.measurement.TemplateNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.measurement.MeasurementCreateException, org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.util.config.EncodingException, java.rmi.RemoteException;

   /**
    * Disable all measurements for an instance
    * @param id the resource's ID
    */
   public void disableMeasurements( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Disable all measurements for a resource
    * @param id the resource's ID
    * @param tids the array of measurement ID's
    */
   public void disableMeasurements( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.Integer[] tids )
      throws org.hyperic.hq.auth.shared.SessionException, javax.ejb.RemoveException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Disable all measurements for a resource
    * @param tids the array of measurement ID's
    */
   public void disableAGMeasurements( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID parentId,org.hyperic.hq.appdef.shared.AppdefEntityTypeID childType,java.lang.Integer[] tids )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, javax.ejb.RemoveException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Find a measurement using measurement id
    * @param id measurement id
    */
   public org.hyperic.hq.measurement.server.session.Measurement getMeasurement( int sessionID,java.lang.Integer id )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.measurement.MeasurementNotFoundException, java.rmi.RemoteException;

   /**
    * Get the last metric values for the given template IDs.
    * @param tids The template IDs to get
    */
   public org.hyperic.hq.product.MetricValue[] getLastMetricValue( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid,java.lang.Integer[] tids )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the last metric data for the array of measurement ids.
    * @param measurements The List of Measurements to get metrics for
    * @param interval The allowable time in ms to go back looking for data.
    */
   public org.hyperic.hq.product.MetricValue[] getLastMetricValue( int sessionId,java.util.List measurements,long interval )
      throws java.rmi.RemoteException;

   /**
    * Get the last indicator metric values
    */
   public java.util.Map getLastIndicatorValues( java.lang.Integer sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid )
      throws java.rmi.RemoteException;

   /**
    * Retrieve a Measurement for a specific instance
    */
   public org.hyperic.hq.measurement.server.session.Measurement findMeasurement( int sessionId,java.lang.Integer tid,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Retrieve List of measurements for a specific instance
    * @return List of Measurement objects
    */
   public java.util.List findMeasurements( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Retrieve list of measurements for a specific template and entities
    * @param tid the template ID
    * @param entIds the array of entity IDs
    * @return a List of Measurement objects
    */
   public java.util.List findMeasurements( int sessionId,java.lang.Integer tid,org.hyperic.hq.appdef.shared.AppdefEntityID[] entIds )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the enabled measurements for an auto group
    * @param parentId - the parent resource appdefEntityID
    * @param childType - the type of child in the autogroup
    * @return a PageList of Measurement objects
    */
   public java.util.List findEnabledAGMeasurements( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID parentId,org.hyperic.hq.appdef.shared.AppdefEntityTypeID childType,java.lang.String cat,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Retrieve list of measurements for a specific instance and category
    * @return a PageList of Measurement objects
    */
   public org.hyperic.util.pager.PageList findEnabledMeasurements( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String cat,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Dumps data for a specific measurement
    * @return a PageList of MetricValue objects
    */
   public org.hyperic.util.pager.PageList findMeasurementData( int sessionId,org.hyperic.hq.measurement.server.session.Measurement m,long begin,long end,org.hyperic.util.pager.PageControl pc )
      throws java.rmi.RemoteException;

   /**
    * Dumps data for a specific measurement template for an instance based on an interval
    * @param tid the template ID
    * @param aid the AppdefEntityID
    * @param begin the beginning of the time range
    * @param end the end of the time range
    * @param interval the time interval at which the data should be calculated
    * @param returnNulls whether or not nulls should be inserted for no data
    * @return a PageList of MetricValue objects
    */
   public org.hyperic.util.pager.PageList findMeasurementData( int sessionId,java.lang.Integer tid,org.hyperic.hq.appdef.shared.AppdefEntityID aid,long begin,long end,long interval,boolean returnNulls,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.MeasurementNotFoundException, java.rmi.RemoteException;

   /**
    * Dumps data for a specific measurement template for an auto-group based on an interval.
    * @param tid the measurement template id
    * @param aid the entity id
    * @param ctype the auto-group child type
    * @param begin start of interval
    * @param end end of interval
    * @param interval the interval
    * @param returnNulls whether or not to return nulls
    * @return a PageList of MetricValue objects
    */
   public org.hyperic.util.pager.PageList findMeasurementData( int sessionId,java.lang.Integer tid,org.hyperic.hq.appdef.shared.AppdefEntityID aid,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype,long begin,long end,long interval,boolean returnNulls,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.MeasurementNotFoundException, java.rmi.RemoteException;

   /**
    * Dumps data for a specific measurement template for an auto-group based on an interval.
    * @param tid the measurement template id
    * @param begin start of interval
    * @param end end of interval
    * @param interval the interval
    * @param returnNulls whether or not to return nulls associated with the platform
    * @return a PageList of MetricValue objects
    */
   public org.hyperic.util.pager.PageList findMeasurementData( int sessionId,java.lang.Integer tid,java.util.List entIds,long begin,long end,long interval,boolean returnNulls,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Dumps data for a specific measurement template for an instance based on an interval
    * @param aid the AppdefEntityID
    * @param begin the beginning of the time range
    * @param end the end of the time range
    * @param interval the time interval at which the data should be calculated
    * @param returnNulls whether or not nulls should be inserted for no data
    * @return a PageList of MetricValue objects
    */
   public org.hyperic.util.pager.PageList findMeasurementData( java.lang.String user,org.hyperic.hq.appdef.shared.AppdefEntityID aid,org.hyperic.hq.measurement.server.session.MeasurementTemplate tmpl,long begin,long end,long interval,boolean returnNulls,org.hyperic.util.pager.PageControl pc )
      throws javax.security.auth.login.LoginException, org.hyperic.hq.common.ApplicationException, org.hyperic.util.ConfigPropertyException, java.rmi.RemoteException;

   /**
    * Dumps data for a specific measurement template for an instance based on an interval
    * @param aid the AppdefEntityID
    * @param tmpl the complete MeasurementTemplate value object
    * @param begin the beginning of the time range
    * @param end the end of the time range
    * @param interval the time interval at which the data should be calculated
    * @param returnNulls whether or not nulls should be inserted for no data
    * @return a PageList of MetricValue objects
    */
   public org.hyperic.util.pager.PageList findMeasurementData( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aid,org.hyperic.hq.measurement.server.session.MeasurementTemplate tmpl,long begin,long end,long interval,boolean returnNulls,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.MeasurementNotFoundException, java.rmi.RemoteException;

   /**
    * Dumps data for a specific measurement template for an auto-group based on an interval.
    * @param ctype the auto-group child type
    * @param begin start of interval
    * @param end end of interval
    * @param interval the interval
    * @param returnNulls whether or not to return nulls
    * @return a PageList of MetricValue objects
    * @throws ConfigPropertyException
    * @throws ApplicationException
    * @throws LoginException
    */
   public org.hyperic.util.pager.PageList findAGMeasurementData( java.lang.String user,org.hyperic.hq.appdef.shared.AppdefEntityID[] aids,org.hyperic.hq.measurement.server.session.MeasurementTemplate tmpl,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype,long begin,long end,long interval,boolean returnNulls,org.hyperic.util.pager.PageControl pc )
      throws javax.security.auth.login.LoginException, org.hyperic.hq.common.ApplicationException, org.hyperic.util.ConfigPropertyException, java.rmi.RemoteException;

   /**
    * Dumps data for a specific measurement template for an auto-group based on an interval.
    * @param ctype the auto-group child type
    * @param begin start of interval
    * @param end end of interval
    * @param interval the interval
    * @param returnNulls whether or not to return nulls
    * @return a PageList of MetricValue objects
    */
   public org.hyperic.util.pager.PageList findAGMeasurementData( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] aids,org.hyperic.hq.measurement.server.session.MeasurementTemplate tmpl,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype,long begin,long end,long interval,boolean returnNulls,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.measurement.MeasurementNotFoundException, java.rmi.RemoteException;

   /**
    * Returns metadata for particular measurement
    */
   public java.util.List findMetricMetadata( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aid,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype,java.lang.Integer tid )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.measurement.TemplateNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Method findMetrics. When the entId is a server, return all of the metrics that are instances of the measurement templates for the server's type. In this case, the MetricDisplaySummary's attributes to show the number collecting doesn't make sense; showNumberCollecting should false for each bean. <p> When the entId is a platform, return all of the metrics that are instances of the measurement templates for the platform's type. In this case, the MetricDisplaySummary's attributes to show the number collecting doesn't make sense; showNumberCollecting should false for each bean. </p> <p> When the entId is compatible group of servers or platforms, return all of the metrics for the type. Each MetricDisplaySummary actually represents the metrics summarized for all of the group members (cumulative/averaged as appropriate), showNumberCollecting should be true and the numberCollecting as well as the total number of members assigned in each bean. </p>
    * @return Map keyed on the category (String), values are List's of MetricDisplaySummary beans
    * @see org.hyperic.hq.bizapp.shared.uibeans.MetricDisplaySummary
    */
   public org.hyperic.hq.bizapp.shared.uibeans.MetricDisplaySummary findMetric( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype,java.lang.Integer tid,long begin,long end )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.appdef.shared.AppdefCompatException, org.hyperic.hq.measurement.MeasurementNotFoundException, java.rmi.RemoteException;

   /**
    * Method findMetrics. When the entId is a server, return all of the metrics that are instances of the measurement templates for the server's type. In this case, the MetricDisplaySummary's attributes to show the number collecting doesn't make sense; showNumberCollecting should false for each bean. <p> When the entId is a platform, return all of the metrics that are instances of the measurement templates for the platform's type. In this case, the MetricDisplaySummary's attributes to show the number collecting doesn't make sense; showNumberCollecting should false for each bean. </p> <p> When the entId is compatible group of servers or platforms, return all of the metrics for the type. Each MetricDisplaySummary actually represents the metrics summarized for all of the group members (cumulative/averaged as appropriate), showNumberCollecting should be true and the numberCollecting as well as the total number of members assigned in each bean. </p>
    * @return Map keyed on the category (String), values are List's of MetricDisplaySummary beans
    * @see org.hyperic.hq.bizapp.shared.uibeans.MetricDisplaySummary
    */
   public org.hyperic.hq.bizapp.shared.uibeans.MetricDisplaySummary findMetric( int sessionId,java.util.List resources,java.lang.Integer tid,long begin,long end )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.appdef.shared.AppdefCompatException, org.hyperic.hq.measurement.MeasurementNotFoundException, java.rmi.RemoteException;

   /**
    * Prunes from the list of passed-in AppdefEntityValue array those resources that are not collecting the metric corresponding to the given template id.
    * @param resources the resources
    * @param tid the metric template id
    * @return an array of resources
    */
   public org.hyperic.hq.appdef.shared.AppdefResourceValue[] pruneResourcesNotCollecting( int sessionId,org.hyperic.hq.appdef.shared.AppdefResourceValue[] resources,java.lang.Integer tid )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Method findResourceMetricSummary. For metric comparisons, the ResourceMetricDisplaySummary beans are returned as a map where the keys are the MeasurementTemplateValue (or MeasurementTemplateLiteValue?) objects associated with the given resource's types, the values are Lists of ResourceMetricDisplaySummary The context that the user will be populating the input resource list from should always be like resource types. If for some reason that's not the case, this method will take a garbage in/garbage out approach (as opposed to enforcing like types) -- comparing apples and oranges may be performed but if the user ends up with measurement templates for which there is only one resource to compare, that should indicate some other problem i.e. the application is presenting dissimilar objects as available for comparison. The list of resources can be any concrete AppdefResourceValue (i.e. a platform, server or service), composite AppdefResourceValues (i.e. applications, groups) are inappropriate for this signature. Used for screen 0.3
    * @param begin the commencement of the timeframe of interest
    * @param end the end of the timeframe of interest
    * @return Map of measure templates and resource metric lists
    */
   public java.util.Map findResourceMetricSummary( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] entIds,long begin,long end )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.measurement.MeasurementNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Return a MetricSummary bean for each of the metrics (template) for the entities in the given time frame
    * @param begin the beginning time frame
    * @param end the ending time frame
    * @return a list of ResourceTypeDisplaySummary beans
    * @throws AppdefCompatException
    */
   public java.util.Map findMetrics( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] entIds,long filters,java.lang.String keyword,long begin,long end,boolean showNoCollect )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.appdef.shared.AppdefCompatException, java.rmi.RemoteException;

   /**
    * Method findMetrics. When the entId is a server, return all of the metrics that are instances of the measurement templates for the server's type. In this case, the MetricDisplaySummary's attributes to show the number collecting doesn't make sense; showNumberCollecting should false for each bean. <p> When the entId is a platform, return all of the metrics that are instances of the measurement templates for the platform's type. In this case, the MetricDisplaySummary's attributes to show the number collecting doesn't make sense; showNumberCollecting should false for each bean. </p> <p> When the entId is compatible group of servers or platforms, return all of the metrics for the type. Each MetricDisplaySummary actually represents the metrics summarized for all of the group members (cumulative/averaged as appropriate), showNumberCollecting should be true and the numberCollecting as well as the total number of members assigned in each bean. </p>
    * @return Map keyed on the category (String), values are List's of MetricDisplaySummary beans
    * @throws AppdefCompatException
    * @see org.hyperic.hq.bizapp.shared.uibeans.MetricDisplaySummary
    */
   public java.util.Map findMetrics( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entId,java.util.List mtids,long begin,long end )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.appdef.shared.AppdefCompatException, java.rmi.RemoteException;

   /**
    * Return a MetricSummary bean for each of the servers of a specific type.
    * @param begin the beginning time frame
    * @param end the ending time frame
    * @return a list of ResourceTypeDisplaySummary beans
    * @throws AppdefCompatException
    */
   public java.util.Map findAGPlatformMetricsByType( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityTypeID platTypeId,long begin,long end,boolean showAll )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefCompatException, java.rmi.RemoteException;

   /**
    * Return a Metric summary bean for each of the services of a specific type <p> The map returned has keys for the measurement categories (see MeasurementConstants) and values that are Lists of MetricDisplaySummary beans. </p> <p> This is used to access metrics for entity's internal and deployed services. The metrics returned are only applicable from within the given timeframe of interest. </p> <p> Appropriate entities include <ul> <li>applications (2.1.2.2-3) <li>servers (2.3.2.1-4 - internal/deplyed tabs) <li>services (2.5.2.2 - internal/deplyed tabs) </ul>
    * @param begin the beginning time frame
    * @param end the ending time frame
    * @return a list of CurrentHealthDisplaySummary beans
    * @throws AppdefCompatException
    */
   public  Map findAGMetricsByType(int sessionId, AppdefEntityID[] entIds,
                                   AppdefEntityTypeID typeId, long filters,
                                   String keyword, long begin, long end,
                                   boolean showAll)
        throws SessionTimeoutException, SessionNotFoundException,
            InvalidAppdefTypeException, PermissionException,
            AppdefEntityNotFoundException, AppdefCompatException;

   /**
    * Return a MeasurementSummary bean for the resource's associated resources specified by type
    * @param entId the entity ID
    * @param appdefType the type (server, service, etc) of the specified resource type
    * @param typeId the specified resource type ID
    * @return a MeasurementSummary bean
    */
   public org.hyperic.hq.bizapp.shared.uibeans.MeasurementSummary getSummarizedResourceAvailability( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entId,int appdefType,java.lang.Integer typeId )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.util.config.InvalidOptionException, java.rmi.RemoteException;

   /**
    * Method findSummarizedServerCurrentHealth. <p> Return a ResourceTypeDisplaySummary bean for each of the platform's deployed servers. Each bean represents a type of server and the measurement data summarized for that type. </p> <p> see screen 2.2.2 </p>
    * @return List of ResourceTypeDisplaySummary beans
    */
   public java.util.List findSummarizedServerCurrentHealth( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entId )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Method findSummarizedServiceCurrentHealth. <p> This is used for the lists of service types for the Current Health view for <ul> <li>applications (2.1.2) <li>servers (2.3.2.1-4) <li>services (2.5.2.2) </ul> </p> <p> If <code>internal</code> is <i>true</i>, only the <i>internal</i> services will be returned, the <i>deployed</i> ones if it's <i>false</i>. If <code>internal</code> is <i>null</i>, then both deployed <i>and</i> internal services will be returned. </p>
    * @param entId the appdef entity with child services
    * @return List a list of ResourceTypeDisplaySummary beans
    */
   public java.util.List findSummarizedPlatformServiceCurrentHealth( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entId )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   public java.util.List findSummarizedServiceCurrentHealth( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entId )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Method findGroupCurrentHealth. <p> Return a ResourceDisplaySummary bean for each of the group's member resources. Each bean represents a resource and the measurement data summarized for that type. </p> <p> see screen 2.2.2 </p>
    * @return List of ResourceDisplaySummary beans
    */
   public java.util.List findGroupCurrentHealth( int sessionId,java.lang.Integer id )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Return a ResourceDisplaySummary bean for each of the resource's virtual resources. Each bean represents a resource and the measurement data summarized for that resource. </p> <p> see screen 2.2.2 </p>
    * @return List of ResourceDisplaySummary beans
    */
   public java.util.List findVirtualsCurrentHealth( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entId )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Method findResourcesCurrentHealth. The size of the list of ResourceDisplaySummary beans returned will be equivalent to the size of the entity ID's passed in. Called by RSS feed so it does not require valid session ID.
    * @throws ApplicationException if user is not found
    * @throws LoginException if user account has been disabled
    * @return PageList of ResourceDisplaySummary beans
    */
   public java.util.List findResourcesCurrentHealth( java.lang.String user,org.hyperic.hq.appdef.shared.AppdefEntityID[] entIds )
      throws javax.security.auth.login.LoginException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Method findResourcesCurrentHealth. The size of the list of ResourceDisplaySummary beans returned will be equivalent to the size of the entity ID's passed in.
    * @return PageList of ResourceDisplaySummary beans
    */
   public java.util.List findResourcesCurrentHealth( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] entIds )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Find the current health of the entity's host(s)
    * @return PageList of ResourceDisplaySummary beans
    */
   public java.util.List findHostsCurrentHealth( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Method findPlatformsCurrentHealth. The population of the list of ResourceDisplaySummary beans returned will vary depending on the entId's type. When the entId is a server, the returned list should have just one ResourceDisplaySummary with a PlatformValue in it, the one that represents the host that the server resides on. When the entId is a compatible group of platforms, the returned list will have as many elements as there are individual PlatformValue's to represent all of the hosts.
    * @return PageList of ResourceDisplaySummary beans
    */
   public org.hyperic.util.pager.PageList findPlatformsCurrentHealth( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Method findAGPlatformsCurrentHealthByType For autogroup of platforms. If the entId is a platform, the deployed servers view shows the current health of servers.
    * @return a list of ResourceDisplaySummary beans
    */
   public java.util.List findAGPlatformsCurrentHealthByType( int sessionId,java.lang.Integer platTypeId )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Method findServersCurrentHealth For the screens that rely on this API, the entId is either an application, a service or a group. The population of the list varies with the type of appdef entity input. This is used for all of the application monitoring screens; they all show a list with current health data for each server that participates in supplying services for an application. So if the entity is an application, the list is populated with servers that host the services on which the application relies. The timeframe is not used in this context, the list of servers is always the current list. The timeframe shall still be sent but it will be bounded be the current time and current time - default time window. (see 2.1.2 - 2.1.2.1-3) If the entId is a platform, the deployed servers view shows the current health of servers in the timeframe that the metrics are shown for. So if the entity is application, expect to populate the list based on the presence of metrics in the timeframe of interest. (see 2.2.2.3, it shows deployed servers... I'll give you a dollar if you can come up with a reason why we'd want internal servers. We aren't managing cron or syslog, dude.) This is also used for a services' current health page in which case the appdef entity is a service.
    * @param entId the platform's or application's ID
    * @return a list of ResourceDisplaySummary beans
    */
   public org.hyperic.util.pager.PageList findServersCurrentHealth( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Method findServersCurrentHealth For platform's autogroup of servers. If the entId is a platform, the deployed servers view shows the current health of servers.
    * @return a list of ResourceDisplaySummary beans
    */
   public java.util.List findAGServersCurrentHealthByType( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] entIds,java.lang.Integer serverTypeId )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Return a ResourceDisplaySummary bean for each of the resource's services. The only applicable resource is currently a compatible group (of services...)
    * @return a list of ResourceDisplaySummary beans
    */
   public java.util.List findAGServicesCurrentHealthByType( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] entIds,java.lang.Integer serviceTypeId )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get Availability measurement for a given entitiy
    */
   public double getAvailability( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the availability of the resource
    * @param id the Appdef entity ID
    */
   public double getAvailability( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the availability of autogroup resources
    * @return a MetricValue for the availability
    */
   public double getAGAvailability( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] aids,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Returns a list of problem metrics for an autogroup, return a summarized list of UI beans
    * @throws SessionTimeoutException
    * @throws SessionNotFoundException
    * @throws AppdefEntityNotFoundException
    * @throws PermissionException
    * @throws InvalidAppdefTypeException
    * @throws AppdefCompatException
    */
   public java.util.List findAllMetrics( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype,long begin,long end )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefCompatException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, java.rmi.RemoteException;

   /**
    * Returns a list of problem metrics for a resource, and the selected children and hosts of that resource. Return a summarized list of UI beans
    */
   public java.util.List findAllMetrics( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid,org.hyperic.hq.appdef.shared.AppdefEntityID[] hosts,org.hyperic.hq.appdef.shared.AppdefEntityTypeID[] children,org.hyperic.hq.appdef.shared.AppdefEntityID[] members,long begin,long end )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefCompatException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, java.rmi.RemoteException;

   /**
    * Returns a list of problem metrics for a resource, and the selected children and hosts of that resource. Return a summarized list of UI beans
    */
   public java.util.List findAllMetrics( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid,org.hyperic.hq.appdef.shared.AppdefEntityID[] hosts,org.hyperic.hq.appdef.shared.AppdefEntityTypeID[] children,long begin,long end )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefCompatException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, java.rmi.RemoteException;

   /**
    * Get the availability metric for a given resource
    */
   public org.hyperic.hq.measurement.server.session.Measurement findAvailabilityMetric( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;
   
   

}
