/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.bizapp.shared;

/**
 * Remote interface for AppdefBoss.
 */
public interface AppdefBoss
   extends javax.ejb.EJBObject
{
   /**
    * Find a common appdef resource type among the appdef entities
    * @param sessionID
    * @param aeids the array of appdef entity IDs
    * @return AppdefResourceTypeValue if they are of same type, null otherwise
    * @throws AppdefEntityNotFoundException
    * @throws PermissionException
    * @throws SessionNotFoundException
    * @throws SessionTimeoutException
    */
   public org.hyperic.hq.appdef.server.session.AppdefResourceType findCommonResourceType( int sessionID,java.lang.String[] aeids )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Find all the platform types defined in the system.
    * @return A list of PlatformTypeValue objects.
    */
   public org.hyperic.util.pager.PageList findAllPlatformTypes( int sessionID,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Find all the viewable platform types defined in the system.
    * @return A list of PlatformTypeValue objects.
    */
   public org.hyperic.util.pager.PageList findViewablePlatformTypes( int sessionID,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, javax.ejb.FinderException, java.rmi.RemoteException;

   /**
    * Find all the server types defined in the system.
    * @return A list of ServerTypeValue objects.
    */
   public org.hyperic.util.pager.PageList findAllServerTypes( int sessionID,org.hyperic.util.pager.PageControl pc )
      throws javax.ejb.FinderException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Find all viewable server types defined in the system.
    * @return A list of ServerTypeValue objects.
    */
   public org.hyperic.util.pager.PageList findViewableServerTypes( int sessionID,org.hyperic.util.pager.PageControl pc )
      throws javax.ejb.FinderException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public java.util.List findAllApplicationTypes( int sessionID )
      throws org.hyperic.hq.common.ApplicationException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.server.session.ApplicationType findApplicationTypeById( int sessionId,java.lang.Integer id )
      throws org.hyperic.hq.common.ApplicationException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findAllServiceTypes( int sessionID,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findViewableServiceTypes( int sessionID,org.hyperic.util.pager.PageControl pc )
      throws javax.ejb.FinderException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findViewablePlatformServiceTypes( int sessionID,java.lang.Integer platId )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.ApplicationValue findApplicationById( int sessionID,java.lang.Integer id )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * <p>Get first-level child resources of a given resource based on the child resource type.</p> <p>For example: <ul> <li><b>platform -</b> list of servers</li> <li><b>server -</b> list of services</li> <li><b>service -</b> <i>not supported</i></li> <li><b>application -</b> list of services</li> <li><b>group -</b> <i>list of members if the group is compatible</i></li> </ul></p>
    * @param parent the resource whose children we want
    * @param childResourceType the type of child resource
    * @return list of <code>{@link org.hyperic.hq.appdef.shared.AppdefResourceValue}</code> objects
    */
   public org.hyperic.util.pager.PageList findChildResources( int sessionID,org.hyperic.hq.appdef.shared.AppdefEntityID parent,org.hyperic.hq.appdef.shared.AppdefEntityTypeID childResourceType,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findApplications( int sessionID,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findPlatformServices( int sessionID,java.lang.Integer platformId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findPlatformServices( int sessionID,java.lang.Integer platformId,java.lang.Integer typeId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Find service inventory by application - including services and clusters
    */
   public org.hyperic.util.pager.PageList findServiceInventoryByApplication( int sessionID,java.lang.Integer appId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Find all services on a server
    * @return A list of ServiceValue objects.
    */
   public org.hyperic.util.pager.PageList findServicesByServer( int sessionID,java.lang.Integer serverId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Find the platform by service.
    */
   public org.hyperic.hq.appdef.shared.PlatformValue findPlatformByDependentID( int sessionID,org.hyperic.hq.appdef.shared.AppdefEntityID entityId )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.ServerValue findServerByService( int sessionID,java.lang.Integer serviceID )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findServersByTypeAndPlatform( int sessionId,java.lang.Integer platformId,int adResTypeId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Get the virtual server for a given platform and service type
    */
   public org.hyperic.hq.appdef.shared.ServerValue findVirtualServerByPlatformServiceType( int sessionID,java.lang.Integer platId,java.lang.Integer svcTypeId )
      throws org.hyperic.hq.appdef.shared.ServerNotFoundException, org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Find all servers on a given platform
    * @return A list of ServerValue objects
    */
   public org.hyperic.util.pager.PageList findServersByPlatform( int sessionID,java.lang.Integer platformId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the virtual servers for a given platform
    */
   public org.hyperic.util.pager.PageList findViewableServersByPlatform( int sessionID,java.lang.Integer platformId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findServerTypesByPlatform( int sessionID,java.lang.Integer platformId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findServerTypesByPlatformType( int sessionID,java.lang.Integer platformId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Get all platforms in the inventory.
    * @param sessionID The current session token.
    * @param pc a PageControl object which determines the size of the page and the sorting, if any.
    * @return A List of PlatformValue objects representing all of the platforms that the given subject is allowed to view.    */
   public org.hyperic.util.pager.PageList findAllPlatforms( int sessionID,org.hyperic.util.pager.PageControl pc )
      throws javax.ejb.FinderException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get recently created platforms in the inventory.
    * @param sessionID The current session token.
    * @return A List of PlatformValue objects representing all of the platforms that the given subject is allowed to view that was created in the past time range specified.    */
   public org.hyperic.util.pager.PageList findRecentPlatforms( int sessionID,long range,int size )
      throws javax.ejb.FinderException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Looks up and returns a list of value objects corresponding to the list of appdef entity represented by the instance ids passed in. The method does not require the caller to know the instance-id's corresponding type. Similarly, the return value is upcasted.
    * @return list of appdefResourceValue
    */
   public org.hyperic.util.pager.PageList findByIds( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] entities,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Looks up and returns a value object corresponding to the appdef entity represented by the instance id passed in. The method does not require the caller to know the instance-id's corresponding type. Similarly, the return value is upcasted.
    */
   public org.hyperic.hq.appdef.shared.AppdefResourceValue findById( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entityId )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.PlatformValue findPlatformById( int sessionID,java.lang.Integer id )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.Agent findResourceAgent( org.hyperic.hq.appdef.shared.AppdefEntityID entityId )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.ServerValue findServerById( int sessionID,java.lang.Integer id )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.ServiceValue findServiceById( int sessionID,java.lang.Integer id )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findAllResourceTypes( int sessionId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findAllResourceTypes( int sessionId,int entType,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.server.session.Platform createPlatform( int sessionID,org.hyperic.hq.appdef.shared.PlatformValue platformVal,java.lang.Integer platTypePK,java.lang.Integer agent )
      throws javax.ejb.CreateException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.AppdefDuplicateFQDNException, org.hyperic.hq.common.ApplicationException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.AppdefResourceTypeValue findResourceTypeById( int sessionID,org.hyperic.hq.appdef.shared.AppdefEntityTypeID id )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.server.session.PlatformType findPlatformTypeById( int sessionID,java.lang.Integer id )
      throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.server.session.PlatformType findPlatformTypeByName( int sessionID,java.lang.String name )
      throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.server.session.ServiceType findServiceTypeById( int sessionID,java.lang.Integer id )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.util.pager.PageList findServiceTypesByServerType( int sessionID,int serverTypeId )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.server.session.ServerType findServerTypeById( int sessionID,java.lang.Integer id )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Create a server with CProps
    * @param platformPK - the pk of the host platform
    * @param serverTypePK - the type of server
    * @param cProps - the map with Custom Properties for the server
    * @return ServerValue - the saved server
    */
   public org.hyperic.hq.appdef.shared.ServerValue createServer( int sessionID,org.hyperic.hq.appdef.shared.ServerValue serverVal,java.lang.Integer platformPK,java.lang.Integer serverTypePK,java.util.Map cProps )
      throws javax.ejb.CreateException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.CPropKeyNotFoundException, java.rmi.RemoteException;

   /**
    * Create an application
    * @return ApplicationValue - the saved application
    */
   public org.hyperic.hq.appdef.shared.ApplicationValue createApplication( int sessionID,org.hyperic.hq.appdef.shared.ApplicationValue appVal,java.util.Collection services,org.hyperic.util.config.ConfigResponse protoProps )
      throws javax.ejb.CreateException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.ServiceValue createService( int sessionID,org.hyperic.hq.appdef.shared.ServiceValue serviceVal,java.lang.Integer serviceTypePK,org.hyperic.hq.appdef.shared.AppdefEntityID aeid )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.ServerNotFoundException, org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.ValidationException, javax.ejb.CreateException, java.rmi.RemoteException;

   /**
    * Create a service with CProps
    * @param serviceTypePK - the type of service
    * @param serverPK - the server host
    * @param cProps - the map with Custom Properties for the service
    * @return Service - the saved Service
    */
   public org.hyperic.hq.appdef.server.session.Service createService( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.ServiceValue serviceVal,java.lang.Integer serviceTypePK,java.lang.Integer serverPK,java.util.Map cProps )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.authz.shared.PermissionException, javax.ejb.CreateException, org.hyperic.hq.appdef.shared.CPropKeyNotFoundException, java.rmi.RemoteException;

   /**
    * Removes an appdef entity by nulling out any reference from its children and then deleting it synchronously. The children are then cleaned up in the zevent queue by issuing a {@link ResourcesCleanupZevent}
    * @return AppdefEntityID[] - an array of the resources (including children) deleted
    */
   public org.hyperic.hq.appdef.shared.AppdefEntityID[] removeAppdefEntity( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.common.VetoException, java.rmi.RemoteException;

   /**
    * Remove all delete resources Method is "NotSupported" since all the resource deletes may take longer than the jboss transaction timeout. No need for a transaction in this context.
    */
   public void removeDeletedResources(  )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.common.VetoException, javax.ejb.RemoveException, java.rmi.RemoteException;

   public void _removePlatformInNewTran( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Platform platform )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.common.VetoException, java.rmi.RemoteException;

   public void removePlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Platform platform )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.common.VetoException, java.rmi.RemoteException;

   public void _removeServerInNewTran( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Server server )
      throws org.hyperic.hq.common.VetoException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public void _removeServiceInNewTran( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Service service )
      throws org.hyperic.hq.common.VetoException, org.hyperic.hq.authz.shared.PermissionException, javax.ejb.RemoveException, java.rmi.RemoteException;

   public void _removeGroupInNewTran( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.ResourceGroup group )
      throws org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.common.VetoException, java.rmi.RemoteException;

   public void _removeApplicationInNewTran( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Application app )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.common.VetoException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.ServerValue updateServer( int sessionId,org.hyperic.hq.appdef.shared.ServerValue aServer )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, javax.ejb.FinderException, org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, java.rmi.RemoteException;

   /**
    * Update a server with cprops.
    * @param cProps - the map with Custom Properties for the server
    */
   public org.hyperic.hq.appdef.shared.ServerValue updateServer( int sessionId,org.hyperic.hq.appdef.shared.ServerValue aServer,java.util.Map cProps )
      throws javax.ejb.FinderException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.CPropKeyNotFoundException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.ServiceValue updateService( int sessionId,org.hyperic.hq.appdef.shared.ServiceValue aService )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, javax.ejb.FinderException, org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, java.rmi.RemoteException;

   /**
    * Update a service with cProps.
    * @param cProps - the map with Custom Properties for the service
    */
   public org.hyperic.hq.appdef.shared.ServiceValue updateService( int sessionId,org.hyperic.hq.appdef.shared.ServiceValue aService,java.util.Map cProps )
      throws javax.ejb.FinderException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.CPropKeyNotFoundException, java.rmi.RemoteException;

   /**
    * Update a service with cProps.
    * @param cProps - the map with Custom Properties for the service
    */
   public org.hyperic.hq.appdef.shared.ServiceValue updateService( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.ServiceValue aService,java.util.Map cProps )
      throws javax.ejb.FinderException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.CPropKeyNotFoundException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.PlatformValue updatePlatform( int sessionId,org.hyperic.hq.appdef.shared.PlatformValue aPlatform )
      throws javax.ejb.FinderException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.AppdefDuplicateFQDNException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.PlatformValue updatePlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.PlatformValue aPlatform )
      throws javax.ejb.FinderException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.AppdefDuplicateFQDNException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.ApplicationValue updateApplication( int sessionId,org.hyperic.hq.appdef.shared.ApplicationValue app )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Set the services used by an application indicate whether the service is an entry point
    */
   public void setApplicationServices( int sessionId,java.lang.Integer appId,java.util.List entityIds )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the dependency tree for a given application
    */
   public org.hyperic.hq.appdef.shared.DependencyTree getAppDependencyTree( int sessionId,java.lang.Integer appId )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public void setAppDependencyTree( int sessionId,org.hyperic.hq.appdef.shared.DependencyTree depTree )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public void removeServer( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer serverId )
      throws org.hyperic.hq.appdef.shared.ServerNotFoundException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.common.VetoException, java.rmi.RemoteException;

   /**
    * Remove an application service.
    * @param appId - The application identifier.
    */
   public void removeAppService( int sessionId,java.lang.Integer appId,java.lang.Integer serviceId )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.AppdefResourceValue changeResourceOwner( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID eid,java.lang.Integer newOwnerId )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Create and return a new mixed group value object. This group can contain mixed resources of any entity/resource type combination including platform, server and service.
    * @param name - The name of the group.
    * @param description - A description of the group contents. (optional)
    * @param location - Location of group (optional)
    * @return AppdefGroupValue object
    */
   public org.hyperic.hq.authz.server.session.ResourceGroup createGroup( int sessionId,java.lang.String name,java.lang.String description,java.lang.String location,java.lang.String[] resources,boolean privGrp )
      throws org.hyperic.hq.authz.shared.GroupCreationException, org.hyperic.hq.grouping.shared.GroupDuplicateNameException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Create and return a new strict mixed group value object. This type of group can contain either applications or other groups. However, the choice between between the two is mutually exclusive because all group members must be of the same entity type. Additionally, groups that contain groups are limited to containing either "application groups" or "platform,server&service groups".
    * @param adType - The appdef entity type (groups or applications)
    * @param name - The name of the group.
    * @param description - A description of the group contents. (optional)
    * @param location - Location of group (optional)
    * @return AppdefGroupValue object
    */
   public org.hyperic.hq.authz.server.session.ResourceGroup createGroup( int sessionId,int adType,java.lang.String name,java.lang.String description,java.lang.String location,java.lang.String[] resources,boolean privGrp )
      throws org.hyperic.hq.authz.shared.GroupCreationException, org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.grouping.shared.GroupDuplicateNameException, java.rmi.RemoteException;

   /**
    * Create and return a new compatible group type object. This group type can contain any type of platform, server or service. Compatible groups are strict which means that all members must be of the same type. Compatible group members must also be compatible which means that all group members must have the same resource type. Compatible groups of services have an additional designation of being of type "Cluster".
    * @param adType - The type of entity this group is compatible with.
    * @param adResType - The resource type this group is compatible with.
    * @param name - The name of the group.
    * @param description - A description of the group contents. (optional)
    * @param location - Location of group (optional)
    */
   public org.hyperic.hq.authz.server.session.ResourceGroup createGroup( int sessionId,int adType,int adResType,java.lang.String name,java.lang.String description,java.lang.String location,java.lang.String[] resources,boolean privGrp )
      throws org.hyperic.hq.authz.shared.GroupCreationException, org.hyperic.hq.grouping.shared.GroupDuplicateNameException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Remove resources from the group's contents.
    */
   public void removeResourcesFromGroup( int sessionId,org.hyperic.hq.authz.server.session.ResourceGroup group,java.util.Collection resources )
      throws org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.hyperic.hq.authz.server.session.ResourceGroup findGroupById( int sessionId,java.lang.Integer groupId )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   public java.util.Map getResourceTypeCountMap( int sessionId,java.lang.Integer groupId )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.AppdefGroupValue findGroup( int sessionId,java.lang.Integer id )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   public java.util.Collection getGroupsForResource( int sessionId,org.hyperic.hq.authz.server.session.Resource r )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Lookup and return a list of group value objects by their identifiers.
    * @return PageList of AppdefGroupValue objects
    * @throws AppdefGroupNotFoundException when group cannot be found.
    * @throws InvalidAppdefTypeException if group is compat and the appdef type id is incorrect.
    */
   public org.hyperic.util.pager.PageList findGroups( int sessionId,java.lang.Integer[] groupIds,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Produce list of all groups where caller is authorized to modify. Include just those groups that contain the specified appdef entity.
    * @param entity for use in group member filtering.
    * @return List containing AppdefGroupValue.
    */
   public org.hyperic.util.pager.PageList findAllGroupsMemberInclusive( int sessionId,org.hyperic.util.pager.PageControl pc,org.hyperic.hq.appdef.shared.AppdefEntityID entity )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.common.ApplicationException, java.rmi.RemoteException;

   /**
    * Produce list of all groups where caller is authorized to modify. Exclude any groups that contain the appdef entity id.
    * @param entity for use in group member filtering.
    * @return List containing AppdefGroupValue.
    */
   public org.hyperic.util.pager.PageList findAllGroupsMemberExclusive( int sessionId,org.hyperic.util.pager.PageControl pc,org.hyperic.hq.appdef.shared.AppdefEntityID entity )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Produce list of all groups where caller is authorized to modify. Exclude any groups that contain the appdef entity id.
    * @param entity for use in group member filtering.
    * @return List containing AppdefGroupValue.
    */
   public org.hyperic.util.pager.PageList findAllGroupsMemberExclusive( int sessionId,org.hyperic.util.pager.PageControl pc,org.hyperic.hq.appdef.shared.AppdefEntityID entity,java.lang.Integer[] removeIds )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Produce list of all groups where caller is authorized to modify. Exclude any groups that contain the appdef entity id. Filter out any unwanted groups specified by groupId array.
    * @param entity for use in group member filtering.
    * @return List containing AppdefGroupValue.
    */
   public org.hyperic.util.pager.PageList findAllGroupsMemberExclusive( int sessionId,org.hyperic.util.pager.PageControl pc,org.hyperic.hq.appdef.shared.AppdefEntityID entity,java.lang.Integer[] removeIds,org.hyperic.hq.authz.server.session.Resource resourceType )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Produce list of all groups where caller is authorized to modify. Exclude any groups that contain the appdef entity id. Filter out any unwanted groups specified by groupId array.
    * @param entity for use in group member filtering.
    * @return List containing AppdefGroupValue.
    */
   public org.hyperic.util.pager.PageList findAllGroupsMemberExclusive( int sessionId,org.hyperic.util.pager.PageControl pc,org.hyperic.hq.appdef.shared.AppdefEntityID[] entities )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Produce list of all group pojos where caller is authorized
    * @return List containing AppdefGroup.
    */
   public java.util.Collection findAllGroupPojos( int sessionId )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Add entities to a resource group
    */
   public void addResourcesToGroup( int sessionID,org.hyperic.hq.authz.server.session.ResourceGroup group,java.util.List aeids )
      throws org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Update properties of a group.
    * @see ResourceGroupManagerImpl.updateGroup
    */
   public void updateGroup( int sessionId,org.hyperic.hq.authz.server.session.ResourceGroup group,java.lang.String name,java.lang.String description,java.lang.String location )
      throws org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.grouping.shared.GroupDuplicateNameException, java.rmi.RemoteException;

   /**
    * Produce list of compatible, viewable inventory items. The returned list of value objects will consist only of group inventory compatible with the the specified group type. NOTE: This method returns an empty page list when no compatible inventory is found.
    * @param groupType - the optional group type
    * @param appdefTypeId - the id correponding to the type of entity. example: group, platform, server, service NOTE: A valid entity type id is now MANDATORY!
    * @param appdefResTypeId - the id corresponding to the type of resource example: linux, jboss, vhost
    * @param resourceName - resource name (or name substring) to search for.
    * @return page list of value objects that extend AppdefResourceValue
    */
   public org.hyperic.util.pager.PageList findCompatInventory( int sessionId,int groupType,int appdefTypeId,int groupEntTypeId,int appdefResTypeId,java.lang.String resourceName,org.hyperic.hq.appdef.shared.AppdefEntityID[] pendingEntities,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Produce list of compatible, viewable inventory items. The returned list of value objects will be filtered on AppdefGroupValue -- if the group contains the entity, then then the entity will not be included in the returned set. NOTE: This method returns an empty page list when no compatible inventory is found.
    * @param appdefTypeId - the id correponding to the type of entity example: platform, server, service NOTE: A valid entity type id is now MANDATORY!
    * @param appdefResTypeId - the id corresponding to the type of resource example: linux, jboss, vhost
    * @param groupEntity - the appdef entity of a group value who's members are to be filtered out of result set.
    * @param resourceName - resource name (or name substring) to search for.
    * @return page list of value objects that extend AppdefResourceValue
    */
   public org.hyperic.util.pager.PageList findCompatInventory( int sessionId,int appdefTypeId,int appdefResTypeId,org.hyperic.hq.appdef.shared.AppdefEntityID groupEntity,org.hyperic.hq.appdef.shared.AppdefEntityID[] pendingEntities,java.lang.String resourceName,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Perform a search for resources from the resource hub
    */
   public org.hyperic.util.pager.PageList search( int sessionId,int appdefTypeId,java.lang.String searchFor,org.hyperic.hq.appdef.shared.AppdefEntityTypeID appdefResType,java.lang.Integer groupId,int[] groupSubType,boolean matchAny,boolean matchOwn,boolean matchUnavail,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.util.regex.PatternSyntaxException, java.rmi.RemoteException;

   /**
    * Perform a search for resources
    */
   public org.hyperic.util.pager.PageList search( int sessionId,java.lang.String searchFor,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Find SERVICE compatible inventory. Specifically, find all viewable services and service clusters. Services that are assigned to clusters are not returned by this method. Value objects returned by this method include ServiceValue and/or AppdefGroupValue. An array of pending AppdefEntityID can also be specified for filtering. NOTE: This method returns an empty page list when no compatible inventory is found.
    * @param sessionId - valid auth token
    * @return page list of value objects that extend AppdefResourceValue
    */
   public org.hyperic.util.pager.PageList findAvailableServicesForApplication( int sessionId,java.lang.Integer appId,org.hyperic.hq.appdef.shared.AppdefEntityID[] pendingEntities,java.lang.String resourceName,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Add an appdef entity to a batch of groups.
    * @param sessionId representing session identifier
    * @param entityId object to be added.
    * @param groupIds identifier array
    */
   public void batchGroupAdd( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entityId,java.lang.Integer[] groupIds )
      throws org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.common.VetoException, java.rmi.RemoteException;

   /**
    * Update all the appdef resources owned by this user to be owned by the root user. This is done to prevent resources from being orphaned in the UI due to its display restrictions. This method should only get called before a user is about to be deleted
    */
   public void resetResourceOwnership( int sessionId,org.hyperic.hq.authz.server.session.AuthzSubject currentOwner )
      throws org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Remove an appdef entity from a batch of groups.
    * @param entityId object to be removed
    * @param groupIds identifier array
    */
   public void batchGroupRemove( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID entityId,java.lang.Integer[] groupIds )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.common.VetoException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.shared.AppdefResourcePermissions getResourcePermissions( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, javax.ejb.FinderException, java.rmi.RemoteException;

   public int getAgentCount( int sessionId )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   public java.util.List findAllAgents( int sessionId )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Get the value of one agent based on the IP and Port on which the agent is listening
    */
   public org.hyperic.hq.appdef.Agent findAgentByIpAndPort( int sessionId,java.lang.String ip,int port )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AgentNotFoundException, java.rmi.RemoteException;

   /**
    * Set (or delete) a custom property for a resource. If the property already exists, it will be overwritten.
    * @param id Appdef entity to set the value for
    * @param key Key to associate the value with
    * @param val Value to assicate with the key. If the value is null, then the value will simply be removed.
    */
   public void setCPropValue( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String key,java.lang.String val )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.CPropKeyNotFoundException, java.rmi.RemoteException;

   /**
    * Get a map which holds the descriptions & their associated values for an appdef entity.
    * @param id Appdef entity to get the custom entities for
    * @return The properties stored for a specific entity ID
    */
   public java.util.Properties getCPropDescEntries( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Get all the keys associated with an appdef resource type.
    * @param appdefType One of AppdefEntityConstants.APPDEF_TYPE_*
    * @param appdefTypeId The ID of the appdef resource type
    * @return a List of CPropKeyValue objects
    */
   public java.util.List getCPropKeys( int sessionId,int appdefType,int appdefTypeId )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Get all the keys associated with an appdef type of a resource.
    * @param aeid The ID of the appdef resource
    * @return a List of CPropKeyValue objects
    * @throws PermissionException
    * @throws AppdefEntityNotFoundException
    */
   public java.util.List getCPropKeys( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID aeid )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the appdef inventory summary visible to a user
    */
   public org.hyperic.hq.appdef.shared.AppdefInventorySummary getInventorySummary( int sessionId,boolean countTypes )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Returns a 2x2 array mapping "appdef type id" to its corresponding label. Suitable for populating an HTML selector.
    */
   public java.lang.String[][] getAppdefTypeStrArrMap(  )
      throws java.rmi.RemoteException;

   /**
    * A method to set ALL the configs of a resource. This includes the resourceConfig, metricConfig, rtConfig and controlConfig.This also includes the enabling/disabling of rtMetrics for both service and enduser. NOTE: This method should ONLY be called when a user manually configures a resource.
    * @param allConfigs The full configuation information.
    * @param allConfigsRollback The configuation to rollback to if an error occurs.
    */
   public void setAllConfigResponses( int sessionInt,org.hyperic.hq.bizapp.shared.AllConfigResponses allConfigs,org.hyperic.hq.bizapp.shared.AllConfigResponses allConfigsRollback )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.util.config.EncodingException, org.hyperic.hq.product.PluginException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.autoinventory.AutoinventoryException, org.hyperic.hq.scheduler.ScheduleWillNeverFireException, org.hyperic.hq.agent.AgentConnectionException, java.rmi.RemoteException;

   /**
    * Get the navigation map data for a given Appdef entity.
    * @return all navigable resources for the given appdef entity
    */
   public org.hyperic.hq.bizapp.shared.uibeans.ResourceTreeNode[] getNavMapData( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID adeId )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Get the navigation map data for a an auto-group.
    * @param adeIds the appdef entity ids of the "parents" of the groupd children
    * @param ctype the child resource type
    * @return all navigable resources for the given appdef entities and child resource type
    */
   public org.hyperic.hq.bizapp.shared.uibeans.ResourceTreeNode[] getNavMapData( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] adeIds,int ctype )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Get the list of resources that are unavailable
    */
   public java.util.Collection getUnavailableResources( org.hyperic.hq.authz.server.session.AuthzSubject user,java.lang.String typeId,org.hyperic.hibernate.PageInfo info )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the map of unavailable resource counts by type
    */
   public java.util.Map getUnavailableResourcesCount( org.hyperic.hq.authz.server.session.AuthzSubject user )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get Service resources and their display information
    * @param subject the caller
    * @param proto the type name of the services
    * @param cprop a unique custom property name to be fetched    */
   public java.util.List getServicesView( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.Resource proto,java.lang.String cprop,java.lang.String metricName,org.hyperic.hibernate.PageInfo pi )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException, java.rmi.RemoteException;

   /**
    * temporary method for determining whether or not we're running a database that supports navmap
    */
   public boolean isNavMapSupported(  )
      throws java.rmi.RemoteException;

   public void startup(  )
      throws java.rmi.RemoteException;

}
