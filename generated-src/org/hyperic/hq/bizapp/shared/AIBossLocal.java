/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.bizapp.shared;

/**
 * Local interface for AIBoss.
 */
public interface AIBossLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Finder for all of the scheduled AI scans for an appdef entity.
    */
   public org.hyperic.util.pager.PageList findScheduledJobs( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.hq.autoinventory.shared.AIScheduleValue findScheduledJobById( int sessionId,java.lang.Integer id ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get a job history based on appdef id
    */
   public org.hyperic.util.pager.PageList findJobHistory( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Delete a AIJob based on an id
    * @param ids Array of job ids to be deleted    */
   public void deleteAIJob( int sessionId,java.lang.Integer[] ids ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.autoinventory.AutoinventoryException;

   /**
    * Get server signatures for a set of servertypes.
    * @param serverTypes A List of ServerTypeValue objects representing the server types to get signatures for. If this is null, all server signatures are returned.
    * @return A Map, where the keys are the names of the ServerTypeValues, and the values are the ServerSignature objects.
    */
   public java.util.Map getServerSignatures( int sessionID,java.util.List serverTypes ) throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.autoinventory.AutoinventoryException;

   /**
    * Start an autoinventory scan on a group of platforms
    * @param groupID The ID of the group of platforms to scan.
    * @param scanConfig The scan configuration to use when scanning.
    * @param scanName The name of the scan - this is ignored (i.e. it can be null) for immediate, one-time scans.
    * @param scanDesc The description of the scan - this is ignored (i.e. it can be null) for immediate, one-time scans.
    * @param schedule Describes when the scan should be run. If this is null, then the scan is run as an immediate, one-time only scan.
    */
   public void startGroupScan( int sessionID,int groupID,org.hyperic.hq.autoinventory.ScanConfigurationCore scanConfig,java.lang.String scanName,java.lang.String scanDesc,org.hyperic.hq.scheduler.ScheduleValue schedule ) throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.autoinventory.AutoinventoryException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.autoinventory.DuplicateAIScanNameException, org.hyperic.hq.scheduler.ScheduleWillNeverFireException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException;

   /**
    * Start an autoinventory scan.
    * @param platformID The platform ID of the platform to scan.
    * @param scanConfig The scan configuration to use when scanning.
    * @param scanName The name of the scan - this is ignored (i.e. it can be null) for immediate, one-time scans.
    * @param scanDesc The description of the scan - this is ignored (i.e. it can be null) for immediate, one-time scans.
    * @param schedule Describes when the scan should be run. If this is null, then the scan is run as an immediate, one-time only scan.
    */
   public void startScan( int sessionID,int platformID,org.hyperic.hq.autoinventory.ScanConfigurationCore scanConfig,java.lang.String scanName,java.lang.String scanDesc,org.hyperic.hq.scheduler.ScheduleValue schedule ) throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.autoinventory.AutoinventoryException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.autoinventory.DuplicateAIScanNameException, org.hyperic.hq.scheduler.ScheduleWillNeverFireException;

   public void startScan( int sessionID,java.lang.String agentToken,org.hyperic.hq.autoinventory.ScanConfigurationCore scanConfig ) throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.autoinventory.AutoinventoryException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Stop an autoinventory scan.
    * @param platformID The platform ID of the platform to stop scanning on.
    */
   public void stopScan( int sessionID,int platformID ) throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.autoinventory.AutoinventoryException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Get status for a running autoinventory scan.
    * @param platformID The platform ID of the platform to get scan status for.
    */
   public org.hyperic.hq.autoinventory.ScanStateCore getScanStatus( int sessionID,int platformID ) throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.agent.AgentRemoteException, org.hyperic.hq.autoinventory.AutoinventoryException;

   /**
    * Get status for a running autoinventory scan given the agentToken
    */
   public org.hyperic.hq.autoinventory.ScanStateCore getScanStatusByAgentToken( int sessionID,java.lang.String agentToken ) throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.agent.AgentRemoteException, org.hyperic.hq.autoinventory.AutoinventoryException;

   /**
    * Get the contents of the AI queue.
    * @param showIgnored If true, even resources in the AI queue that have the 'ignored' flag set will be returned. By default, resources with the 'ignored' flag set are excluded when the queue is retrieved.
    * @param showPlaceholders If true, even resources in the AI queue that are unchanged with respect to appdef will be returned. By default, resources that are unchanged with respect to appdef are excluded when the queue is retrieved.
    * @param pc How the results should be sorted/paged.
    * @return A List of AIPlatformValue objects representing the contents of the autoinventory queue.
    */
   public org.hyperic.util.pager.PageList getQueue( int sessionID,boolean showIgnored,boolean showPlaceholders,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException;

   /**
    * Get the contents of the AI queue.
    * @param showIgnored If true, even resources in the AI queue that have the 'ignored' flag set will be returned. By default, resources with the 'ignored' flag set are excluded when the queue is retrieved.
    * @param showPlaceholders If true, even resources in the AI queue that are unchanged with respect to appdef will be returned. By default, resources that are unchanged with respect to appdef are excluded when the queue is retrieved.
    * @param showAlreadyProcessed If true, even resources that have already been processed (approved or not approved) will be shown.
    * @param pc How the results should be sorted/paged.
    * @return A List of AIPlatformValue objects representing the contents of the autoinventory queue.
    */
   public org.hyperic.util.pager.PageList getQueue( int sessionID,boolean showIgnored,boolean showPlaceholders,boolean showAlreadyProcessed,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException;

   /**
    * Get details on a single platform from the AI queue, by aiplatformID
    */
   public org.hyperic.hq.appdef.shared.AIPlatformValue findAIPlatformById( int sessionID,int aiplatformID ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException;

   /**
    * Get details on a single platform from the AI queue, by FQDN
    */
   public org.hyperic.hq.appdef.shared.AIPlatformValue findAIPlatformByFqdn( int sessionID,java.lang.String fqdn ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException;

   /**
    * Get details on a single server from the AI queue, by serverID
    */
   public org.hyperic.hq.appdef.shared.AIServerValue findAIServerById( int sessionID,int serverID ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException;

   /**
    * Get details on a single server from the AI queue, by name
    */
   public org.hyperic.hq.appdef.shared.AIServerValue findAIServerByName( int sessionID,java.lang.String name ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException;

   /**
    * Get details on a single ip from the AI queue, by ipID
    */
   public org.hyperic.hq.appdef.shared.AIIpValue findAIIpById( int sessionID,int ipID ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException;

   /**
    * Get details on a single ip from the AI queue, by address
    */
   public org.hyperic.hq.appdef.shared.AIIpValue findAIIpByAddress( int sessionID,java.lang.String address ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException;

   /**
    * Process queued AI resources.
    * @param platformList A List of platform IDs
    * @param serverList A List of server IDs
    * @param ipList A List of ip IDs
    * @param action One of the AIQueueConstants.Q_DECISION_XXX constants indicating what to do with the platforms, ips and servers.
    */
   public void processQueue( int sessionID,java.util.List platformList,java.util.List serverList,java.util.List ipList,int action ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.appdef.shared.AIQApprovalException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ValidationException;

   /**
    * Process queued AI resources.
    * @param id The server to enable runtime-AI for.
    * @param doEnable If true, runtime autodiscovery will be enabled, if false, it will be disabled.
    */
   public void toggleRuntimeScan( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,boolean doEnable ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.appdef.shared.AppdefGroupNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.util.config.EncodingException;

   /**
    * Find an AI Platform from an appdef platform
    */
   public org.hyperic.hq.appdef.shared.AIPlatformValue findAIPlatformByPlatformID( int sessionId,java.lang.Integer platformID ) throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.PlatformNotFoundException;

}
