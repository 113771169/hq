/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.bizapp.shared;

/**
 * Remote interface for ProductBoss.
 */
public interface ProductBoss
   extends javax.ejb.EJBObject
{
   /**
    * Get the merged config responses for group entries. This routine has the same functionality as getMergedConfigResponse, except it takes in a groupId and returns multiple configResponse objects -- 1 for each entity in the group.
    * @param productType one of ProductPlugin.TYPE_*
    * @param groupId ID of the group to get configs for
    * @param required If true, all the entities required to make a merged config response must exist. Else as many values as can be gotten are tried.
    */
   public org.hyperic.util.config.ConfigResponse[] getMergedGroupConfigResponse( int sessionId,java.lang.String productType,int groupId,boolean required )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.util.config.EncodingException, java.rmi.RemoteException;

   /**
    * Get a config response object merged through the hierarchy. All entities are merged with the product's config response, and any entity lower than them in the config stack. Config responses defining a specific attribute will override the same attribute if it was declared lower in the application stack. Only entities within the same plugin will be processed, so the most likely situation is a simple service + server + product or server + product merge. Additionally, due to restrictions in the authz model, this merge is performed as the overlord user regardless of the caller. The reason for this is that the caller may not have view access to the entire hierarchy, but still wants to view the merged configuration. This will need to be reviewed post-release
    * @param productType one of ProductPlugin.TYPE_*
    * @param id Entity to get config for
    * @param required If true, all the entities required to make a merged config response must exist. Else as many values as can be gotten are tried.
    */
   public org.hyperic.util.config.ConfigResponse getMergedConfigResponse( int sessionId,java.lang.String productType,org.hyperic.hq.appdef.shared.AppdefEntityID id,boolean required )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.util.config.EncodingException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   public org.hyperic.hq.appdef.ConfigResponseDB getConfigResponse( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   public java.lang.String getMonitoringHelp( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.util.Map props )
      throws org.hyperic.hq.product.PluginNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Get the config schema used to configure an entity. If the appropriate base entities have not yet been configured, an exception will be thrown indicating which resource must be configured.
    */
   public org.hyperic.util.config.ConfigSchema getConfigSchema( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String type,org.hyperic.util.config.ConfigResponse resp )
      throws org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.product.PluginException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   public org.hyperic.util.config.ConfigSchema getConfigSchema( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String type )
      throws org.hyperic.hq.appdef.shared.ConfigFetchException, javax.ejb.FinderException, org.hyperic.util.config.EncodingException, org.hyperic.hq.product.PluginNotFoundException, org.hyperic.hq.product.PluginException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   public org.hyperic.util.config.ConfigSchema getConfigSchema( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String type,boolean validateFlow )
      throws org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.util.config.EncodingException, org.hyperic.hq.product.PluginNotFoundException, org.hyperic.hq.product.PluginException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Set the config response for an entity/type combination. Note that setting the config response for any entity may cause a chain reaction of things to occur. For instance, agents may get updated with new measurements for entities which were affected by the configuration change.
    * @param id ID of the object to set the repsonse fo
    * @param response The response
    * @param type One of ProductPlugin.TYPE_*
    * @throws SessionTimeoutException
    * @throws SessionNotFoundException
    */
   public void setConfigResponse( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.config.ConfigResponse response,java.lang.String type )
      throws javax.ejb.FinderException, org.hyperic.hq.appdef.shared.InvalidConfigException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.util.config.EncodingException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionNotFoundException, java.rmi.RemoteException;

   /**
    * Gets the version number
    */
   public java.lang.String getVersion(  )
      throws java.rmi.RemoteException;

   /**
    * Gets the build number, date, and type.
    */
   public java.lang.String getBuildNumber(  )
      throws java.rmi.RemoteException;

   /**
    * Preload the 2nd level caches
    */
   public void preload(  )
      throws java.rmi.RemoteException;

   /**
    * Clear out all the caches
    */
   public void clearCaches( int sessionId )
      throws java.rmi.RemoteException;

   /**
    * Find {@link AttachmentDescriptor}s attached to the target type
    */
   public java.util.Collection findAttachments( int sessionId,org.hyperic.hq.hqu.server.session.AttachType type )
      throws org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Find {@link AttachmentDescriptor}s attached to the target type
    */
   public java.util.Collection findAttachments( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID ent,org.hyperic.hq.hqu.server.session.ViewResourceCategory cat )
      throws org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   public org.hyperic.hq.hqu.AttachmentDescriptor findAttachment( int sessionId,java.lang.Integer descId )
      throws org.hyperic.hq.auth.shared.SessionException, java.rmi.RemoteException;

   /**
    * Get an attachment view by ID
    */
   public org.hyperic.hq.hqu.server.session.View findViewById( int sessionId,java.lang.Integer id )
      throws java.rmi.RemoteException;

}
