/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.bizapp.shared;

/**
 * Remote interface for DashboardPortletBoss.
 */
public interface DashboardPortletBoss
   extends javax.ejb.EJBObject
{

   public org.json.JSONArray getMeasurementData( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer resId,java.lang.Integer mtid,org.hyperic.hq.appdef.shared.AppdefEntityTypeID ctype,long begin,long end )
      throws org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   public org.json.JSONObject getAllGroups( org.hyperic.hq.authz.server.session.AuthzSubject subj )
      throws org.hyperic.hq.authz.shared.PermissionException, org.json.JSONException, java.rmi.RemoteException;

   public org.json.JSONObject getAlertCounts( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.util.List groupIds,org.hyperic.hibernate.PageInfo pageInfo )
      throws org.hyperic.hq.authz.shared.PermissionException, org.json.JSONException, javax.ejb.FinderException, java.rmi.RemoteException;

   /**
    * Check for createPlatform permission for a resource
    * @param subject
    * @throws PermissionException
    */
   public void checkCreatePlatformPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject )
      throws org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Check for modify permission for a given resource
    */
   public void checkModifyPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Check for view permission for a given resource
    */
   public void checkViewPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Check for control permission for a given resource
    */
   public void checkControlPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Check for control permission for a given resource
    */
   public void checkRemovePermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Check for monitor permission for a given resource
    */
   public void checkMonitorPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Check for manage alerts permission for a given resource
    */
   public void checkAlertingPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Check the scope of alertable resources for a give subject
    * @return a list of AppdefEntityIds
    */
   public java.util.List checkAlertingScope( org.hyperic.hq.authz.server.session.AuthzSubject subj )
      throws java.rmi.RemoteException;

   /**
    * Check for create child object permission for a given resource Child Resources: Platforms -> servers Servers -> services Any other resource will throw an InvalidAppdefTypeException since no other resources have this parent->child relationship with respect to their permissions
    * @param subject
    * @param id - what
    * @param subject - who
    */
   public void checkCreateChildPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Get the AppdefResourcePermissions for a given resource
    * @deprecated Use the individual check*Permission methods instead.    */
   public org.hyperic.hq.appdef.shared.AppdefResourcePermissions getResourcePermissions( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.shared.AppdefEntityID eid )
      throws javax.ejb.FinderException, java.rmi.RemoteException;

   /**
    * Change appdef entity owner
    */
   public void changeOwner( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.server.session.AppdefResource res,org.hyperic.hq.authz.server.session.AuthzSubject newOwner )
      throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServerNotFoundException, java.rmi.RemoteException;

}
