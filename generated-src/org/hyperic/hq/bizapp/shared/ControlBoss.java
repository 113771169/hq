/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.bizapp.shared;

/**
 * Remote interface for ControlBoss.
 */
public interface ControlBoss
   extends javax.ejb.EJBObject
{
   /**
    * Execute a control action immediately on an appdef entity.
    * @param action The action to perform    */
   public void doAction( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String action,java.lang.String args )
      throws org.hyperic.hq.product.PluginException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Execute a control action This is used for doing scheduled control actions.
    * @param controlJob The control job action name
    * @param schedule The control job schedule    */
   public void doAction( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String action,org.hyperic.hq.scheduler.ScheduleValue schedule )
      throws org.hyperic.hq.product.PluginException, org.quartz.SchedulerException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.common.ApplicationException, java.rmi.RemoteException;

   /**
    * Schedule a control action on a group entity.
    * @param action The action to perform    */
   public void doGroupAction( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID groupEnt,java.lang.String action,int[] orderSpec,org.hyperic.hq.scheduler.ScheduleValue schedule )
      throws org.hyperic.hq.product.PluginException, org.quartz.SchedulerException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.common.ApplicationException, java.rmi.RemoteException;

   /**
    * Execute a control action immediately on a group entity.
    * @param action The action to perform    */
   public void doGroupAction( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID groupEnt,java.lang.String action,java.lang.String args,int[] orderSpec )
      throws org.hyperic.hq.product.PluginException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, java.rmi.RemoteException;

   /**
    * Get the actions supported for an appdef entity
    */
   public java.util.List getActions( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.product.PluginNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, java.rmi.RemoteException;

   /**
    * Get the actions supported for an appdef entity type
    */
   public java.util.List getActions( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityTypeID aetid )
      throws org.hyperic.hq.product.PluginNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Check if a group has been enabled for control
    */
   public boolean isGroupControlEnabled( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Check if the entity's resource supports control
    */
   public boolean isControlSupported( int sessionId,org.hyperic.hq.appdef.shared.AppdefResourceValue res )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Check if the entity's resource supports control
    */
   public boolean isControlSupported( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityTypeID tid )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Check if anything has been enabled for control
    */
   public boolean isControlEnabled( int sessionId )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Check if an entity has been enabled for control
    */
   public boolean isControlEnabled( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Finder for all of the scheduled jobs for an appdef entity.
    * @return List of scheduled actions    */
   public org.hyperic.util.pager.PageList findScheduledJobs( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.product.PluginException, org.hyperic.hq.control.shared.ScheduledJobNotFoundException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Remove all of the scheduled jobs for an appdef entity.
    */
   public void removeScheduledJobs( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.control.shared.ScheduledJobRemoveException, java.rmi.RemoteException;

   /**
    * Get a job history based on appdef id
    * @TODO Implement page controls, Authz integration    */
   public org.hyperic.util.pager.PageList findJobHistory( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.product.PluginException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Group job history detail on group appdef id
    */
   public org.hyperic.util.pager.PageList findGroupJobHistory( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id,int batchJobId,org.hyperic.util.pager.PageControl pc )
      throws org.hyperic.hq.product.PluginException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefGroupNotFoundException, java.rmi.RemoteException;

   /**
    * Remove an entry from the control history
    * @TODO Authz integration    */
   public void deleteJobHistory( int sessionId,java.lang.Integer[] ids )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Obtain the current action that is being executed. If there is no current running action, null is returned.
    * @return currently running ControlJob.    */
   public org.hyperic.hq.control.server.session.ControlHistory getCurrentJob( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Obtain a control action based on job id
    * @return last ControlJob that ran    */
   public org.hyperic.hq.control.server.session.ControlHistory getJobByJobId( int sessionId,java.lang.Integer id )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Obtain the last control action that fired
    * @return last ControlJob that ran    */
   public org.hyperic.hq.control.server.session.ControlHistory getLastJob( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID id )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Obtain a ControlJob based on an id
    * @param triggerName The control trigger name
    * @return The control job that was requested    */
   public org.hyperic.hq.control.server.session.ControlSchedule getControlJob( int sessionId,java.lang.Integer id )
      throws org.hyperic.hq.product.PluginException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Delete a ControlJob based on an id
    * @param ids Array of job ids to be deleted    */
   public void deleteControlJob( int sessionId,java.lang.Integer[] ids )
      throws org.hyperic.hq.product.PluginException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Get a list of recent control actions in decending order
    */
   public org.hyperic.util.pager.PageList getRecentControlActions( int sessionId,int rows,long window )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Get a list of recent control actions in decending order. Called by RSS feed so it does not require valid session ID.
    * @throws ApplicationException if user is not found
    * @throws LoginException if user account has been disabled
    */
   public org.hyperic.util.pager.PageList getRecentControlActions( java.lang.String user,int rows,long window )
      throws javax.security.auth.login.LoginException, org.hyperic.hq.common.ApplicationException, java.rmi.RemoteException;

   /**
    * Get a list of pending control actions in decending order
    */
   public org.hyperic.util.pager.PageList getPendingControlActions( int sessionId,int rows )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Get a list of most active control operations
    */
   public org.hyperic.util.pager.PageList getOnDemandControlFrequency( int sessionId,int numToReturn )
      throws org.hyperic.hq.common.ApplicationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.common.ApplicationException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Accept an array of appdef entity Ids and verify control permission on each entity for specified subject. Return an array containing the set or subset of entities where subject has control authorization.
    * @return List of entities that are control authorized.
    */
   public java.util.List batchCheckControlPermissions( int sessionId,org.hyperic.hq.appdef.shared.AppdefEntityID[] entities )
      throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, java.rmi.RemoteException;

   /**
    * Find types of all controllable platforms defined in the system.
    * @return A map of PlatformType names and AppdefEntityTypeIDs.
    * @throws PermissionException
    */
   public java.util.Map findControllablePlatformTypes( int sessionID )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Find types of all controllable servers defined in the system.
    * @return A map of ServerType names and AppdefEntityTypeIDs.
    * @throws PermissionException
    */
   public java.util.Map findControllableServerTypes( int sessionID )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Find types of all controllable services defined in the system.
    * @return A map of ServiceType names and AppdefEntityTypeIDs.
    * @throws PermissionException
    */
   public java.util.Map findControllableServiceTypes( int sessionID )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionTimeoutException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

   /**
    * Find names of all controllable resources of a given type.
    * @return A map of Service names and AppdefEntityIDs.
    * @throws PermissionException
    */
   public java.util.Map findControllableResourceNames( int sessionID,org.hyperic.hq.appdef.shared.AppdefEntityTypeID aetid )
      throws org.hyperic.hq.auth.shared.SessionNotFoundException, org.hyperic.hq.auth.shared.SessionException, org.hyperic.hq.authz.shared.PermissionException, java.rmi.RemoteException;

}
