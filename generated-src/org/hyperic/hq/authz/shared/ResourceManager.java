/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.authz.shared;

/**
 * Local interface for ResourceManager.
 */
public interface ResourceManager
 
{
   /**
    * Find the type that has the given name.
    * @param name The name of the type you're looking for.
    * @return The value-object of the type of the given name.
    * @throws FinderException Unable to find a given or dependent entities.
    */
   public org.hyperic.hq.authz.server.session.ResourceType findResourceTypeByName( java.lang.String name ) throws javax.ejb.FinderException;

   /**
    * Find a resource, acting as a resource prototype.
    */
   public org.hyperic.hq.authz.server.session.Resource findResourcePrototypeByName( java.lang.String name ) ;

   /**
    * Check if there are any resources of a given type
    */
   public boolean resourcesExistOfType( java.lang.String typeName ) ;

   /**
    * Create a resource.
    */
   public org.hyperic.hq.authz.server.session.Resource createResource( org.hyperic.hq.authz.server.session.AuthzSubject owner,org.hyperic.hq.authz.server.session.ResourceType rt,org.hyperic.hq.authz.server.session.Resource prototype,java.lang.Integer instanceId,java.lang.String name,boolean system,org.hyperic.hq.authz.server.session.Resource parent ) ;

   /**
    * Move a resource. It is the responsibility of the caller (AppdefManager) to ensure that this resource can be moved to the destination. It's also of note that this method only deals with relinking resource edges to the ancestors of the destination resource. This means that in the case of Server moves, it's up to the caller to re-link dependent chilren.
    */
   public void moveResource( org.hyperic.hq.authz.server.session.AuthzSubject owner,org.hyperic.hq.authz.server.session.Resource target,org.hyperic.hq.authz.server.session.Resource destination ) ;

   /**
    * Get the # of resources within HQ inventory
    */
   public java.lang.Number getResourceCount(  ) ;

   /**
    * Get the # of resource types within HQ inventory
    */
   public java.lang.Number getResourceTypeCount(  ) ;

   /**
    * Get the Resource entity associated with this ResourceType.
    * @param type This ResourceType.
    */
   public org.hyperic.hq.authz.server.session.Resource getResourceTypeResource( java.lang.Integer typeId ) ;

   /**
    * Find the Resource that has the given instance ID and ResourceType.
    * @param type The ResourceType of the Resource you're looking for.
    * @param instanceId Your ID for the resource you're looking for.
    * @return The value-object of the Resource of the given ID.
    */
   public org.hyperic.hq.authz.server.session.Resource findResourceByInstanceId( org.hyperic.hq.authz.server.session.ResourceType type,java.lang.Integer instanceId ) ;

   public org.hyperic.hq.authz.server.session.Resource findResourceByInstanceId( java.lang.Integer typeId,java.lang.Integer instanceId ) ;

   /**
    * Find's the root (id=0) resource
    */
   public org.hyperic.hq.authz.server.session.Resource findRootResource(  ) ;

   public org.hyperic.hq.authz.server.session.Resource findResourceById( java.lang.Integer id ) ;

   /**
    * Find the Resource that has the given instance ID and ResourceType name.
    * @param type The ResourceType of the Resource you're looking for.
    * @param instanceId Your ID for the resource you're looking for.
    * @return The value-object of the Resource of the given ID.
    */
   public org.hyperic.hq.authz.server.session.Resource findResourceByTypeAndInstanceId( java.lang.String type,java.lang.Integer instanceId ) ;

   public org.hyperic.hq.authz.server.session.Resource findResource( org.hyperic.hq.appdef.shared.AppdefEntityID aeid ) ;

   public org.hyperic.hq.authz.server.session.Resource findResourcePrototype( org.hyperic.hq.appdef.shared.AppdefEntityTypeID id ) ;

   /**
    * Removes the specified resource by nulling out its resourceType. Will not null the resourceType of the resource which is passed in. These resources need to be cleaned up eventually by {@link AppdefBossEJBImpl.removeDeletedResources}. This may be done in the background via zevent by issuing a {@link ResourcesCleanupZevent}.
    * @see {@link AppdefBossEJBImpl.removeDeletedResources}
    * @see {@link ResourcesCleanupZevent}
    * @param r {@link Resource} resource to be removed.
    * @param nullResourceType tells the method to null out the resourceType
    * @return AppdefEntityID[] - an array of the resources (including children) deleted
    */
   public org.hyperic.hq.appdef.shared.AppdefEntityID[] removeResourcePerms( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.authz.server.session.Resource r,boolean nullResourceType ) throws org.hyperic.hq.common.VetoException, org.hyperic.hq.authz.shared.PermissionException;

   public void _removeResource( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.authz.server.session.Resource r,boolean nullResourceType ) ;

   public void removeResource( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.Resource r ) throws org.hyperic.hq.common.VetoException;

   public void setResourceOwner( org.hyperic.hq.authz.server.session.AuthzSubject whoami,org.hyperic.hq.authz.server.session.Resource resource,org.hyperic.hq.authz.server.session.AuthzSubject newOwner ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get all the resource types
    * @param subject
    * @param pc Paging information for the request
    */
   public java.util.List getAllResourceTypes( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.util.pager.PageControl pc ) ;

   /**
    * Get viewable resources either by "type" OR "resource name" OR "type AND resource name".
    * @param subject
    * @return Map of resource values
    */
   public java.util.List findViewableInstances( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String typeName,java.lang.String resName,java.lang.String appdefTypeStr,java.lang.Integer typeId,org.hyperic.util.pager.PageControl pc ) ;

   /**
    * Get viewable resources by "type" OR "resource name"
    * @param subject
    * @return Map of resource values
    */
   public org.hyperic.util.pager.PageList findViewables( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String searchFor,org.hyperic.util.pager.PageControl pc ) ;

   /**
    * Get viewable resources either by "type" OR "resource name" OR "type AND resource name".
    * @param subject
    * @return Map of resource values
    */
   public java.util.Map findAllViewableInstances( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * Find all the resources which are descendents of the given resource
    */
   public java.util.List findResourcesByParent( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.Resource res ) ;

   /**
    * Find all the resources of an authz resource type
    * @param resourceType 301 for platforms, etc.
    * @param pInfo A pager, using a sort field of {@link ResourceSortField}
    * @return a list of {@link Resource}s
    */
   public java.util.List findResourcesOfType( int resourceType,org.hyperic.hibernate.PageInfo pInfo ) ;

   /**
    * Find all the resources which have the specified prototype
    * @return a list of {@link Resource}s
    */
   public java.util.List findResourcesOfPrototype( org.hyperic.hq.authz.server.session.Resource proto,org.hyperic.hibernate.PageInfo pInfo ) ;

   /**
    * Get all resources which are prototypes of platforms, servers, and services and have a resource of that type in the inventory.
    */
   public java.util.List findAppdefPrototypes(  ) ;

   /**
    * Get all resources which are prototypes of platforms, servers, and services.
    */
   public java.util.List findAllAppdefPrototypes(  ) ;

   /**
    * Get viewable service resources. Service resources include individual cluster unassigned services as well as service clusters.
    * @param subject
    * @param pc control
    * @return PageList of resource values
    */
   public org.hyperic.util.pager.PageList findViewableSvcResources( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String resourceName,org.hyperic.util.pager.PageControl pc ) ;

   /**
    * Gets all the Resources owned by the given Subject.
    * @param subject The owner.
    * @return Array of resources owned by the given subject.
    */
   public java.util.Collection findResourceByOwner( org.hyperic.hq.authz.server.session.AuthzSubject owner ) ;

   public java.util.Collection findResourceEdges( org.hyperic.hq.authz.server.session.ResourceRelation relation,org.hyperic.hq.authz.server.session.Resource parent ) ;

   public boolean isResourceChildOf( org.hyperic.hq.authz.server.session.Resource parent,org.hyperic.hq.authz.server.session.Resource child ) ;

   public java.util.List findResourceEdges( org.hyperic.hq.authz.server.session.ResourceRelation relation,java.lang.Integer resourceId,java.util.List<Integer> platformTypeIds,java.lang.String platformName ) ;

   public void createResourceEdges( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.ResourceRelation relation,org.hyperic.hq.appdef.shared.AppdefEntityID parent,org.hyperic.hq.appdef.shared.AppdefEntityID[] children ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.authz.shared.ResourceEdgeCreateException;

   public void createResourceEdges( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.ResourceRelation relation,org.hyperic.hq.appdef.shared.AppdefEntityID parent,org.hyperic.hq.appdef.shared.AppdefEntityID[] children,boolean deleteExisting ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.authz.shared.ResourceEdgeCreateException;

   public void removeResourceEdges( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.ResourceRelation relation,org.hyperic.hq.appdef.shared.AppdefEntityID parent,org.hyperic.hq.appdef.shared.AppdefEntityID[] children ) throws org.hyperic.hq.authz.shared.PermissionException;

   public void removeResourceEdges( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.ResourceRelation relation,org.hyperic.hq.authz.server.session.Resource parent ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Find the subject that has the given name and authentication source.
    * @param name Name of the subject.
    * @param authDsn DSN of the authentication source. Authentication sources are defined externally.
    * @return The value-object of the subject of the given name and authenticating source.
    */
   public org.hyperic.hq.authz.server.session.AuthzSubject findSubjectByAuth( java.lang.String name,java.lang.String authDsn ) throws org.hyperic.hq.auth.shared.SubjectNotFoundException;

   public org.hyperic.hq.authz.server.session.ResourceRelation getContainmentRelation(  ) ;

   public org.hyperic.hq.authz.server.session.ResourceRelation getNetworkRelation(  ) ;

}
