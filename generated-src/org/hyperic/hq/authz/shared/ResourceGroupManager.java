/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.authz.shared;

/**
 * Local interface for ResourceGroupManager.
 */
public interface ResourceGroupManager
 
{
   /**
    * Create a resource group. Currently no permission checking.
    * @param roles List of {@link Role}s
    * @param resources List of {@link Resource}s
    */
   public org.hyperic.hq.authz.server.session.ResourceGroup createResourceGroup( org.hyperic.hq.authz.server.session.AuthzSubject whoami,org.hyperic.hq.authz.server.session.ResourceGroup.ResourceGroupCreateInfo cInfo,java.util.Collection roles,java.util.Collection resources ) throws org.hyperic.hq.authz.shared.GroupCreationException, org.hyperic.hq.grouping.shared.GroupDuplicateNameException;

   /**
    * Find the group that has the given ID. Performs authz checking
    * @param whoami user requesting to find the group
    * @return {@link ResourceGroup} or null if it does not exist XXX scottmf, why is this method called find() but calls dao.get()???
    */
   public org.hyperic.hq.authz.server.session.ResourceGroup findResourceGroupById( org.hyperic.hq.authz.server.session.AuthzSubject whoami,java.lang.Integer id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Find the group that has the given ID. Does not do any authz checking
    */
   public org.hyperic.hq.authz.server.session.ResourceGroup findResourceGroupById( java.lang.Integer id ) ;

   /**
    * Find the role that has the given name.
    * @param whoami user requesting to find the group
    * @param name The name of the role you're looking for.
    * @return The value-object of the role of the given name.
    * @throws PermissionException whoami does not have viewResourceGroup on the requested group
    */
   public org.hyperic.hq.authz.server.session.ResourceGroup findResourceGroupByName( org.hyperic.hq.authz.server.session.AuthzSubject whoami,java.lang.String name ) throws org.hyperic.hq.authz.shared.PermissionException;

   public java.util.Collection findDeletedGroups(  ) ;

   /**
    * Update some of the fundamentals of groups (name, description, location). If name, description or location are null, the associated properties of the passed group will not change.
    * @throws DuplicateObjectException if an attempt to rename the group would result in a group with the same name.
    */
   public void updateGroup( org.hyperic.hq.authz.server.session.AuthzSubject whoami,org.hyperic.hq.authz.server.session.ResourceGroup group,java.lang.String name,java.lang.String description,java.lang.String location ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.grouping.shared.GroupDuplicateNameException;

   /**
    * Remove all groups compatable with the specified resource prototype.
    * @throws VetoException if another subsystem cannot allow it (for constraint reasons)
    */
   public void removeGroupsCompatibleWith( org.hyperic.hq.authz.server.session.Resource proto ) throws org.hyperic.hq.common.VetoException;

   /**
    * Delete the specified ResourceGroup.
    * @param whoami The current running user.
    * @param group The group to delete.
    */
   public void removeResourceGroup( org.hyperic.hq.authz.server.session.AuthzSubject whoami,org.hyperic.hq.authz.server.session.ResourceGroup group ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.common.VetoException;

   public void addResources( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.authz.server.session.ResourceGroup group,java.util.List resources ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Add a resource to a group by resource id and resource type
    */
   public org.hyperic.hq.authz.server.session.ResourceGroup addResource( org.hyperic.hq.authz.server.session.AuthzSubject whoami,org.hyperic.hq.authz.server.session.ResourceGroup group,org.hyperic.hq.authz.server.session.Resource resource ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * RemoveResources from a group.
    * @param whoami The current running user.
    * @param group The group .
    */
   public void removeResources( org.hyperic.hq.authz.server.session.AuthzSubject whoami,org.hyperic.hq.authz.server.session.ResourceGroup group,java.util.Collection resources ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Sets the criteria list for this group.
    * @param whoami The current running user.
    * @param group This group.
    * @param critters List of critters to associate with this resource group.
    * @throws PermissionException whoami does not own the resource.
    * @throws GroupException critters is not a valid list of criteria.
    */
   public void setCriteria( org.hyperic.hq.authz.server.session.AuthzSubject whoami,org.hyperic.hq.authz.server.session.ResourceGroup group,org.hyperic.hq.grouping.CritterList critters ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.grouping.GroupException;

   /**
    * Change the resource contents of a group to the specified list of resources.
    * @param resources A list of {@link Resource}s to be in the group
    */
   public void setResources( org.hyperic.hq.authz.server.session.AuthzSubject whoami,org.hyperic.hq.authz.server.session.ResourceGroup group,java.util.Collection resources ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * List the resources in this group that the caller is authorized to see.
    * @param whoami The current running user.
    * @param groupValue This group.
    * @param pc Paging information for the request
    * @return list of authorized resources in this group.
    */
   public java.util.Collection getResources( org.hyperic.hq.authz.server.session.AuthzSubject whoami,java.lang.Integer id ) ;

   /**
    * Get all the resource groups including the root resource group.
    */
   public java.util.List getAllResourceGroups( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.authz.shared.PermissionException, javax.ejb.FinderException;

   /**
    * Get all the members of a group.
    * @return {@link Resource}s
    */
   public java.util.Collection getMembers( org.hyperic.hq.authz.server.session.ResourceGroup g ) ;

   /**
    * Get the member type counts of a group
    */
   public java.util.Map getMemberTypes( org.hyperic.hq.authz.server.session.ResourceGroup g ) ;

   /**
    * Get all the groups a resource belongs to
    * @return {@link ResourceGroup}s
    */
   public java.util.Collection getGroups( org.hyperic.hq.authz.server.session.Resource r ) ;

   /**
    * Get the # of groups within HQ inventory
    */
   public java.lang.Number getGroupCount(  ) ;

   /**
    * Returns true if the passed resource is a member of the given group.
    */
   public boolean isMember( org.hyperic.hq.authz.server.session.ResourceGroup group,org.hyperic.hq.authz.server.session.Resource resource ) ;

   /**
    * Get the # of members in a group
    */
   public int getNumMembers( org.hyperic.hq.authz.server.session.ResourceGroup g ) ;

   /**
    * Temporary method to convert a ResourceGroup into an AppdefGroupValue
    */
   public org.hyperic.hq.appdef.shared.AppdefGroupValue getGroupConvert( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.authz.server.session.ResourceGroup g ) ;

   public org.hyperic.hq.appdef.server.session.AppdefResourceType getAppdefResourceType( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.ResourceGroup group ) ;

   /**
    * Get a list of {@link ResourceGroup}s which are compatable with the specified prototype. Do not return any groups contained within 'excludeGroups' (a list of {@link ResourceGroup}s
    * @param prototype If specified, the resulting groups must be compatable with the prototype.
    * @param pInfo Pageinfo with a sort field of type {@link ResourceGroupSortField}
    */
   public org.hyperic.util.pager.PageList findGroupsNotContaining( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.Resource member,org.hyperic.hq.authz.server.session.Resource prototype,java.util.Collection excGrps,org.hyperic.hibernate.PageInfo pInfo ) ;

   /**
    * Get a list of {@link ResourceGroup}s which are compatible with the specified prototype. Do not return any groups contained within 'excludeGroups' (a list of {@link ResourceGroup}s
    * @param prototype If specified, the resulting groups must be compatible with the prototype.
    * @param pInfo Pageinfo with a sort field of type {@link ResourceGroupSortField}
    */
   public org.hyperic.util.pager.PageList findGroupsContaining( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.Resource member,java.util.Collection excludeGroups,org.hyperic.hibernate.PageInfo pInfo ) ;

   /**
    * Get all the resource groups excluding the root resource group.
    */
   public java.util.Collection getAllResourceGroups( org.hyperic.hq.authz.server.session.AuthzSubject subject,boolean excludeRoot ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get all {@link ResourceGroup}s
    */
   public java.util.Collection getAllResourceGroups(  ) ;

   /**
    * Get all compatible resource groups of the given entity type and resource type.
    */
   public java.util.Collection getCompatibleResourceGroups( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.Resource resProto ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the resource groups with the specified ids
    * @param ids the resource group ids
    * @param pc Paging information for the request
    */
   public org.hyperic.util.pager.PageList getResourceGroupsById( org.hyperic.hq.authz.server.session.AuthzSubject whoami,java.lang.Integer[] ids,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.authz.shared.PermissionException, javax.ejb.FinderException;

   /**
    * Change owner of a group.
    */
   public void changeGroupOwner( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.ResourceGroup group,org.hyperic.hq.authz.server.session.AuthzSubject newOwner ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get a ResourceGroup owner's AuthzSubjectValue
    * @param gid The group id
    * @exception FinderException Unable to find a group by id
    */
   public org.hyperic.hq.authz.server.session.AuthzSubject getResourceGroupOwner( java.lang.Integer gid ) throws javax.ejb.FinderException;

   public org.hyperic.hq.authz.server.session.ResourceGroup getResourceGroupByResource( org.hyperic.hq.authz.server.session.Resource resource ) ;

   /**
    * Set a ResourceGroup modifiedBy attribute
    * @param whoami user requesting to find the group
    * @param id The ID of the role you're looking for.
    */
   public void setGroupModifiedBy( org.hyperic.hq.authz.server.session.AuthzSubject whoami,java.lang.Integer id ) ;

   public void updateGroupType( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.ResourceGroup g,int groupType,int groupEntType,int groupEntResType ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the maximum collection interval for a scheduled metric within a compatible group of resources.
    * @return The maximum collection time in milliseconds. TODO: This does not belong here. Evict, evict! -- JMT 04/01/08
    */
   public long getMaxCollectionInterval( org.hyperic.hq.authz.server.session.ResourceGroup g,java.lang.Integer templateId ) ;

   /**
    * Return a List of Measurements that are collecting for the given template ID and group.
    * @param g The group in question.
    * @param templateId The measurement template to query.
    * @return templateId A list of Measurement objects with the given template id in the group that are set to be collected. TODO: This does not belong here. Evict, evict! -- JMT 04/01/08
    */
   public java.util.List getMetricsCollecting( org.hyperic.hq.authz.server.session.ResourceGroup g,java.lang.Integer templateId ) ;

   /**
    * Find the subject that has the given name and authentication source.
    * @param name Name of the subject.
    * @param authDsn DSN of the authentication source. Authentication sources are defined externally.
    * @return The value-object of the subject of the given name and authenticating source.
    */
   public org.hyperic.hq.authz.server.session.AuthzSubject findSubjectByAuth( java.lang.String name,java.lang.String authDsn ) throws org.hyperic.hq.auth.shared.SubjectNotFoundException;

   public org.hyperic.hq.authz.server.session.ResourceRelation getContainmentRelation(  ) ;

   public org.hyperic.hq.authz.server.session.ResourceRelation getNetworkRelation(  ) ;

}
