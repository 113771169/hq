/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.appdef.shared;

/**
 * Local interface for AppdefStatManager.
 */
public interface AppdefStatManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * <p>Return map of platform counts.</p>
    */
   public java.util.Map getPlatformCountsByTypeMap( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * <p>Return platforms count.</p>
    */
   public int getPlatformsCount( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * <p>Return map of server counts.</p>
    */
   public java.util.Map getServerCountsByTypeMap( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * <p>Return servers count.</p>
    */
   public int getServersCount( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * <p>Return map of service counts.</p>
    */
   public java.util.Map getServiceCountsByTypeMap( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * <p>Return services count.</p>
    */
   public int getServicesCount( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * <p>Return map of app counts.</p>
    */
   public java.util.Map getApplicationCountsByTypeMap( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * <p>Return apps count.</p>
    */
   public int getApplicationsCount( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * <p>Return map of grp counts.</p>
    */
   public java.util.Map getGroupCountsMap( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * Method for determining whether or not to show a nav map (this is a temporary method)
    */
   public boolean isNavMapSupported(  ) ;

   /**
    * <p>Return directly connected resource tree for node level platform</p>
    */
   public org.hyperic.hq.bizapp.shared.uibeans.ResourceTreeNode[] getNavMapDataForPlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platformId ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * <p>Return directly connected resource tree for node level server</p>
    */
   public org.hyperic.hq.bizapp.shared.uibeans.ResourceTreeNode[] getNavMapDataForServer( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serverId ) throws org.hyperic.hq.appdef.shared.ServerNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * <p>Return directly connected resource tree for node level service</p>
    */
   public org.hyperic.hq.bizapp.shared.uibeans.ResourceTreeNode[] getNavMapDataForService( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serviceId ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * <p>Return directly connected resource tree for node level service</p>
    */
   public org.hyperic.hq.bizapp.shared.uibeans.ResourceTreeNode[] getNavMapDataForApplication( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer appId ) throws org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * <p>Return resources for autogroups</p>
    */
   public org.hyperic.hq.bizapp.shared.uibeans.ResourceTreeNode[] getNavMapDataForAutoGroup( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID[] parents,java.lang.Integer resType ) throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * <p>Return resources for groups (not autogroups)</p>
    */
   public org.hyperic.hq.bizapp.shared.uibeans.ResourceTreeNode[] getNavMapDataForGroup( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer groupId ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for createPlatform permission for a resource
    * @param subject
    * @throws PermissionException
    */
   public void checkCreatePlatformPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for modify permission for a given resource
    */
   public void checkModifyPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for view permission for a given resource
    */
   public void checkViewPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkControlPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkRemovePermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for monitor permission for a given resource
    */
   public void checkMonitorPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for manage alerts permission for a given resource
    */
   public void checkAlertingPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check the scope of alertable resources for a give subject
    * @return a list of AppdefEntityIds
    */
   public java.util.List checkAlertingScope( org.hyperic.hq.authz.server.session.AuthzSubject subj ) ;

   /**
    * Check for create child object permission for a given resource Child Resources: Platforms -> servers Servers -> services Any other resource will throw an InvalidAppdefTypeException since no other resources have this parent->child relationship with respect to their permissions
    * @param subject
    * @param id - what
    * @param subject - who
    */
   public void checkCreateChildPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the AppdefResourcePermissions for a given resource
    * @deprecated Use the individual check*Permission methods instead.    */
   public org.hyperic.hq.appdef.shared.AppdefResourcePermissions getResourcePermissions( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.shared.AppdefEntityID eid ) throws javax.ejb.FinderException;

   /**
    * Change appdef entity owner
    */
   public void changeOwner( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.server.session.AppdefResource res,org.hyperic.hq.authz.server.session.AuthzSubject newOwner ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServerNotFoundException;

}
