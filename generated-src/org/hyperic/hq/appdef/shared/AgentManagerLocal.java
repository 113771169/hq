/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.appdef.shared;

/**
 * Local interface for AgentManager.
 */
public interface AgentManagerLocal
   extends javax.ejb.EJBLocalObject
{

   public void removeAgentStatus( org.hyperic.hq.appdef.Agent agent ) ;

   public void removeAgent( org.hyperic.hq.appdef.Agent agent ) ;

   /**
    * Get a list of all the entities which can be serviced by an Agent.
    */
   public org.hyperic.hq.appdef.shared.resourceTree.ResourceTree getEntitiesForAgent( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String agentToken ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get a paged list of agents in the system.
    * @param pInfo a pager object, with an {@link AgentSortField} sort field
    * @return a list of {@link Agent}s
    */
   public java.util.List findAgents( org.hyperic.hibernate.PageInfo pInfo ) ;

   /**
    * Get a list of all the agents in the system
    */
   public java.util.List getAgents(  ) ;

   /**
    * Get a count of all the agents in the system
    */
   public int getAgentCount(  ) ;

   /**
    * Get a count of the agents which are actually used (i.e. have platforms)
    */
   public int getAgentCountUsed(  ) ;

   /**
    * Create a new Agent object. The type of the agent that is created is the 'hyperic-hq-remoting' agent. This type of agent may be configured to use either a bidirectional or unidirectional transport.
    */
   public org.hyperic.hq.appdef.Agent createNewTransportAgent( java.lang.String address,java.lang.Integer port,java.lang.String authToken,java.lang.String agentToken,java.lang.String version,boolean unidirectional ) throws org.hyperic.hq.appdef.shared.AgentCreateException;

   /**
    * Create a new Agent object. The type of the agent that is created is the legacy 'covalent-eam' type.
    */
   public org.hyperic.hq.appdef.Agent createLegacyAgent( java.lang.String address,java.lang.Integer port,java.lang.String authToken,java.lang.String agentToken,java.lang.String version ) throws org.hyperic.hq.appdef.shared.AgentCreateException;

   /**
    * Update an existing Agent given the old agent token. The auth token will be reset. The type of the agent that is updated is the 'hyperic-hq-remoting' agent. This type of agent may be configured to use either a bidirectional or unidirectional transport.
    * @return An Agent object representing the updated agent    */
   public org.hyperic.hq.appdef.Agent updateNewTransportAgent( java.lang.String agentToken,java.lang.String ip,int port,java.lang.String authToken,java.lang.String version,boolean unidirectional ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Update an existing Agent given the old agent token. The auth token will be reset. The type of the agent that is updated is the legacy 'covalent-eam' type.
    * @return An Agent object representing the updated agent    */
   public org.hyperic.hq.appdef.Agent updateLegacyAgent( java.lang.String agentToken,java.lang.String ip,int port,java.lang.String authToken,java.lang.String version ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Update an existing Agent given an IP and port. The type of the agent that is updated is the 'hyperic-hq-remoting' agent. This type of agent may be configured to use either a bidirectional or unidirectional transport.
    * @return An Agent object representing the updated agent    */
   public org.hyperic.hq.appdef.Agent updateNewTransportAgent( java.lang.String ip,int port,java.lang.String authToken,java.lang.String agentToken,java.lang.String version,boolean unidirectional ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Update an existing Agent given an IP and port. The type of the agent that is updated is the legacy 'covalent-eam' type.
    * @return An Agent object representing the updated agent    */
   public org.hyperic.hq.appdef.Agent updateLegacyAgent( java.lang.String ip,int port,java.lang.String authToken,java.lang.String agentToken,java.lang.String version ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException;

   public java.util.List findAgentsByIP( java.lang.String ip ) ;

   /**
    * Update an existing agent's IP and port based on an agent token. The type of the agent that is updated is the 'hyperic-hq-remoting' agent. This type of agent may be configured to use either a bidirectional or unidirectional transport.
    * @param agentToken Token that the agent uses to connect to HQ
    * @param ip The new IP address
    * @param port The new port
    * @return An Agent object representing the updated agent    */
   public org.hyperic.hq.appdef.Agent updateNewTransportAgent( java.lang.String agentToken,java.lang.String ip,int port,boolean unidirectional ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Update an existing agent's IP and port based on an agent token. The type of the agent that is updated is the legacy 'covalent-eam' type.
    * @param agentToken Token that the agent uses to connect to HQ
    * @param ip The new IP address
    * @param port The new port
    * @return An Agent object representing the updated agent    */
   public org.hyperic.hq.appdef.Agent updateLegacyAgent( java.lang.String agentToken,java.lang.String ip,int port ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Find an agent by the token which is Required for the agent to send when it connects.
    */
   public void checkAgentAuth( java.lang.String agentToken ) throws org.hyperic.hq.appdef.shared.AgentUnauthorizedException;

   public org.hyperic.hq.appdef.server.session.AgentConnections.AgentConnection getAgentConnection( java.lang.String method,java.lang.String connIp,java.lang.Integer agentId ) ;

   public void disconnectAgent( org.hyperic.hq.appdef.server.session.AgentConnections.AgentConnection a ) ;

   public java.util.Collection getConnectedAgents(  ) ;

   public int getNumConnectedAgents(  ) ;

   public long getTotalConnectedAgents(  ) ;

   /**
    * Find an agent listening on a specific IP & port
    */
   public org.hyperic.hq.appdef.Agent getAgent( java.lang.String ip,int port ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Find an agent by agent token.
    * @param agentToken the agent token to look for
    * @return An Agent representing the agent that has the given token.
    */
   public org.hyperic.hq.appdef.Agent getAgent( java.lang.String agentToken ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Determine if the agent token is already assigned to another agent.
    * @param agentToken The agent token.
    * @return <code>true</code> if the agent token is unique; <code>false</code> if it is already assigned to an agent.
    */
   public boolean isAgentTokenUnique( java.lang.String agentToken ) ;

   public org.hyperic.hq.appdef.Agent findAgent( java.lang.Integer id ) ;

   /**
    * Get an Agent by id.
    */
   public org.hyperic.hq.appdef.Agent getAgent( java.lang.Integer id ) ;

   /**
    * Find an agent which can service the given entity ID
    * @return An agent which is set to manage the specified ID
    */
   public org.hyperic.hq.appdef.Agent getAgent( org.hyperic.hq.appdef.shared.AppdefEntityID aID ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Return the bundle that is currently running on a give agent. The returned bundle name may be parsed to retrieve the current agent version.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @return The bundle name currently running.
    * @throws PermissionException if the subject does not have proper permissions to issue the query.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    * @throws AgentRemoteException if an exception occurs on the remote agent side.
    * @throws AgentConnectionException if the connection to the agent fails.
    */
   public java.lang.String getCurrentAgentBundle( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID aid ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.agent.AgentRemoteException, org.hyperic.hq.agent.AgentConnectionException;

   /**
    * Upgrade an agent asynchronously including agent restart. This operation blocks long enough only to do some basic failure condition checking (permissions, agent existence, file existence, config property existence) then delegates the actual commands to the Zevent subsystem.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @param bundleFileName The agent bundle name.
    * @throws PermissionException if the subject does not have proper permissions to issue an agent upgrade.
    * @throws FileNotFoundException if the agent bundle is not found on the HQ server.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    * @throws ConfigPropertyException if the server configuration cannot be retrieved.
    * @throws InterruptedException if enqueuing the Zevent is interrupted.
    */
   public void upgradeAgentAsync( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID aid,java.lang.String bundleFileName ) throws org.hyperic.hq.authz.shared.PermissionException, java.io.FileNotFoundException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.util.ConfigPropertyException, java.lang.InterruptedException;

   /**
    * Upgrade an agent synchronously including agent restart. This operation is composed of transferring the agent bundle, upgrading the agent, and restarting the agent, in that order.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @param bundleFileName The agent bundle name.
    * @throws PermissionException if the subject does not have proper permissions to issue an agent upgrade command.
    * @throws FileNotFoundException if the agent bundle is not found on the HQ server.
    * @throws IOException if an I/O error occurs, such as failing to calculate the file MD5 checksum.
    * @throws AgentRemoteException if an exception occurs on the remote agent side.
    * @throws AgentConnectionException if the connection to the agent fails.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    * @throws ConfigPropertyException if the server configuration cannot be retrieved.
    */
   public void upgradeAgent( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID aid,java.lang.String bundleFileName ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.agent.AgentRemoteException, java.io.FileNotFoundException, org.hyperic.util.ConfigPropertyException, java.io.IOException;

   /**
    * Transfer asynchronously an agent bundle residing on the HQ server to an agent. This operation blocks long enough only to do some basic failure condition checking (permissions, agent existence, file existence, config property existence) then delegates the actual file transfer to the Zevent subsystem.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @param bundleFileName The agent bundle name.
    * @throws PermissionException if the subject does not have proper permissions to issue an agent bundle transfer.
    * @throws FileNotFoundException if the agent bundle is not found on the HQ server.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    * @throws ConfigPropertyException if the server configuration cannot be retrieved.
    * @throws InterruptedException if enqueuing the Zevent is interrupted.
    */
   public void transferAgentBundleAsync( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID aid,java.lang.String bundleFileName ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, java.io.FileNotFoundException, org.hyperic.util.ConfigPropertyException, java.lang.InterruptedException;

   /**
    * Transfer an agent bundle residing on the HQ server to an agent.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @param bundleFileName The agent bundle name.
    * @throws PermissionException if the subject does not have proper permissions to issue an agent bundle transfer.
    * @throws FileNotFoundException if the agent bundle is not found on the HQ server.
    * @throws IOException if an I/O error occurs, such as failing to calculate the file MD5 checksum.
    * @throws AgentRemoteException if an exception occurs on the remote agent side.
    * @throws AgentConnectionException if the connection to the agent fails.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    * @throws ConfigPropertyException if the server configuration cannot be retrieved.
    */
   public void transferAgentBundle( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID aid,java.lang.String bundleFileName ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.agent.AgentRemoteException, java.io.FileNotFoundException, java.io.IOException, org.hyperic.util.ConfigPropertyException;

   /**
    * Transfer an agent plugin residing on the HQ server to an agent.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @param plugin The plugin name.
    * @throws PermissionException if the subject does not have proper permissions to issue an agent plugin transfer.
    * @throws FileNotFoundException if the plugin is not found on the HQ server.
    * @throws IOException if an I/O error occurs, such as failing to calculate the file MD5 checksum.
    * @throws AgentRemoteException if an exception occurs on the remote agent side.
    * @throws AgentConnectionException if the connection to the agent fails.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    */
   public void transferAgentPlugin( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID aid,java.lang.String plugin ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.agent.AgentRemoteException, java.io.FileNotFoundException, java.io.IOException, org.hyperic.util.ConfigPropertyException;

   /**
    * Transfer an agent plugin residing on the HQ server to an agent. The transfer is performed asynchronously by placing on the Zevent queue and results in an agent restart.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @param plugin The plugin name.
    * @throws PermissionException if the subject does not have proper permissions to issue an agent plugin transfer.
    * @throws FileNotFoundException if the plugin is not found on the HQ server.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    * @throws InterruptedException if enqueuing the Zevent is interrupted.
    */
   public void transferAgentPluginAsync( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID aid,java.lang.String plugin ) throws org.hyperic.hq.authz.shared.PermissionException, java.io.FileNotFoundException, org.hyperic.hq.appdef.shared.AgentNotFoundException, java.lang.InterruptedException;

   /**
    * Upgrade to the specified agent bundle residing on the HQ agent.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @param bundleFileName The agent bundle name.
    * @throws PermissionException if the subject does not have proper permissions to issue an agent bundle transfer.
    * @throws FileNotFoundException if the agent bundle is not found on the HQ server.
    * @throws IOException if an I/O error occurs, such as failing to calculate the file MD5 checksum.
    * @throws AgentRemoteException if an exception occurs on the remote agent side.
    * @throws AgentConnectionException if the connection to the agent fails.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    * @throws ConfigPropertyException if the server configuration cannot be retrieved.
    */
   public void upgradeAgentBundle( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID aid,java.lang.String bundleFileName ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.agent.AgentRemoteException, java.io.FileNotFoundException, java.io.IOException, org.hyperic.util.ConfigPropertyException;

   /**
    * Restarts the specified agent using the Java Service Wrapper.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @throws PermissionException if the subject does not have proper permissions to issue an agent bundle transfer.
    * @throws FileNotFoundException if the agent bundle is not found on the HQ server.
    * @throws IOException if an I/O error occurs, such as failing to calculate the file MD5 checksum.
    * @throws AgentRemoteException if an exception occurs on the remote agent side.
    * @throws AgentConnectionException if the connection to the agent fails.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    * @throws ConfigPropertyException if the server configuration cannot be retrieved.
    */
   public void restartAgent( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID aid ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.agent.AgentRemoteException, java.io.FileNotFoundException, java.io.IOException, org.hyperic.util.ConfigPropertyException;

   /**
    * Pings the specified agent.
    * @see org.hyperic.hq.appdef.server.session.AgentManagerEJBImpl#pingAgent(org.hyperic.hq.authz.server.session.AuthzSubject, org.hyperic.hq.appdef.Agent)    */
   public long pingAgent( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.agent.AgentConnectionException, java.io.IOException, org.hyperic.util.ConfigPropertyException, org.hyperic.hq.agent.AgentRemoteException;

   /**
    * Pings the specified agent.
    * @param subject The subject issuing the request.
    * @param aid The agent id.
    * @return the time it took (in milliseconds) for the round-trip time of the request to the agent.
    * @throws PermissionException if the subject does not have proper permissions to issue an agent bundle transfer.
    * @throws FileNotFoundException if the agent bundle is not found on the HQ server.
    * @throws IOException if an I/O error occurs, such as failing to calculate the file MD5 checksum.
    * @throws AgentRemoteException if an exception occurs on the remote agent side.
    * @throws AgentConnectionException if the connection to the agent fails.
    * @throws AgentNotFoundException if no agent exists with the given agent id.
    * @throws ConfigPropertyException if the server configuration cannot be retrieved.
    */
   public long pingAgent( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.Agent agent ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AgentNotFoundException, org.hyperic.hq.agent.AgentConnectionException, org.hyperic.hq.agent.AgentRemoteException, java.io.IOException, org.hyperic.util.ConfigPropertyException;

   /**
    * Check for createPlatform permission for a resource
    * @param subject
    * @throws PermissionException
    */
   public void checkCreatePlatformPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for modify permission for a given resource
    */
   public void checkModifyPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for view permission for a given resource
    */
   public void checkViewPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkControlPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkRemovePermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for monitor permission for a given resource
    */
   public void checkMonitorPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for manage alerts permission for a given resource
    */
   public void checkAlertingPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check the scope of alertable resources for a give subject
    * @return a list of AppdefEntityIds
    */
   public java.util.List checkAlertingScope( org.hyperic.hq.authz.server.session.AuthzSubject subj ) ;

   /**
    * Check for create child object permission for a given resource Child Resources: Platforms -> servers Servers -> services Any other resource will throw an InvalidAppdefTypeException since no other resources have this parent->child relationship with respect to their permissions
    * @param subject
    * @param id - what
    * @param subject - who
    */
   public void checkCreateChildPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the AppdefResourcePermissions for a given resource
    * @deprecated Use the individual check*Permission methods instead.    */
   public org.hyperic.hq.appdef.shared.AppdefResourcePermissions getResourcePermissions( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.shared.AppdefEntityID eid ) throws javax.ejb.FinderException;

   /**
    * Change appdef entity owner
    */
   public void changeOwner( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.server.session.AppdefResource res,org.hyperic.hq.authz.server.session.AuthzSubject newOwner ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServerNotFoundException;

}
