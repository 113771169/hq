/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.appdef.shared;

import org.hyperic.hq.appdef.server.session.Cprop;
import org.hyperic.hq.appdef.server.session.CpropKey;

/**
 * Local interface for CPropManager.
 */
public interface CPropManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Get all the keys associated with an appdef resource type.
    * @param appdefType One of AppdefEntityConstants.APPDEF_TYPE_*
    * @param appdefTypeId The ID of the appdef resource type
    * @return a List of CPropKeyValue objects
    */
   public java.util.List<CpropKey> getKeys( int appdefType,int appdefTypeId ) ;

   /**
    * find appdef resource type
    */
   public org.hyperic.hq.appdef.server.session.AppdefResourceType findResourceType( org.hyperic.hq.product.TypeInfo info ) ;

   /**
    * find Cprop by key to a resource type based on a TypeInfo object.
    */
   public org.hyperic.hq.appdef.server.session.CpropKey findByKey( org.hyperic.hq.appdef.server.session.AppdefResourceType appdefType,java.lang.String key ) ;

   /**
    * Add a key to a resource type based on a TypeInfo object.
    * @throw AppdefEntityNotFoundException if the appdef resource type that the key references could not be found
    * @throw CPropKeyExistsException if the key already exists
    */
   public void addKey( org.hyperic.hq.appdef.server.session.AppdefResourceType appdefType,java.lang.String key,java.lang.String description ) ;

   /**
    * Add a key to a resource type. The key's 'appdefType' and 'appdefTypeId' fields are used to locate the resource -- if that resource does not exist, an AppdefEntityNotFoundException will be thrown.
    * @param key Key to create
    * @throw AppdefEntityNotFoundException if the appdef resource type that the key references could not be found
    * @throw CPropKeyExistsException if the key already exists
    */
   public void addKey( org.hyperic.hq.appdef.server.session.CpropKey key ) throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.appdef.shared.CPropKeyExistsException;

   /**
    * Remove a key from a resource type.
    * @param appdefType One of AppdefEntityConstants.APPDEF_TYPE_*
    * @param appdefTypeId The ID of the resource type
    * @param key Key to remove
    * @throw CPropKeyNotFoundException if the CPropKey could not be found
    */
   public void deleteKey( int appdefType,int appdefTypeId,java.lang.String key ) throws org.hyperic.hq.appdef.shared.CPropKeyNotFoundException;

   /**
    * Set (or delete) a custom property for a resource. If the property already exists, it will be overwritten.
    * @param aID Appdef entity id to set the value for
    * @param typeId Resource type id
    * @param key Key to associate the value with
    * @param val Value to assicate with the key. If the value is null, then the value will simply be removed.
    * @throw CPropKeyNotFoundException if the key has not been created for the resource's associated type
    * @throw AppdefEntityNotFoundException if id for 'aVal' specifies a resource which does not exist XXX: scottmf, we should move this over to hql at some point rather than trying to manage the transaction via jdbc within this container
    */
   public void setValue( org.hyperic.hq.appdef.shared.AppdefEntityID aID,int typeId,java.lang.String key,java.lang.String val ) throws org.hyperic.hq.appdef.shared.CPropKeyNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get a custom property for a resource.
    * @param aVal Appdef entity to get the value for
    * @param key Key of the value to get
    * @return The value associated with 'key' if found, else null
    * @throw CPropKeyNotFoundException if the key for the associated resource is not found
    * @throw AppdefEntityNotFoundException if the passed entity is not found
    */
   public java.lang.String getValue( org.hyperic.hq.appdef.shared.AppdefEntityValue aVal,java.lang.String key ) throws org.hyperic.hq.appdef.shared.CPropKeyNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get a map which holds the keys & their associated values for an appdef entity.
    * @param aID Appdef entity id to get the custom properties for
    * @return The properties stored for a specific entity ID. An empty Properties object will be returned if there are no custom properties defined for the resource
    */
   public java.util.Properties getEntries( org.hyperic.hq.appdef.shared.AppdefEntityID aID ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException;

   /**
    * Get a map which holds the descriptions & their associated values for an appdef entity.
    * @param aID Appdef entity id to get the custom properties for
    * @return The properties stored for a specific entity ID
    */
   public java.util.Properties getDescEntries( org.hyperic.hq.appdef.shared.AppdefEntityID aID ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException;

   /**
    * Set custom properties for a resource. If the property already exists, it will be overwritten.
    * @param aID Appdef entity id to set the value for
    * @param typeId Resource type id
    * @param data Encoded ConfigResponse
    */
   public void setConfigResponse( org.hyperic.hq.appdef.shared.AppdefEntityID aID,int typeId,byte[] data ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException;

   /**
    * Remove custom properties for a given resource.
    */
   public void deleteValues( int appdefType,int id ) ;

   /**
    * Get all Cprops values with specified key name, irregardless of type
    */
   public java.util.List<Cprop> getCPropValues( org.hyperic.hq.appdef.shared.AppdefResourceTypeValue appdefType,java.lang.String key,boolean asc ) ;

}
