/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.appdef.shared;

/**
 * Local interface for ConfigManager.
 */
public interface ConfigManagerLocal
   extends javax.ejb.EJBLocalObject
{

   public org.hyperic.hq.appdef.ConfigResponseDB createConfigResponse( byte[] productResponse,byte[] measResponse,byte[] controlResponse,byte[] rtResponse ) ;

   /**
    * Get the ConfigResponse for the given ID, creating it if it does not already exist.
    */
   public org.hyperic.hq.appdef.ConfigResponseDB getConfigResponse( org.hyperic.hq.appdef.shared.AppdefEntityID id ) ;

   public java.lang.String getPluginName( org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException;

   /**
    * Get a config response object merged through the hierarchy. All entities are merged with the product's config response, and any entity lower than them in the config stack. Config responses defining a specific attribute will override the same attribute if it was declared lower in the application stack. Only entities within the same plugin will be processed, so the most likely situation is a simple service + server + product or server + product merge. Example: Get the SERVICE MEASUREMENT merged response: PRODUCT[platform] + MEASUREMENT[platform] PRODUCT[server] + MEASUREMENT[server] + PRODUCT[service] + MEASUREMENT[service] Get the SERVER PRODUCT merged response: PRODUCT[platform] PRODUCT[server] Get the PLATFORM PRODUCT merged response: PRODUCT[platform] In addition to the configuration, some inventory properties are also merged in to aid in auto-configuration done by autoinventory. For Servers and Services: The install path of the server is included For all Resources: The first non-loopback ip address, fqdn, platform name and type.
    * @param productType One of ProductPlugin.*
    * @param id An AppdefEntityID of the object to get config for
    * @return the merged ConfigResponse
    */
   public org.hyperic.util.config.ConfigResponse getMergedConfigResponse( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String productType,org.hyperic.hq.appdef.shared.AppdefEntityID id,boolean required ) throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.util.config.EncodingException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Clear the validation error string for a config response, indicating that the current config is valid
    */
   public void clearValidationError( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) ;

   /**
    * Update the validation error string for a config response
    * @param validationError The error string that occured during validation. If this is null, that means that no error occurred and the config is valid.
    */
   public void setValidationError( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String validationError ) ;

   /**
    * Set the config response for an entity/type combination.
    * @param id ID of the object to set the repsonse fo
    * @param response The response
    * @param type One of ProductPlugin.TYPE_*
    * @return an array of entities which may be affected by the change in configuration. For updates to platform and service configs, there are no other entities other than the given ID returned. If a server is updated, the associated services may require changes. The passed entity will always be returned in the array.
    */
   public org.hyperic.hq.appdef.shared.AppdefEntityID setConfigResponse( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.config.ConfigResponse response,java.lang.String type,boolean sendConfigEvent ) throws org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.util.config.EncodingException, javax.ejb.FinderException;

   public org.hyperic.hq.appdef.shared.AppdefEntityID configureResponse( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.ConfigResponseDB existingConfig,org.hyperic.hq.appdef.shared.AppdefEntityID appdefID,byte[] productConfig,byte[] measurementConfig,byte[] controlConfig,byte[] rtConfig,java.lang.Boolean userManaged,boolean sendConfigEvent,boolean force ) ;

   /**
    * Update the appdef entities based on TypeInfo
    */
   public void updateAppdefEntities( java.lang.String pluginName,org.hyperic.hq.product.TypeInfo[] entities ) throws javax.ejb.FinderException, javax.ejb.RemoveException, javax.ejb.CreateException, org.hyperic.hq.common.VetoException;

   /**
    * Check for createPlatform permission for a resource
    * @param subject
    * @throws PermissionException
    */
   public void checkCreatePlatformPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for modify permission for a given resource
    */
   public void checkModifyPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for view permission for a given resource
    */
   public void checkViewPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkControlPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkRemovePermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for monitor permission for a given resource
    */
   public void checkMonitorPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for manage alerts permission for a given resource
    */
   public void checkAlertingPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check the scope of alertable resources for a give subject
    * @return a list of AppdefEntityIds
    */
   public java.util.List checkAlertingScope( org.hyperic.hq.authz.server.session.AuthzSubject subj ) ;

   /**
    * Check for create child object permission for a given resource Child Resources: Platforms -> servers Servers -> services Any other resource will throw an InvalidAppdefTypeException since no other resources have this parent->child relationship with respect to their permissions
    * @param subject
    * @param id - what
    * @param subject - who
    */
   public void checkCreateChildPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the AppdefResourcePermissions for a given resource
    * @deprecated Use the individual check*Permission methods instead.    */
   public org.hyperic.hq.appdef.shared.AppdefResourcePermissions getResourcePermissions( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.shared.AppdefEntityID eid ) throws javax.ejb.FinderException;

   /**
    * Change appdef entity owner
    */
   public void changeOwner( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.server.session.AppdefResource res,org.hyperic.hq.authz.server.session.AuthzSubject newOwner ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServerNotFoundException;

}
