/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.appdef.shared;

/**
 * Local interface for AIQueueManager.
 */
public interface AIQueueManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Try to queue a candidate platform discovered via autoinventory.
    * @param aiplatform The platform that we got from the recent autoinventory data that we are wanting to queue. This may return null if the appdef platform was removed because the AI platform had a qstat of "remove" that was approved.
    */
   public org.hyperic.hq.appdef.shared.AIPlatformValue queue( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AIPlatformValue aiplatform,boolean updateServers,boolean isApproval,boolean isReport ) ;

   /**
    * Retrieve the contents of the AI queue.
    * @param showIgnored If true, even resources in the AI queue that have the 'ignored' flag set will be returned. By default, resources with the 'ignored' flag set are excluded when the queue is retrieved.
    * @param showPlaceholders If true, even resources in the AI queue that are unchanged with respect to appdef will be returned. By default, resources that are unchanged with respect to appdef are excluded when the queue is retrieved.
    * @param showAlreadyProcessed If true, even resources that have already been processed (approved or not approved) will be shown.
    * @return A List of AIPlatformValue objects representing the contents of the autoinventory queue.
    */
   public org.hyperic.util.pager.PageList getQueue( org.hyperic.hq.authz.server.session.AuthzSubject subject,boolean showIgnored,boolean showPlaceholders,boolean showAlreadyProcessed,org.hyperic.util.pager.PageControl pc ) ;

   /**
    * Get an AIPlatformValue by id.
    * @return An AIPlatformValue with the given id, or null if that platform id is not present in the queue.    */
   public org.hyperic.hq.appdef.shared.AIPlatformValue findAIPlatformById( org.hyperic.hq.authz.server.session.AuthzSubject subject,int aiplatformID ) ;

   /**
    * Get an AIPlatformValue by FQDN.
    * @return The AIPlatformValue with the given FQDN, or null if that FQDN does not exist in the queue.    */
   public org.hyperic.hq.appdef.shared.AIPlatformValue findAIPlatformByFqdn( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String fqdn ) ;

   /**
    * Get an AIServerValue by Id.
    * @return The AIServerValue with the given id, or null if that server id does not exist in the queue.    */
   public org.hyperic.hq.appdef.shared.AIServerValue findAIServerById( org.hyperic.hq.authz.server.session.AuthzSubject subject,int serverID ) ;

   public void removeAssociatedAIPlatform( org.hyperic.hq.appdef.server.session.Platform platform ) throws org.hyperic.hq.common.VetoException;

   /**
    * Get an AIServerValue by name.
    * @return The AIServerValue with the given id, or null if that server name does not exist in the queue.    */
   public org.hyperic.hq.appdef.shared.AIServerValue findAIServerByName( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String name ) ;

   /**
    * Get an AIIp by id.
    * @return The AIIp with the given id, or null if that ip does not exist.    */
   public org.hyperic.hq.appdef.shared.AIIpValue findAIIpById( org.hyperic.hq.authz.server.session.AuthzSubject subject,int ipID ) ;

   /**
    * Get an AIIpValue by address.
    * @return The AIIpValue with the given address, or null if an ip with that address does not exist in the queue.    */
   public org.hyperic.hq.appdef.shared.AIIpValue findAIIpByAddress( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String address ) ;

   /**
    * Process resources in the AI queue. This can be used to approve resources for inclusion into appdef, to ignore or unignore resources in the queue, or to purge resources from the queue.
    * @param platformList A List of aiplatform IDs. This may be null, in which case it is ignored.
    * @param ipList A List of aiip IDs. This may be null, in which case it is ignored.
    * @param serverList A List of aiserver IDs. This may be null, in which case it is ignored.
    * @param action One of the AIQueueConstants.Q_DECISION_XXX constants indicating what to do with the platforms, ips and servers.
    * @return A List of AppdefResource's that were created as a result of processing the queue.
    */
   public java.util.List processQueue( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.util.List platformList,java.util.List serverList,java.util.List ipList,int action ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ValidationException, javax.ejb.RemoveException, org.hyperic.hq.appdef.shared.AIQApprovalException;

   /**
    * Remove an AI platform from the queue.
    */
   public void removeFromQueue( org.hyperic.hq.autoinventory.AIPlatform aiplatform ) ;

   /**
    * Find a platform given an AI platform id
    */
   public org.hyperic.hq.appdef.shared.PlatformValue getPlatformByAI( org.hyperic.hq.authz.server.session.AuthzSubject subject,int aiPlatformID ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.PlatformNotFoundException;

   /**
    * Get a platform given an AI platform, returns null if none found
    */
   public org.hyperic.hq.appdef.shared.AIPlatformValue getAIPlatformByPlatformID( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platformID ) ;

   /**
    * Find an AI platform given an platform
    */
   public org.hyperic.hq.appdef.server.session.Platform getPlatformByAI( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.autoinventory.AIPlatform aipLocal ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.PlatformNotFoundException;

   /**
    * Check to see if the subject can perform an autoinventory scan on the specified resource. This is another hack to publicly expose this method in AppdefSessionEJB as an EJB interface method.
    */
   public void checkAIScanPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException;

   /**
    * Check for createPlatform permission for a resource
    * @param subject
    * @throws PermissionException
    */
   public void checkCreatePlatformPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for modify permission for a given resource
    */
   public void checkModifyPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for view permission for a given resource
    */
   public void checkViewPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkControlPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkRemovePermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for monitor permission for a given resource
    */
   public void checkMonitorPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for manage alerts permission for a given resource
    */
   public void checkAlertingPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check the scope of alertable resources for a give subject
    * @return a list of AppdefEntityIds
    */
   public java.util.List checkAlertingScope( org.hyperic.hq.authz.server.session.AuthzSubject subj ) ;

   /**
    * Check for create child object permission for a given resource Child Resources: Platforms -> servers Servers -> services Any other resource will throw an InvalidAppdefTypeException since no other resources have this parent->child relationship with respect to their permissions
    * @param subject
    * @param id - what
    * @param subject - who
    */
   public void checkCreateChildPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the AppdefResourcePermissions for a given resource
    * @deprecated Use the individual check*Permission methods instead.    */
   public org.hyperic.hq.appdef.shared.AppdefResourcePermissions getResourcePermissions( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.shared.AppdefEntityID eid ) throws javax.ejb.FinderException;

   /**
    * Change appdef entity owner
    */
   public void changeOwner( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.server.session.AppdefResource res,org.hyperic.hq.authz.server.session.AuthzSubject newOwner ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServerNotFoundException;

}
