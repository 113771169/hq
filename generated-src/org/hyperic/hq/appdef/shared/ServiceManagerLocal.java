/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.appdef.shared;

/**
 * Local interface for ServiceManager.
 */
public interface ServiceManagerLocal
   extends javax.ejb.EJBLocalObject
{

   public org.hyperic.hq.appdef.server.session.Service createService( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Server server,org.hyperic.hq.appdef.server.session.ServiceType type,java.lang.String name,java.lang.String desc,java.lang.String location,org.hyperic.hq.appdef.server.session.Service parent ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Move a Service from one Platform to another.
    * @param subject The user initiating the move.
    * @param target The target Service to move.
    * @param destination The destination Platform to move this Service to.
    * @throws org.hyperic.hq.authz.shared.PermissionException If the passed user does not have permission to move the Service.
    * @throws org.hyperic.hq.common.VetoException If the operation canot be performed due to incompatible types.
    */
   public void moveService( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Service target,org.hyperic.hq.appdef.server.session.Platform destination ) throws org.hyperic.hq.common.VetoException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Move a Service from one Server to another.
    * @param subject The user initiating the move.
    * @param target The target Service to move.
    * @param destination The destination Server to move this Service to.
    * @throws org.hyperic.hq.authz.shared.PermissionException If the passed user does not have permission to move the Service.
    * @throws org.hyperic.hq.common.VetoException If the operation canot be performed due to incompatible types.
    */
   public void moveService( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Service target,org.hyperic.hq.appdef.server.session.Server destination ) throws org.hyperic.hq.common.VetoException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Create a Service which runs on a given server
    * @return The service id.
    */
   public org.hyperic.hq.appdef.server.session.Service createService( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serverId,java.lang.Integer serviceTypeId,java.lang.String name,java.lang.String desc,java.lang.String location ) throws javax.ejb.CreateException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServerNotFoundException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException;

   /**
    * Get service IDs by service type.
    * @param subject The subject trying to list service.
    * @param servTypeId service type id.
    * @return An array of service IDs.    */
   public java.lang.Integer[] getServiceIds( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer servTypeId ) throws org.hyperic.hq.authz.shared.PermissionException;

   public java.util.List findServicesById( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer[] serviceIds ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Find Service by Id.
    */
   public org.hyperic.hq.appdef.server.session.Service findServiceById( java.lang.Integer id ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException;

   /**
    * Get Service by Id.
    * @return The Service identified by this id, or null if it does not exist.    */
   public org.hyperic.hq.appdef.server.session.Service getServiceById( java.lang.Integer id ) ;

   /**
    * Get Service by Id and perform permission check.
    * @return The Service identified by this id.    */
   public org.hyperic.hq.appdef.server.session.Service getServiceById( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer id ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   public java.util.List<org.hyperic.hq.appdef.server.session.Service> getServicesByAIID( org.hyperic.hq.appdef.server.session.Server server,java.lang.String aiid ) ;

   public org.hyperic.hq.appdef.server.session.Service getServiceByName( org.hyperic.hq.appdef.server.session.Server server,java.lang.String name ) ;

   public org.hyperic.hq.appdef.server.session.Service getServiceByName( org.hyperic.hq.appdef.server.session.Platform platform,java.lang.String name ) ;

   /**
    * Find a ServiceType by id
    */
   public org.hyperic.hq.appdef.server.session.ServiceType findServiceType( java.lang.Integer id ) throws org.hibernate.ObjectNotFoundException;

   /**
    * Find service type by name
    */
   public org.hyperic.hq.appdef.server.session.ServiceType findServiceTypeByName( java.lang.String name ) ;

   public java.util.Collection findDeletedServices(  ) ;

   public org.hyperic.util.pager.PageList getAllServiceTypes( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.util.pager.PageControl pc ) ;

   public org.hyperic.util.pager.PageList getViewableServiceTypes( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.util.pager.PageControl pc ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.util.pager.PageList getServiceTypesByServerType( org.hyperic.hq.authz.server.session.AuthzSubject subject,int serverTypeId ) ;

   public org.hyperic.util.pager.PageList findVirtualServiceTypesByPlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platformId ) ;

   public org.hyperic.util.pager.PageList getAllServices( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.util.pager.PageControl pc ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Fetch all services that haven't been assigned to a cluster and that haven't been assigned to any applications.
    * @return A List of ServiceValue objects representing all of the unassigned services that the given subject is allowed to view.
    */
   public org.hyperic.util.pager.PageList getAllClusterAppUnassignedServices( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.util.pager.PageControl pc ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get services by server and type.
    */
   public org.hyperic.util.pager.PageList getServicesByServer( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serverId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.appdef.shared.ServerNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.util.pager.PageList getServicesByServer( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serverId,java.lang.Integer svcTypeId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get service POJOs by server and type.
    */
   public java.util.List getServicesByServer( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Server server ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServiceNotFoundException;

   public java.lang.Integer[] getServiceIdsByServer( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serverId,java.lang.Integer svcTypeId ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   public java.util.List getServicesByType( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String svcName,boolean asc ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException;

   public org.hyperic.util.pager.PageList getServicesByService( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serviceId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get services by server.
    */
   public org.hyperic.util.pager.PageList getServicesByService( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serviceId,java.lang.Integer svcTypeId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get service IDs by service.
    */
   public java.lang.Integer[] getServiceIdsByService( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serviceId,java.lang.Integer svcTypeId ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.util.pager.PageList getServicesByPlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get platform services (children of virtual servers)
    */
   public org.hyperic.util.pager.PageList getPlatformServices( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServiceNotFoundException;

   /**
    * Get platform services (children of virtual servers) of a specified type
    */
   public org.hyperic.util.pager.PageList getPlatformServices( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platId,java.lang.Integer typeId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServiceNotFoundException;

   /**
    * Get {@link Service}s which are children of the server, and of the specified type.
    */
   public java.util.List findServicesByType( org.hyperic.hq.appdef.server.session.Server server,org.hyperic.hq.appdef.server.session.ServiceType st ) ;

   /**
    * Get platform service POJOs
    */
   public java.util.List findPlatformServicesByType( org.hyperic.hq.appdef.server.session.Platform p,org.hyperic.hq.appdef.server.session.ServiceType st ) ;

   /**
    * Get platform service POJOs
    */
   public java.util.Collection getPlatformServices( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platId ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get platform services (children of virtual servers), mapped by type id of a specified type
    */
   public java.util.Map getMappedPlatformServices( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServiceNotFoundException;

   /**
    * Get services by platform.
    */
   public org.hyperic.util.pager.PageList getServicesByPlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platId,java.lang.Integer svcTypeId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.util.pager.PageList getServicesByApplication( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer appId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.util.pager.PageList getServicesByApplication( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer appId,java.lang.Integer svcTypeId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.appdef.shared.ServiceNotFoundException;

   public java.util.List getServicesByApplication( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer appId ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.appdef.shared.ServiceNotFoundException;

   public org.hyperic.util.pager.PageList getServiceInventoryByApplication( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer appId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get all services by application. This is to only be used for the Evident API.
    */
   public org.hyperic.util.pager.PageList getFlattenedServicesByApplication( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer appId,java.lang.Integer typeId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.util.pager.PageList getServiceInventoryByApplication( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer appId,java.lang.Integer svcTypeId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get all service inventory by application, including those inside an associated cluster
    * @param subject The subject trying to list services.
    * @param appId Application id.
    * @return A List of ServiceValue objects representing all of the services that the given subject is allowed to view.    */
   public java.lang.Integer[] getFlattenedServiceIdsByApplication( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer appId ) throws org.hyperic.hq.appdef.shared.ServiceNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ApplicationNotFoundException;

   public void updateServiceZombieStatus( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Service svc,boolean zombieStatus ) throws org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.hq.appdef.server.session.Service updateService( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.ServiceValue existing ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.ServiceNotFoundException;

   public void updateServiceTypes( java.lang.String plugin,org.hyperic.hq.product.ServiceTypeInfo[] infos ) throws javax.ejb.CreateException, javax.ejb.FinderException, javax.ejb.RemoveException, org.hyperic.hq.common.VetoException;

   public void deleteServiceType( org.hyperic.hq.appdef.server.session.ServiceType serviceType,org.hyperic.hq.authz.server.session.AuthzSubject overlord,org.hyperic.hq.authz.shared.ResourceGroupManager resGroupMan,org.hyperic.hq.authz.shared.ResourceManager resMan ) throws org.hyperic.hq.common.VetoException, javax.ejb.RemoveException;

   /**
    * A removeService method that takes a ServiceLocal. This is called by ServerManager.removeServer when cascading a delete onto services.
    */
   public void removeService( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Service service ) throws javax.ejb.RemoveException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.common.VetoException;

   public void handleResourceDelete( org.hyperic.hq.authz.server.session.Resource resource ) ;

   /**
    * Returns a list of 2 element arrays. The first element is the name of the service type, the second element is the # of services of that type in the inventory.
    */
   public java.util.List getServiceTypeCounts(  ) ;

   /**
    * Get the # of services within HQ inventory
    */
   public java.lang.Number getServiceCount(  ) ;

   /**
    * Check for createPlatform permission for a resource
    * @param subject
    * @throws PermissionException
    */
   public void checkCreatePlatformPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for modify permission for a given resource
    */
   public void checkModifyPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for view permission for a given resource
    */
   public void checkViewPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkControlPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkRemovePermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for monitor permission for a given resource
    */
   public void checkMonitorPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for manage alerts permission for a given resource
    */
   public void checkAlertingPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check the scope of alertable resources for a give subject
    * @return a list of AppdefEntityIds
    */
   public java.util.List checkAlertingScope( org.hyperic.hq.authz.server.session.AuthzSubject subj ) ;

   /**
    * Check for create child object permission for a given resource Child Resources: Platforms -> servers Servers -> services Any other resource will throw an InvalidAppdefTypeException since no other resources have this parent->child relationship with respect to their permissions
    * @param subject
    * @param id - what
    * @param subject - who
    */
   public void checkCreateChildPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the AppdefResourcePermissions for a given resource
    * @deprecated Use the individual check*Permission methods instead.    */
   public org.hyperic.hq.appdef.shared.AppdefResourcePermissions getResourcePermissions( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.shared.AppdefEntityID eid ) throws javax.ejb.FinderException;

   /**
    * Change appdef entity owner
    */
   public void changeOwner( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.server.session.AppdefResource res,org.hyperic.hq.authz.server.session.AuthzSubject newOwner ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServerNotFoundException;

}
