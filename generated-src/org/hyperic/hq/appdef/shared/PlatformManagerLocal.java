/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.appdef.shared;

import org.hyperic.hq.appdef.server.session.Platform;

/**
 * Local interface for PlatformManager.
 */
public interface PlatformManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Find a PlatformType by id
    */
   public org.hyperic.hq.appdef.server.session.PlatformType findPlatformType( java.lang.Integer id ) throws org.hibernate.ObjectNotFoundException;

   /**
    * Find a platform type by name
    * @param type - name of the platform type
    * @return platformTypeValue
    */
   public org.hyperic.hq.appdef.server.session.PlatformType findPlatformTypeByName( java.lang.String type ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException;

   public java.util.Collection findAllPlatformTypes(  ) ;

   public java.util.Collection findSupportedPlatformTypes(  ) ;

   public java.util.Collection findUnsupportedPlatformTypes(  ) ;

   public org.hyperic.hq.authz.server.session.Resource findResource( org.hyperic.hq.appdef.server.session.PlatformType pt ) ;

   /**
    * Find all platform types
    * @return List of PlatformTypeValues
    */
   public org.hyperic.util.pager.PageList<PlatformTypeValue> getAllPlatformTypes( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.util.pager.PageControl pc ) ;

   /**
    * Find viewable platform types
    * @return List of PlatformTypeValues
    */
   public org.hyperic.util.pager.PageList<PlatformTypeValue> getViewablePlatformTypes( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.util.pager.PageControl pc ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get PlatformPluginName for an entity id. There is no authz in this method because it is not needed.
    * @return name of the plugin for the entity's platform such as "Apache 2.0 Linux". It is used as to look up plugins via a generic plugin manager.
    */
   public java.lang.String getPlatformPluginName( org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException;

   /**
    * Delete a platform
    * @param subject The user performing the delete operation.
    * @param id - The id of the Platform
    */
   public void removePlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.server.session.Platform platform ) throws javax.ejb.RemoveException, org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.common.VetoException;

   public void handleResourceDelete( org.hyperic.hq.authz.server.session.Resource resource ) ;

   /**
    * Create a Platform of a specified type
    */
   public org.hyperic.hq.appdef.server.session.Platform createPlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platformTypeId,org.hyperic.hq.appdef.shared.PlatformValue pValue,java.lang.Integer agentPK ) throws javax.ejb.CreateException, org.hyperic.hq.appdef.shared.ValidationException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.AppdefDuplicateFQDNException, org.hyperic.hq.common.ApplicationException;

   /**
    * Create a Platform from an AIPlatform
    * @param aipValue the AIPlatform to create as a regular appdef platform.
    */
   public org.hyperic.hq.appdef.server.session.Platform createPlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AIPlatformValue aipValue ) throws org.hyperic.hq.common.ApplicationException, javax.ejb.CreateException;

   /**
    * Get all platforms.
    * @param subject The subject trying to list platforms.
    * @param pc a PageControl object which determines the size of the page and the sorting, if any.
    * @return A List of PlatformValue objects representing all of the platforms that the given subject is allowed to view.    */
   public org.hyperic.util.pager.PageList<PlatformValue> getAllPlatforms( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.util.pager.PageControl pc ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get platforms created within a given time range.
    * @param subject The subject trying to list platforms.
    * @param range The range in milliseconds.
    * @param size The number of platforms to return.
    * @return A List of PlatformValue objects representing all of the platforms that the given subject is allowed to view that were created within the given range.    */
   public org.hyperic.util.pager.PageList<PlatformValue> getRecentPlatforms( org.hyperic.hq.authz.server.session.AuthzSubject subject,long range,int size ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get platform light value by id. Does not check permission.
    */
   public org.hyperic.hq.appdef.server.session.Platform getPlatformById( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer id ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Find a Platform by Id.
    * @param id The id to look up.
    * @return A Platform object representing this Platform.
    * @throws PlatformNotFoundException If the given Platform is not found.
    */
   public org.hyperic.hq.appdef.server.session.Platform findPlatformById( java.lang.Integer id ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException;

   /**
    * Get the Platform object based on an AIPlatformValue. Checks against FQDN, CertDN, then checks to see if all IP addresses match. If all of these checks fail null is returned.
    */
   public org.hyperic.hq.appdef.server.session.Platform getPlatformByAIPlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AIPlatformValue aiPlatform ) throws org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.hq.appdef.server.session.Platform getPhysPlatformByAgentToken( java.lang.String agentToken ) ;

   /**
    * Find a platform by name
    * @param subject - who is trying this
    * @param name - the name of the platform    */
   public org.hyperic.hq.appdef.shared.PlatformValue getPlatformByName( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String name ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.hq.appdef.server.session.Platform getPlatformByName( java.lang.String name ) ;

   /**
    * Get the Platform that has the specified Fqdn
    */
   public org.hyperic.hq.appdef.server.session.Platform findPlatformByFqdn( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String fqdn ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the Collection of platforms that have the specified Ip address
    */
   public java.util.Collection getPlatformByIpAddr( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String address ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the platform by agent token
    */
   public java.util.Collection getPlatformPksByAgentToken( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String agentToken ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException;

   /**
    * Get the platform that hosts the server that provides the specified service.
    * @param subject The subject trying to list services.
    * @param serviceId service ID.
    * @return the Platform    */
   public org.hyperic.hq.appdef.shared.PlatformValue getPlatformByService( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serviceId ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the platform ID that hosts the server that provides the specified service.
    * @param serviceId service ID.
    * @return the Platform    */
   public java.lang.Integer getPlatformIdByService( java.lang.Integer serviceId ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException;

   /**
    * Get the platform for a server.
    * @param subject The subject trying to list services.
    * @param serverId Server ID.    */
   public org.hyperic.hq.appdef.shared.PlatformValue getPlatformByServer( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer serverId ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the platform ID for a server.
    * @param serverId Server ID.    */
   public java.lang.Integer getPlatformIdByServer( java.lang.Integer serverId ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException;

   /**
    * Get the platforms for a list of servers.
    * @param subject The subject trying to list services.    */
   public org.hyperic.util.pager.PageList getPlatformsByServers( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.util.List sIDs ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get all platforms by application.
    * @param subject The subject trying to list services.
    * @param appId Application ID. but when they are, they should live somewhere in appdef/shared so that clients can use them too.
    * @return A List of ApplicationValue objects representing all of the services that the given subject is allowed to view.    */
   public org.hyperic.util.pager.PageList getPlatformsByApplication( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer appId,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.appdef.shared.ApplicationNotFoundException, org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get server IDs by server type and platform.
    * @param subject The subject trying to list servers.
    * @return A PageList of ServerValue objects representing servers on the specified platform that the subject is allowed to view.    */
   public java.lang.Integer[] getPlatformIds( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.Integer platTypeId ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get server IDs by server type and platform.
    * @param subject The subject trying to list servers.
    * @param pc The page control.
    * @return A PageList of ServerValue objects representing servers on the specified platform that the subject is allowed to view.    */
   public java.util.List getPlatformsByType( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String type ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.InvalidAppdefTypeException;

   /**
    * Get the platforms that have an IP with the specified address. If no matches are found, this method DOES NOT throw a PlatformNotFoundException, rather it returns an empty PageList.
    */
   public org.hyperic.util.pager.PageList findPlatformsByIpAddr( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String addr,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.authz.shared.PermissionException;

   public java.util.List findPlatformPojosByTypeAndName( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer pType,java.lang.String regEx ) ;

   public java.util.List findParentPlatformPojosByNetworkRelation( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.util.List platformTypeIds,java.lang.String platformName,java.lang.Boolean hasChildren ) ;

   public java.util.List findPlatformPojosByNoNetworkRelation( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.util.List platformTypeIds,java.lang.String platformName ) ;

   /**
    * Get the platforms that have an IP with the specified address.
    * @return a list of {@link Platform}s
    */
   public java.util.Collection findPlatformPojosByIpAddr( java.lang.String addr ) ;

   public java.util.Collection<Platform> findDeletedPlatforms(  ) ;

   /**
    * Update an existing Platform. Requires all Ip's to have been re-added via the platformValue.addIpValue(IpValue) method due to bug 4924
    * @param existing - the value object for the platform you want to save
    */
   public org.hyperic.hq.appdef.server.session.Platform updatePlatformImpl( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.PlatformValue existing ) throws org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.appdef.shared.AppdefDuplicateFQDNException, org.hyperic.hq.common.ApplicationException;

   /**
    * Update an existing Platform. Requires all Ip's to have been re-added via the platformValue.addIpValue(IpValue) method due to bug 4924
    * @param existing - the value object for the platform you want to save
    */
   public org.hyperic.hq.appdef.server.session.Platform updatePlatform( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.PlatformValue existing ) throws org.hyperic.hq.appdef.shared.UpdateException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefDuplicateNameException, org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.appdef.shared.AppdefDuplicateFQDNException, org.hyperic.hq.common.ApplicationException;

   /**
    * DevNote: This method was refactored out of updatePlatformTypes. It does not work.
    */
   public void deletePlatformType( org.hyperic.hq.appdef.server.session.PlatformType pt ) throws org.hyperic.hq.common.VetoException, javax.ejb.RemoveException;

   /**
    * Update platform types
    */
   public void updatePlatformTypes( java.lang.String plugin,org.hyperic.hq.product.PlatformTypeInfo[] infos ) throws javax.ejb.CreateException, javax.ejb.FinderException, javax.ejb.RemoveException, org.hyperic.hq.common.VetoException;

   /**
    * Update an existing appdef platform with data from an AI platform.
    * @param aiplatform the AI platform object to use for data
    */
   public void updateWithAI( org.hyperic.hq.appdef.shared.AIPlatformValue aiplatform,org.hyperic.hq.authz.server.session.AuthzSubject subj ) throws org.hyperic.hq.appdef.shared.PlatformNotFoundException, org.hyperic.hq.common.ApplicationException;

   /**
    * Add an IP to a platform
    */
   public org.hyperic.hq.appdef.Ip addIp( org.hyperic.hq.appdef.server.session.Platform platform,java.lang.String address,java.lang.String netmask,java.lang.String macAddress ) ;

   /**
    * Update an IP on a platform
    */
   public org.hyperic.hq.appdef.Ip updateIp( org.hyperic.hq.appdef.server.session.Platform platform,java.lang.String address,java.lang.String netmask,java.lang.String macAddress ) ;

   /**
    * Remove an IP on a platform
    */
   public void removeIp( org.hyperic.hq.appdef.server.session.Platform platform,java.lang.String address,java.lang.String netmask,java.lang.String macAddress ) ;

   /**
    * Returns a list of 2 element arrays. The first element is the name of the platform type, the second element is the # of platforms of that type in the inventory.
    */
   public java.util.List getPlatformTypeCounts(  ) ;

   public java.lang.Number getPlatformCount(  ) ;

   public java.lang.Number getCpuCount(  ) ;

   /**
    * Check for createPlatform permission for a resource
    * @param subject
    * @throws PermissionException
    */
   public void checkCreatePlatformPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for modify permission for a given resource
    */
   public void checkModifyPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for view permission for a given resource
    */
   public void checkViewPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkControlPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for control permission for a given resource
    */
   public void checkRemovePermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for monitor permission for a given resource
    */
   public void checkMonitorPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check for manage alerts permission for a given resource
    */
   public void checkAlertingPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Check the scope of alertable resources for a give subject
    * @return a list of AppdefEntityIds
    */
   public java.util.List<AppdefEntityID> checkAlertingScope( org.hyperic.hq.authz.server.session.AuthzSubject subj ) ;

   /**
    * Check for create child object permission for a given resource Child Resources: Platforms -> servers Servers -> services Any other resource will throw an InvalidAppdefTypeException since no other resources have this parent->child relationship with respect to their permissions
    * @param subject
    * @param id - what
    * @param subject - who
    */
   public void checkCreateChildPermission( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the AppdefResourcePermissions for a given resource
    * @deprecated Use the individual check*Permission methods instead.    */
   public org.hyperic.hq.appdef.shared.AppdefResourcePermissions getResourcePermissions( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.shared.AppdefEntityID eid ) throws javax.ejb.FinderException;

   /**
    * Change appdef entity owner
    */
   public void changeOwner( org.hyperic.hq.authz.server.session.AuthzSubject who,org.hyperic.hq.appdef.server.session.AppdefResource res,org.hyperic.hq.authz.server.session.AuthzSubject newOwner ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.ServerNotFoundException;

}
