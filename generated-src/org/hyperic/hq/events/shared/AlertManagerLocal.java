/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.events.shared;

/**
 * Local interface for AlertManager.
 */
public interface AlertManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Create a new alert.
    * @param def The alert definition.
    * @param ctime The alert creation time.
    */
   public org.hyperic.hq.events.server.session.Alert createAlert( org.hyperic.hq.events.server.session.AlertDefinition def,long ctime ) ;

   /**
    * Simply mark an alert object as fixed
    */
   public void setAlertFixed( org.hyperic.hq.events.server.session.Alert alert ) ;

   /**
    * Log the details of an action's execution
    */
   public void logActionDetail( org.hyperic.hq.events.server.session.Alert alert,org.hyperic.hq.events.server.session.Action action,java.lang.String detail,org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

   /**
    * Remove alerts
    */
   public void deleteAlerts( java.lang.Integer[] ids ) ;

   /**
    * Remove alerts for an appdef entity
    * @throws PermissionException
    */
   public int deleteAlerts( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Remove alerts for an alert definition
    * @throws PermissionException
    */
   public int deleteAlerts( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.events.server.session.AlertDefinition ad ) throws javax.ejb.RemoveException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Remove alerts for a range of time
    */
   public int deleteAlerts( long begin,long end ) ;

   /**
    * Find an alert by ID
    */
   public org.hyperic.hq.events.shared.AlertValue getById( java.lang.Integer id ) ;

   /**
    * Find an alert pojo by ID
    */
   public org.hyperic.hq.events.server.session.Alert findAlertById( java.lang.Integer id ) ;

   /**
    * Find the last alert by definition ID
    * @throws PermissionException
    */
   public org.hyperic.hq.events.server.session.Alert findLastUnfixedByDefinition( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer id ) ;

   /**
    * Find the last alert by definition ID
    * @throws PermissionException
    */
   public org.hyperic.hq.events.server.session.Alert findLastFixedByDefinition( org.hyperic.hq.events.server.session.AlertDefinition def ) ;

   /**
    * Get the # of alerts within HQ inventory
    */
   public java.lang.Number getAlertCount(  ) ;

   /**
    * Get the number of alerts for the given array of AppdefEntityID's
    */
   public int[] getAlertCount( org.hyperic.hq.appdef.shared.AppdefEntityID[] ids ) ;

   /**
    * Processes {@link AlertConditionSatisfiedZEvent} that indicate that an alert should be created To minimize StaleStateExceptions, this method should only be called once in one transaction.
    */
   public void fireAlert( org.hyperic.hq.measurement.server.session.AlertConditionsSatisfiedZEvent event ) ;

   /**
    * Get a collection of all alerts
    */
   public org.hyperic.util.pager.PageList findAllAlerts(  ) ;

   /**
    * Get a collection of alerts for an AppdefEntityID
    * @throws PermissionException
    */
   public org.hyperic.util.pager.PageList findAlerts( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get a collection of alerts for an AppdefEntityID and time range
    * @throws PermissionException
    */
   public org.hyperic.util.pager.PageList findAlerts( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.appdef.shared.AppdefEntityID id,long begin,long end,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * A more optimized look up which includes the permission checking
    */
   public java.util.List findAlerts( java.lang.Integer subj,int priority,long timeRange,long endTime,boolean inEsc,boolean notFixed,java.lang.Integer groupId,org.hyperic.hibernate.PageInfo pageInfo ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * A more optimized look up which includes the permission checking
    * @return {@link List} of {@link Alert}s
    */
   public java.util.List findAlerts( java.lang.Integer subj,int priority,long timeRange,long endTime,boolean inEsc,boolean notFixed,java.lang.Integer groupId,java.lang.Integer alertDefId,org.hyperic.hibernate.PageInfo pageInfo ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Search alerts given a set of criteria
    * @param timeRange the amount of milliseconds prior to current that the alerts will be contained in. e.g. the beginning of the time range will be (current - timeRante)
    * @param page TODO
    * @param includes {@link List} of {@link AppdefEntityID}s to filter, may be null for all.
    */
   public java.util.List findAlerts( org.hyperic.hq.authz.server.session.AuthzSubject subj,int count,int priority,long timeRange,long endTime,java.util.List includes ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Find escalatables for a resource in a given time range.
    * @see findAlerts(AuthzSubject, int, int, long, long, List)
    */
   public java.util.List findEscalatables( org.hyperic.hq.authz.server.session.AuthzSubject subj,int count,int priority,long timeRange,long endTime,java.util.List includes ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * A more optimized look up which includes the permission checking
    */
   public int getUnfixedCount( java.lang.Integer subj,long timeRange,long endTime,java.lang.Integer groupId ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get the long reason for an alert
    */
   public java.lang.String getShortReason( org.hyperic.hq.events.server.session.Alert alert ) ;

   /**
    * Get the long reason for an alert
    */
   public java.lang.String getLongReason( org.hyperic.hq.events.server.session.Alert alert ) ;

   public void handleSubjectRemoval( org.hyperic.hq.authz.server.session.AuthzSubject subject ) ;

}
