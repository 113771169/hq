/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.events.shared;

/**
 * Local interface for AlertDefinitionManager.
 */
public interface AlertDefinitionManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Create a new alert definition
    */
   public org.hyperic.hq.events.shared.AlertDefinitionValue createAlertDefinition( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.events.shared.AlertDefinitionValue a ) throws org.hyperic.hq.events.AlertDefinitionCreateException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Create a new alert definition
    */
   public org.hyperic.hq.events.shared.AlertDefinitionValue createAlertDefinition( org.hyperic.hq.events.shared.AlertDefinitionValue a ) ;

   /**
    * Update just the basics
    * @throws PermissionException
    */
   public void updateAlertDefinitionBasic( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer id,java.lang.String name,java.lang.String desc,int priority,boolean activate ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Update an alert definition
    */
   public org.hyperic.hq.events.shared.AlertDefinitionValue updateAlertDefinition( org.hyperic.hq.events.shared.AlertDefinitionValue adval ) throws org.hyperic.hq.events.AlertConditionCreateException, org.hyperic.hq.events.ActionCreateException, javax.ejb.RemoveException;

   /**
    * Activate/deactivate an alert definitions.
    */
   public void updateAlertDefinitionsActiveStatus( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer[] ids,boolean activate ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Activate/deactivate an alert definition.
    */
   public void updateAlertDefinitionActiveStatus( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.events.server.session.AlertDefinition def,boolean activate ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Enable/Disable an alert definition. For internal use only where the mtime does not need to be reset on each update.
    * @return <code>true</code> if the enable/disable succeeded.
    */
   public boolean updateAlertDefinitionInternalEnable( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.events.server.session.AlertDefinition def,boolean enable ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Enable/Disable an alert definition. For internal use only where the mtime does not need to be reset on each update.
    * @return <code>true</code> if the enable/disable succeeded.
    */
   public boolean updateAlertDefinitionInternalEnable( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer defId,boolean enable ) throws javax.ejb.FinderException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Set the escalation on the alert definition
    */
   public void setEscalation( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer defId,java.lang.Integer escId ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Returns the {@link AlertDefinition}s using the passed escalation.
    */
   public java.util.Collection getUsing( org.hyperic.hq.escalation.server.session.Escalation e ) ;

   /**
    * Remove alert definitions
    */
   public void deleteAlertDefinitions( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer[] ids ) throws javax.ejb.RemoveException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Set Resource to null on entity's alert definitions
    */
   public void disassociateResource( org.hyperic.hq.authz.server.session.Resource r ) ;

   /**
    * Clean up alert definitions and alerts for removed resources
    */
   public void cleanupAlertDefinitions( org.hyperic.hq.appdef.shared.AppdefEntityID aeid ) ;

   /**
    * Find an alert definition and return a value object
    * @throws PermissionException if user does not have permission to manage alerts
    */
   public org.hyperic.hq.events.shared.AlertDefinitionValue getById( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Find an alert definition
    * @throws PermissionException if user does not have permission to manage alerts
    */
   public org.hyperic.hq.events.server.session.AlertDefinition getByIdAndCheck( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Integer id ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Find an alert definition and return a basic value. This is called by the abstract trigger, so it does no permission checking.
    * @param id The alert def Id.
    */
   public org.hyperic.hq.events.server.session.AlertDefinition getByIdNoCheck( java.lang.Integer id ) ;

   /**
    * Check if an alert definition is a resource type alert definition.
    * @param id The alert def Id.
    * @return <code>true</code> if the alert definition is a resource type alert definition.
    * @throws FinderException
    */
   public boolean isResourceTypeAlertDefinition( java.lang.Integer id ) ;

   public org.hyperic.hq.events.server.session.AlertDefinition findAlertDefinitionById( java.lang.Integer id ) ;

   /**
    * Get an alert definition's name
    */
   public java.lang.String getNameById( java.lang.Integer id ) throws javax.ejb.FinderException;

   /**
    * Get an alert definition's conditions
    */
   public org.hyperic.hq.events.shared.AlertConditionValue[] getConditionsById( java.lang.Integer id ) throws javax.ejb.FinderException;

   /**
    * Get list of alert conditions for a resource or resource type
    */
   public boolean isAlertDefined( org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.Integer parentId ) ;

   /**
    * Get list of all alert conditions
    * @return a PageList of {@link AlertDefinitionValue} objects
    */
   public org.hyperic.util.pager.PageList findAllAlertDefinitions( org.hyperic.hq.authz.server.session.AuthzSubject subj ) ;

   /**
    * Get list of all child conditions
    */
   public org.hyperic.util.pager.PageList findChildAlertDefinitions( java.lang.Integer id ) ;

   /**
    * Get the resource-specific alert definition ID by parent ID, allowing for the query to return a stale copy of the alert definition (for efficiency reasons).
    * @param aeid The resource.
    * @param pid The ID of the resource type alert definition (parent ID).
    * @param allowStale <code>true</code> to allow stale copies of an alert definition in the query results; <code>false</code> to never allow stale copies, potentially always forcing a sync with the database.
    * @return The alert definition ID or <code>null</code> if no alert definition is found for the resource.
    */
   public java.lang.Integer findChildAlertDefinitionId( org.hyperic.hq.appdef.shared.AppdefEntityID aeid,java.lang.Integer pid,boolean allowStale ) ;

   /**
    * Find alert definitions passing the criteria.
    * @param minSeverity Specifies the minimum severity that the defs should be set for
    * @param enabled If non-null, specifies the nature of the returned definitions (i.e. only return enabled or disabled defs)
    * @param excludeTypeBased If true, exclude any alert definitions associated with a type-based def.
    * @param pInfo Paging information. The sort field must be a value from {@link AlertDefSortField}
    */
   public java.util.List findAlertDefinitions( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.events.AlertSeverity minSeverity,java.lang.Boolean enabled,boolean excludeTypeBased,org.hyperic.hibernate.PageInfo pInfo ) ;

   /**
    * Get the list of type-based alert definitions.
    * @param enabled If non-null, specifies the nature of the returned defs.
    * @param pInfo Paging information. The sort field must be a value from {@link AlertDefSortField}
    */
   public java.util.List findTypeBasedDefinitions( org.hyperic.hq.authz.server.session.AuthzSubject subj,java.lang.Boolean enabled,org.hyperic.hibernate.PageInfo pInfo ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get list of alert definition POJOs for a resource
    * @throws PermissionException if user cannot manage alerts for resource
    */
   public java.util.List findAlertDefinitions( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException;

   public org.hyperic.util.pager.PageList findAlertDefinitions( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.appdef.shared.AppdefEntityID id,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get list of alert definitions for a resource type.
    */
   public java.util.List findAlertDefinitions( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.authz.server.session.Resource prototype ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get list of alert conditions for a resource or resource type
    */
   public org.hyperic.util.pager.PageList findAlertDefinitions( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.appdef.shared.AppdefEntityTypeID aetid,org.hyperic.util.pager.PageControl pc ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get a list of all alert definitions for the resource and its descendents
    * @param subj the caller
    * @param res the root resource
    * @return a list of alert definitions
    */
   public java.util.List findRelatedAlertDefinitions( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.authz.server.session.Resource res ) ;

   /**
    * Get list of children alert definition for a parent alert definition
    */
   public org.hyperic.util.pager.PageList findAlertDefinitionChildren( java.lang.Integer id ) ;

   /**
    * Get list of alert definition names for a resource
    */
   public java.util.SortedMap findAlertDefinitionNames( org.hyperic.hq.authz.server.session.AuthzSubject subj,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.Integer parentId ) throws org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Get list of alert definition names for a resource
    */
   public java.util.SortedMap findAlertDefinitionNames( org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.Integer parentId ) ;

   /**
    * Return array of two values: enabled and act on trigger ID
    */
   public boolean isEnabled( java.lang.Integer id ) ;

   public int getActiveCount(  ) ;

   public void startup(  ) ;

}
