/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.control.shared;

/**
 * Local interface for ControlManager.
 */
public interface ControlManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Enable an entity for control
    */
   public void configureControlPlugin( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.product.PluginException, org.hyperic.hq.appdef.shared.ConfigFetchException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.appdef.shared.AgentNotFoundException;

   /**
    * Execute a single control action on a given entity.
    */
   public void doAction( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String action,java.lang.String args ) throws org.hyperic.hq.product.PluginException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Execute a single control action on a given entity.
    */
   public void doAction( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String action ) throws org.hyperic.hq.product.PluginException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Schedule a new control action.
    */
   public void doAction( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String action,org.hyperic.hq.scheduler.ScheduleValue schedule ) throws org.hyperic.hq.product.PluginException, org.hyperic.hq.authz.shared.PermissionException, org.quartz.SchedulerException;

   /**
    * Single control action for a group of given entities.
    */
   public void doGroupAction( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String action,java.lang.String args,int[] order ) throws org.hyperic.hq.product.PluginException, org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException;

   /**
    * Schedule a single control action for a group of given entities.
    * @throws SchedulerException
    */
   public void doGroupAction( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String action,int[] order,org.hyperic.hq.scheduler.ScheduleValue schedule ) throws org.hyperic.hq.product.PluginException, org.hyperic.hq.authz.shared.PermissionException, org.quartz.SchedulerException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException;

   /**
    * Get the supported actions for an appdef entity from the local ControlPluginManager
    */
   public java.util.List getActions( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.authz.shared.PermissionException, org.hyperic.hq.product.PluginNotFoundException, org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.grouping.shared.GroupNotCompatibleException;

   /**
    * Get the supported actions for an appdef entity from the local ControlPluginManager
    */
   public java.util.List getActions( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityTypeID aetid ) throws org.hyperic.hq.product.PluginNotFoundException;

   /**
    * Check if a compatible group's members have been enabled for control. A group is enabled for control if and only if all of its members have been enabled for control.
    * @return flag - true if group is enabled
    */
   public boolean isGroupControlEnabled( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

   /**
    * Checks with the plugin manager to find out if an entity's resource provides support for control.
    * @param resType - appdef entity (of all kinds inc. groups)
    * @return flag - true if supported
    */
   public boolean isControlSupported( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String resType ) ;

   /**
    * Checks with the plugin manager to find out if an entity's resource provides support for control.
    * @param resType - appdef entity (of all kinds inc. groups)
    * @return flag - true if supported
    */
   public boolean isControlSupported( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id,java.lang.String resType ) ;

   /**
    * Check if a an entity has been enabled for control.
    * @return flag - true if enabled
    */
   public boolean isControlEnabled( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) ;

   /**
    * Check if an entity has been enabled for control
    */
   public void checkControlEnabled( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.product.PluginException;

   /**
    * Get the control config response
    */
   public org.hyperic.util.config.ConfigResponse getConfigResponse( org.hyperic.hq.authz.server.session.AuthzSubject subject,org.hyperic.hq.appdef.shared.AppdefEntityID id ) throws org.hyperic.hq.product.PluginException;

   /**
    * Send an agent a plugin configuration. This is needed when agents restart, since they do not persist control plugin configuration.
    * @param pluginName Name of the plugin to get the config for
    * @param merge If true, merge the product and control config data
    */
   public byte[] getPluginConfiguration( java.lang.String pluginName,boolean merge ) throws org.hyperic.hq.product.PluginException;

   /**
    * Receive status information about a previous control action
    */
   public void sendCommandResult( int id,int result,long startTime,long endTime,java.lang.String message ) ;

   /**
    * Accept an array of appdef entity Ids and verify control permission on each entity for specified subject. Return only the set of entities that have authorization.
    * @return List of entities subject is authz to control NOTE: Returns an empty list when no resources are found.
    */
   public java.util.List batchCheckControlPermissions( org.hyperic.hq.authz.server.session.AuthzSubject caller,org.hyperic.hq.appdef.shared.AppdefEntityID[] entities ) throws org.hyperic.hq.appdef.shared.AppdefEntityNotFoundException, org.hyperic.hq.authz.shared.PermissionException;

}
