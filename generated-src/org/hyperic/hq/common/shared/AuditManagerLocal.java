/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.common.shared;

/**
 * Local interface for AuditManager.
 */
public interface AuditManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Save an audit and all of it's children.
    */
   public void saveAudit( org.hyperic.hq.common.server.session.Audit a ) ;

   /**
    * If there is currently an audit in progress (a container), fetch it.
    */
   public org.hyperic.hq.common.server.session.Audit getCurrentAudit(  ) ;

   /**
    * Delete an audit and all its children.
    */
   public void deleteAudit( org.hyperic.hq.common.server.session.Audit a ) ;

   public void popAll(  ) ;

   /**
    * Pop the audit container off the stack.
    * @param allowEmpty If true, allow the container to pop and be saved with no children. If the container is empty, and this is true, simply delete it
    */
   public void popContainer( boolean allowEmpty ) ;

   /**
    * Push a global audit container onto the stack. Any subsequent audits created (via saveAudit) will be added to this container.
    */
   public void pushContainer( org.hyperic.hq.common.server.session.Audit newContainer ) ;

   public java.util.List find( org.hyperic.hq.authz.server.session.AuthzSubject me,org.hyperic.hibernate.PageInfo pInfo,long startTime,long endTime,org.hyperic.hq.common.server.session.AuditImportance minImportance,org.hyperic.hq.common.server.session.AuditPurpose purpose,org.hyperic.hq.authz.server.session.AuthzSubject target,java.lang.String klazz ) ;

   public void handleResourceDelete( org.hyperic.hq.authz.server.session.Resource r ) ;

   public void handleSubjectDelete( org.hyperic.hq.authz.server.session.AuthzSubject s ) ;

   public void startup(  ) ;

}
