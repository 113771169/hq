/*
 * Generated by XDoclet - Do not edit!
 */
package org.hyperic.hq.common.shared;

/**
 * Local interface for ServerConfigManager.
 */
public interface ServerConfigManagerLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * Get the "root" server configuration, that means those keys that have the NULL prefix.
    * @return Properties
    */
   public java.util.Properties getConfig(  ) throws org.hyperic.util.ConfigPropertyException;

   /**
    * Get the server configuration
    * @param prefix The prefix of the configuration to retrieve.
    * @return Properties
    */
   public java.util.Properties getConfig( java.lang.String prefix ) throws org.hyperic.util.ConfigPropertyException;

   /**
    * Set the server configuration
    * @throws ConfigPropertyException - if the props object is missing a key that's currently in the database
    */
   public void setConfig( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.util.Properties newProps ) throws org.hyperic.hq.common.ApplicationException, org.hyperic.util.ConfigPropertyException;

   /**
    * Set the server Configuration
    * @param prefix The config prefix to use when setting properties. The prefix is used for namespace protection and property scoping.
    * @param newProps The Properties to set.
    * @throws ConfigPropertyException - if the props object is missing a key that's currently in the database
    */
   public void setConfig( org.hyperic.hq.authz.server.session.AuthzSubject subject,java.lang.String prefix,java.util.Properties newProps ) throws org.hyperic.hq.common.ApplicationException, org.hyperic.util.ConfigPropertyException;

   /**
    * Run an analyze command on all non metric tables. The metric tables are handled seperately using analyzeHqMetricTables() so that only the tables that have been modified are analyzed.
    * @return The time taken in milliseconds to run the command.
    */
   public long analyzeNonMetricTables(  ) ;

   /**
    * Run an analyze command on both the current measurement data slice and the previous data slice if specified.
    * @param analyzePrevMetricDataTable tells method to analyze previous metric data table as well as the current.
    * @return The time taken in milliseconds to run the command.
    */
   public long analyzeHqMetricTables( boolean analyzePrevMetricDataTable ) ;

   /**
    * Run database-specific cleanup routines -- on PostgreSQL we do a VACUUM ANALYZE. On other databases we just return -1. Since 3.1 we do not want to vacuum the hq_metric_data tables, only the compressed eam_measurement_xxx tables.
    * @return The time it took to vaccum, in milliseconds, or -1 if the database is not PostgreSQL.
    */
   public long vacuum(  ) ;

   /**
    * Get all the {@link ConfigProperty}s
    */
   public java.util.Collection getConfigProperties(  ) ;

   /**
    * Gets the GUID for this HQ server instance. The GUID is persistent for the duration of an HQ install and is created upon the first call of this method. If for some reason it can't be determined, 'unknown' will be returned.
    */
   public java.lang.String getGUID(  ) ;

}
