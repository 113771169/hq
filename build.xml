<?xml version="1.0"?>

<project name="HQ" basedir=".">
	<property environment="ENV" />

	<!-- User defined overrides -->
	<property file="${user.home}/.hq/build.properties" />

	<property name="hq.home" location="." />

	<!-- Default build properties -->
	<property file="build.properties" />

	<!-- Version file -->
	<property name="version.properties" value="${hq.home}/hq-version.properties" />
	<property file="${version.properties}" />
	<property name="release.comment" value="Development Build" />
	<property name="hq.isDev" value="true" />

	<!-- ==================== Defaults ==================== -->
	<property name="hq.web" location="${hq.home}/hq-web" />
	<property name="hq.installer" location="${hq.home}/hq-installer" />
	<property name="hq.common" location="${hq.home}/hq-common" />
	<property name="hq.bootstrap" location="${hq.home}/hq-bootstrap" />
	<property name="hq.util" location="${hq.home}/hq-util" />
	<property name="hq.pdk.shared" location="${hq.home}/hq-pdk-shared" />
	<property name="hq.lather" location="${hq.home}/hq-lather" />
	<property name="hq.pdk.agent" location="${hq.home}/hq-agent/hq-agent-pdk" />
	<property name="hq.agent" location="${hq.home}/hq-agent/hq-agent-core" />
	<property name="hq.agent.handlers" location="${hq.home}/hq-agent/hq-agent-handlers" />
	<property name="hq.plugins" location="${hq.home}/hq-plugins" />

	<property name="tomcat.home" location="${ENV.TOMCAT_HOME}" />


	<property name="build.dir" location="${basedir}/build" />
	<property name="archive.basename" value="hyperic-hq" />
	<property name="archive.build.dir" location="${build.dir}/archive" />


	<!-- Native libs -->
	<property name="hq.bin" location="${hq.common}/thirdparty/hq_bin" />
	<property name="sigar.lib" location="${hq.bin}/sigar_bin/lib" />
	<property name="db2monitor.dir" location="${hq.bin}/db2monitor_bin" />
	<property name="launcher.dir" location="${hq.bin}/launcher_bin" />

	<!-- Thirdparty libs -->
	<property name="thirdparty.lib" location="${basedir}/hq-common/thirdparty/lib" />
	<property name="hibernate.lib" location="${thirdparty.lib}/hibernate" />
	<property name="tapestry_lib" location="${thirdparty.lib}/tapestry" />

	<property name="webapp.home" location="${hq.home}/hq-web/src/main/webapp" />
	<property name="war.dir" location="${hq.web}/target/war-expanded" />
	<property name="ROOT.war" location="${build.dir}/ROOT.war" />
	<property name="agent.dir" location="${build.dir}/agent" />
	<property name="agent.bundle.dir" value="agent-${version}-${build}" />

	<!-- PDK destination -->
	<property name="pdk.dir" location="${agent.dir}/bundles/${agent.bundle.dir}/pdk" />

	<property name="pdk.lib" location="${pdk.dir}/lib" />
	<property name="pdk.plugins" location="${pdk.dir}/plugins" />
	<property name="pdk.mibs" location="${pdk.dir}/mibs" />
	<property name="pdk.scripts" location="${pdk.dir}/scripts" />

	<!-- This is used by the PluginJar task to resolve location of included XML during validation -->
	<property name="agent.pdkDir" location="${build.dir}" />


	<!-- Java Service Wrapper destination -->
	<property name="wrapper.lib" location="${hq.bin}/wrapper_bin/lib" />
	<property name="wrapper.bin" location="${hq.bin}/wrapper_bin/bin" />


	<!-- Location to pack plugins (pre-copy to PDK and Server) -->
	<property name="plugin.dir" value="${build.dir}/plugins" />

	<property name="installer.dir" value="${build.dir}/installer" />

	<property name="tomcat.deploy.dir" value="${tomcat.home}/webapps" />


	<path id="pdknative">
		<fileset dir="${sigar.lib}" includes="*.jar" />
		<fileset dir="${db2monitor.dir}" includes="lib/db2monitor.jar" />
	</path>

	<path id="antjars">
		<fileset dir="${thirdparty.lib}" includes="ant*.jar" />
	</path>

	<path id="alljars">
		<path refid="pdknative" />
		<fileset dir="${thirdparty.lib}" includes="*.jar" excludes="ant*.jar" />
		<fileset dir="${thirdparty.lib}" includes="*.zip" />
		<fileset dir="${thirdparty.lib}/oracle_jdbc" includes="*.jar" />
		<fileset dir="${thirdparty.lib}/postgresql" includes="postgresql-8.2-*.jdbc3.jar" />
		<fileset dir="${thirdparty.lib}/mysql_jdbc" includes="mysql*.jar" />
		<fileset dir="${thirdparty.lib}/mx4j" includes="*.jar" />
		<fileset dir="${thirdparty.lib}/spring" includes="*.jar" />
		<fileset dir="${thirdparty.lib}/activemq" includes="*.jar" />
		<fileset dir="${thirdparty.lib}/tapestry" includes="*.jar" />
		<fileset dir="${thirdparty.lib}/tomcat-jdbc" includes="*.jar" />
		<fileset dir="${wrapper.lib}" includes="*.jar" />
		<fileset dir="${hibernate.lib}" includes="*.jar" />
		<fileset dir="${hq.plugins}" includes="**/build-lib/*.jar" />
		<fileset dir="${hq.plugins}" includes="**/lib/*.jar" />
	</path>

	<path id="testjars">
		<path refid="alljars" />
	    <fileset dir="${thirdparty.lib}/test" includes="*.jar"/>
	</path>

	<path id="pdkjars">
		<path location="${hq.pdk.shared}/target/classes" />
		<path location="${hq.common}/target/classes" />
		<path location="${hq.util}/target/classes" />
		<path refid="alljars" />
	</path>

	<path id="custom-ant-tasks.path">
		<path refid="alljars" />
		<path location="${hq.installer}/target/classes" />
		<path location="${hq.common}/target/classes" />
		<path location="${hq.util}/target/classes" />
	</path>

	<path id="agent.compile.classpath">
		<path refid="alljars" />
		<path refid="testjars" />
		<path location="${hq.util}/target/classes" />
		<path location="${hq.common}/target/classes" />
		<path location="${hq.lather}/target/classes" />
		<path location="${hq.pdk.shared}/target/classes" />
		<path location="${hq.pdk.agent}/target/classes" />
		<path location="${hq.agent}/target/classes" />
	</path>

	<path id="agent.handler.compile.classpath">
		<path refid="alljars" />
		<path refid="testjars" />
		<path location="${hq.util}/target/classes" />
		<path location="${hq.common}/target/classes" />
		<path location="${hq.lather}/target/classes" />
		<path location="${hq.pdk.shared}/target/classes" />
		<path location="${hq.pdk.agent}/target/classes" />
		<path location="${hq.agent}/target/classes" />
	</path>

	<path id="agent.pdk.compile.classpath">
		<path refid="alljars" />
		<path refid="testjars" />
		<path location="${hq.util}/target/classes" />
		<path location="${hq.common}/target/classes" />
		<path location="${hq.lather}/target/classes" />
		<path location="${hq.pdk.shared}/target/classes" />
		<path location="${hq.pdk.agent}/target/classes" />
	</path>

	<path id="web.compile.classpath">
		<path refid="alljars" />
		<path refid="testjars" />
		<path location="${hq.util}/target/classes" />
		<path location="${hq.common}/target/classes" />
		<path location="${hq.lather}/target/classes" />
		<path location="${hq.pdk.shared}/target/classes" />
		<path location="${hq.web}/target/classes" />
	</path>

	<path id="shared.compile.classpath">
		<path refid="alljars" />
		<path refid="testjars" />
		<path location="${hq.util}/target/classes" />
		<path location="${hq.common}/target/classes" />
		<path location="${hq.lather}/target/classes" />
		<path location="${hq.pdk.shared}/target/classes" />
	</path>
	
	<path id="bootstrap.compile.classpath">
		<path refid="shared.compile.classpath"/>
		<path location="${hq.bootstrap}/target/classes" />
	</path>

	<!-- Source common targets -->
	<import file="${hq.home}/build_util/util-build.xml" />
	<import file="${hq.home}/build_util/test-build.xml" />


	<target name="init-taskdefs" unless="init-taskdefs.notrequired">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="antjars" />
		<taskdef name="for" classname="net.sf.antcontrib.logic.For" classpathref="antjars" />
		<taskdef name="post" classname="net.sf.antcontrib.net.PostTask" classpathref="antjars" />
		<!-- validate pure-xml plugins -->
		<taskdef name="plugincopy" classname="org.hyperic.hq.product.ant.PluginCopy" classpathref="pdkjars" />
		<taskdef name="hqplugin" classname="org.hyperic.hq.product.ant.PluginJar" classpathref="pdkjars" />
		<property name="init-taskdefs.notrequired" value="true" />
	</target>

	<target name="init-install-taskdefs" depends="init-taskdefs" unless="init-install-taskdefs.notrequired">
		<taskdef resource="org/hyperic/tools/ant/ant-tools.properties" classpathref="custom-ant-tasks.path" />
		<property name="init-install-taskdefs.notrequired" value="true" />
	</target>


	<!-- ==================== Compile java sources ==================== -->


	<target name="compile-server" depends="compile-shared,compile-bootstrap,compile-web,compile-installer" />
	
	<target name="compile-bootstrap">
		<compile-sources classpath.id="shared.compile.classpath" src.dir="${hq.bootstrap}/src/main/java" resource.dir="${hq.bootstrap}/src/main/resources" output.dir="${hq.bootstrap}/target/classes" />
	</target>

	<target name="compile-shared">
		<compile-sources classpath.id="shared.compile.classpath" src.dir="${hq.util}/src/main/java" resource.dir="${hq.util}/src/main/resources" output.dir="${hq.util}/target/classes" />
		<compile-sources classpath.id="shared.compile.classpath" src.dir="${hq.common}/src/main/java" resource.dir="${hq.common}/src/main/resources" output.dir="${hq.common}/target/classes" />
		<compile-sources classpath.id="shared.compile.classpath" src.dir="${hq.lather}/src/main/java" resource.dir="${hq.lather}/src/main/resources" output.dir="${hq.lather}/target/classes" />
		<compile-sources classpath.id="shared.compile.classpath" src.dir="${hq.pdk.shared}/src/main/java" resource.dir="${hq.pdk.shared}/src/main/resources" output.dir="${hq.pdk.shared}/target/classes" />
	</target>

	<target name="compile-web" depends="compile-shared">
		<compile-sources classpath.id="web.compile.classpath" src.dir="${hq.web}/src/main/java" resource.dir="${hq.web}/src/main/resources" output.dir="${hq.web}/target/classes" />
		<copy toDir="${hq.web}/target/classes">
			<fileset dir="${hq.web}/src/main/java" excludes="**/*.java" />
		</copy>
	</target>


	<target name="compile-installer">
		<path id="compile.classpath">
			<path refid="alljars" />
			<path refid="testjars" />
			<path location="${hq.util}/target/classes" />
			<path location="${hq.common}/target/classes" />
			<path location="${hq.pdk.shared}/target/classes" />
			<path location="${hq.web}/target/classes" />
		</path>
		<compile-sources classpath.id="compile.classpath" src.dir="${hq.installer}/src/main/java" resource.dir="${hq.installer}/src/main/resources" output.dir="${hq.installer}/target/classes" />
	</target>

	<target name="compile-agent" depends="compile-agent-pdk">
		<compile-sources classpath.id="agent.compile.classpath" src.dir="${hq.agent}/src/main/java" resource.dir="${hq.agent}/src/main/resources" output.dir="${hq.agent}/target/classes" />
		<compile-agent-handlers classpath.id="agent.handler.compile.classpath" handler.name="autoinventory" />
		<compile-agent-handlers classpath.id="agent.handler.compile.classpath" handler.name="bizapp" />
		<compile-agent-handlers classpath.id="agent.handler.compile.classpath" handler.name="commands" />
		<compile-agent-handlers classpath.id="agent.handler.compile.classpath" handler.name="control" />
		<compile-agent-handlers classpath.id="agent.handler.compile.classpath" handler.name="livedata" />
		<compile-agent-handlers classpath.id="agent.handler.compile.classpath" handler.name="measurement" />
	</target>

	<target name="compile-agent-pdk" depends="compile-shared">
		<compile-sources classpath.id="agent.pdk.compile.classpath" src.dir="${hq.pdk.agent}/src/main/java" resource.dir="${hq.pdk.agent}/src/main/resources" output.dir="${hq.pdk.agent}/target/classes" />
	</target>

	<macrodef name="compile-agent-handlers">
		<attribute name="handler.name" />
		<attribute name="classpath.id" />
		<sequential>
			<mkdir dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/classes" />
			<hq-javac destdir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/classes">
				<classpath refid="@{classpath.id}" />
				<src>
					<dirset dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}">
						<include name="src/main/java" />
					</dirset>
				</src>
			</hq-javac>
			<copy toDir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/classes">
				<fileset dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/src/main/resources" includes="*" erroronmissingdir="false" />
			</copy>
		</sequential>
	</macrodef>

	<target name="compile-plugins" depends="compile-agent">
		<compile-plugin name="apache" />

		<compile-plugin name="tomcat" />

		<compile-plugin name="iplanet" />

		<compile-plugin name="oracle" />

		<compile-plugin name="oc4j" />

		<compile-plugin name="db2" />
		
		<compile-plugin name="db2jdbc" />

		<compile-plugin name="postgresql" />

		<compile-plugin name="mysql" />

		<compile-plugin name="samba" />

		<compile-plugin name="spring" />

		<compile-plugin name="sybase" />

		<compile-plugin name="mysql_stats" />

		<compile-plugin name="coldfusion" />

		<compile-plugin name="alfresco" />

		<compile-plugin name="zimbra" />

		<compile-plugin name="openldap" />

		<compile-plugin name="servlet" />

		<compile-plugin name="jboss" />

		<compile-plugin name="system" />

		<compile-plugin name="weblogic" />

		<compile-plugin name="websphere" />



		<compile-plugin name="exchange" />

		<compile-plugin name="iis" />

		<compile-plugin name="dotnet" />

		<compile-plugin name="mssql" />

		<compile-plugin name="ntp" />

		<compile-plugin name="bind" />

		<compile-plugin name="postfix" />

		<compile-plugin name="sqlquery" />

		<compile-plugin name="netdevice" />

		<compile-plugin name="netservices" />

		<compile-plugin name="nagios" />

		<compile-plugin name="ntds" />

		<compile-plugin name="memcached" />

		<compile-plugin name="perlbal" />

		<compile-plugin name="informix" />

		<compile-plugin name="vim" />

		<compile-plugin name="vmware" />

		<compile-plugin name="xen" />

		<compile-plugin name="groovy-scripting" />

		<!-- special case.  hqagent plugin gets to reference hq-agent-core in classpath b/c its used for agent to self monitor.  Other plugins should not depend on this -->
		<mkdir dir="${hq.plugins}/hqagent/target/classes" />
		<hq-javac destdir="${hq.plugins}/hqagent/target/classes">
			<src>
				<dirset dir="${hq.plugins}/hqagent">
					<include name="src/main/java" />
				</dirset>
			</src>
			<classpath>
				<path refid="alljars" />
				<path refid="testjars" />
				<path location="${hq.agent}/target/classes" />
				<path location="${hq.pdk.shared}/target/classes" />
				<path location="${hq.pdk.agent}/target/classes" />
				<path location="${hq.util}/target/classes" />
				<path location="${hq.common}/target/classes" />
			</classpath>
		</hq-javac>
	</target>

	<macrodef name="compile-plugin">
		<attribute name="name" />
		<sequential>
			<mkdir dir="${hq.plugins}/@{name}/target/classes" />
			<hq-javac destdir="${hq.plugins}/@{name}/target/classes">
				<src>
					<dirset dir="${hq.plugins}/@{name}">
						<include name="src/main/java" />
					</dirset>
				</src>
				<classpath>
					<path refid="alljars" />
					<path refid="testjars" />
					<path>
						<fileset dir="${hq.plugins}/@{name}" includes="build-lib/*.jar" />
					</path>
					<path>
						<fileset dir="${hq.plugins}/@{name}" includes="lib/*.jar" />
					</path>
					<path location="${hq.pdk.shared}/target/classes" />
					<path location="${hq.pdk.agent}/target/classes" />
					<path location="${hq.util}/target/classes" />
					<path location="${hq.common}/target/classes" />
				</classpath>
			</hq-javac>
		</sequential>
	</macrodef>


	<!-- ==================== Source code generation ==================== -->


	<import file="${hq.home}/build_util/hibernate-build.xml" />

	<!-- HQU -->
	<import file="${hq.home}/build_util/hqu-build.xml" />

	<!-- ================== DB Setup =================== -->

	<import file="${hq.home}/build_util/dbsetup-build.xml" />



	<!-- ==================== Packaging ==================== -->

	<!-- Bring in tasks for rolling the archives -->
	<import file="${hq.home}/build_util/archive-build.xml" />
	
	<target name="pack-bootstrap">
		<jar basedir="${hq.bootstrap}/target/classes" jarfile="${build.dir}/hq-bootstrap.jar"/>
	</target>


	<target name="pack-installer-archive" description="Packs the hyperic-hq-installer directory">
		<property name="archive-dir" location="${archive.build.dir}/${archive.basename}-installer" />
		<mkdir dir="${archive-dir}" />

		<!-- Copy agent dir -->
		<copy toDir="${archive-dir}/agent-${version}">
			<fileset dir="${agent.dir}">
				<include name="**" />
			</fileset>
		</copy>

		<!-- Copy installer dir -->
		<copy toDir="${archive-dir}/installer-${version}">
			<fileset dir="${build.dir}/installer">
				<include name="**" />
			</fileset>
		</copy>

		<!-- Copy SNMP and RT packages -->
		<copy toDir="${archive-dir}/agent-${version}/bundles/${agent.bundle.dir}/product_connectors">
			<fileset dir="${hq.bin}/product_connectors">
				<include name="**" />
			</fileset>
		</copy>

		<!-- Make server dirs -->
		<mkdir dir="${archive-dir}/server-${version}" />
		<mkdir dir="${archive-dir}/server-${version}/bin" />
		<mkdir dir="${archive-dir}/server-${version}/conf" />
		<mkdir dir="${archive-dir}/server-${version}/logs" />
		<mkdir dir="${archive-dir}/server-${version}/lib"/>
		<mkdir dir="${archive-dir}/server-${version}/wrapper" />
		<mkdir dir="${archive-dir}/server-${version}/wrapper/lib" />
		<mkdir dir="${archive-dir}/server-${version}/wrapper/sbin" />
		
		<!-- Copy wrapper binaries -->
		<copy todir="${archive-dir}/server-${version}/wrapper/sbin">
			<fileset dir="${wrapper.bin}" includes="*" />
		</copy>

		<copy todir="${archive-dir}/server-${version}/wrapper/lib">
			<fileset dir="${wrapper.lib}" includes="*" />
		</copy>

		<!-- Copy Tomcat -->
		<copy toDir="${archive-dir}/server-${version}/hq-engine/hq-server">
			<fileset dir="${build.dir}/apache-tomcat-${tomcat.version}">
				<include name="**" />
			</fileset>
		</copy>

		<!-- Copy server README -->
		<copy toFile="${archive-dir}/server-${version}/README.txt" file="${hq.installer}/SERVER-README.txt" />
		<replace file="${archive-dir}/server-${version}/README.txt">
			<replacefilter token="@@@VERSION@@@" value="${version}" />
		</replace>

		<!-- Copy agent README -->
		<copy toFile="${archive-dir}/agent-${version}/README.txt" file="${hq.installer}/AGENT-README.txt" />
		<replace file="${archive-dir}/agent-${version}/README.txt">
			<replacefilter token="@@@VERSION@@@" value="${version}" />
		</replace>

		<!-- Copy server startup scripts -->
		<copy todir="${archive-dir}/server-${version}/bin">
			<fileset dir="${hq.bootstrap}/bin" includes="**" />
		</copy>
		
		<!-- Copy server startup conf -->
		<copy todir="${archive-dir}/server-${version}/conf">
			<fileset dir="${hq.bootstrap}/conf" includes="**" />
		</copy>
			
		<!-- Pack server lib for bootstrap-->
		<copy todir="${archive-dir}/server-${version}/lib">
			<fileset dir="${build.dir}" includes="hq-bootstrap.jar"/>
			<fileset dir="${thirdparty.lib}/spring">
				<include name="*springframework.core-*.jar"/>
				<include name="*beans-*.jar"/>
				<include name="*asm-*.jar"/>
				<include name="*expression-*.jar"/>
				<include name="*springframework.context-*.jar"/>
			</fileset>
			<fileset dir="${thirdparty.lib}">
				<include name="commons-logging*.jar"/>
				<include name="ant-apache-log4j.jar"/>
				<include name="log4j-*.jar"/>
			</fileset>
			<fileset dir="${thirdparty.lib}/tomcat-jdbc" includes="*"/>
		</copy>		

		<!-- Copy WAR -->
		<property name="archive-war-dir" value="${archive-dir}/server-${version}/hq-engine/hq-server/webapps/ROOT" />
		<delete dir="${archive-war-dir}" />
		<mkdir dir="${archive-war-dir}" />
		<copy toDir="${archive-war-dir}">
			<fileset dir="${war.dir}">
				<include name="**" />
			</fileset>
		</copy>

		<!--Copy production-specific tomcat and HQ war files (must be done after deploying WAR to overwrite webapp config) -->
		<antcall target="prepare-tomcat">
			<param name="tomcat.home" value="${archive-dir}/server-${version}/hq-engine" />
		</antcall>

		<!-- Copy setup scripts to top-level of install bundle -->
		<copy toFile="${archive-dir}/setup.sh" file="${hq.installer}/bin/setup.sh" />
		<copy toFile="${archive-dir}/setup.bat" file="${hq.installer}/bin/setup.bat" />
		<!-- Replace version token in  setup scripts -->
		<replace file="${archive-dir}/setup.sh" token="@@@VERSION@@@" value="${version}" />
		<replace file="${archive-dir}/setup.bat" token="@@@VERSION@@@" value="${version}" />
		<!-- Remote setup scripts from installer's bin dir -->
		<delete file="${archive-dir}/installer-${version}/bin/setup.sh" />
		<delete file="${archive-dir}/installer-${version}/bin/setup.bat" />

		<!-- Set file permissions -->
		<antcall target="chmod-exec">
			<param name="chmod.dir" value="${archive.build.dir}" />
		</antcall>

		<!-- Packup the agent and server dirs -->
		<antcall target="compress-dir">
			<param name="archive-dir" value="${archive-dir}/agent-${version}" />
			<param name="archive-file" value="${archive-dir}/agent-${version}.tgz" />
			<param name="remove-archive-dir" value="true" />
		</antcall>
		<antcall target="compress-dir">
			<param name="archive-dir" value="${archive-dir}/server-${version}" />
			<param name="archive-file" value="${archive-dir}/server-${version}.tgz" />
			<param name="remove-archive-dir" value="true" />
		</antcall>
	</target>

	<target name="unpack-tomcat" description="Prepare Tomcat for use within HQ, mainly used by archive">
		<delete dir="${build.dir}/apache-tomcat-${tomcat.version}" />
		<mkdir dir="${build.dir}/apache-tomcat-${tomcat.version}" />
		<mkdir dir="${build.dir}/staging" />
		<get src="http://www.mirrorservice.org/sites/ftp.apache.org/tomcat/tomcat-6/v${tomcat.version}/bin/apache-tomcat-${tomcat.version}.zip" dest="${build.dir}/staging/tomcat.zip" verbose="true" usetimestamp="true" />
		<unzip src="${build.dir}/staging/tomcat.zip" dest="${build.dir}" />
	</target>

	<target name="prepare-tomcat">
		<!-- Overlay any modified files -->
		<copy todir="${tomcat.home}" overwrite="true">
			<fileset dir="${hq.installer}/hq-engine" includes="**" />
		</copy>
		<!-- Delete default logging config and add log4j to lib dir-->
		<delete file="${tomcat.home}/hq-server/conf/logging.properties"/>
		<copy todir="${tomcat.home}/hq-server/lib">
			<fileset dir="${thirdparty.lib}" includes="log4j-*.jar"/>
		</copy>
		<!-- Add generated keystore -->
		<available property="available.keystore" file="${tomcat.home}/conf/hyperic.keystore" />
		<antcall target="prepare-ssl" />
	</target>

	<target name="unpack-ant">
		<delete dir="${build.dir}/ant" />
		<mkdir dir="${build.dir}/ant" />
		<mkdir dir="${build.dir}/staging" />
		<get src="http://archive.apache.org/dist/ant/binaries/apache-ant-1.7.1-bin.tar.bz2" dest="${build.dir}/staging/ant.tar.bz2" verbose="true" usetimestamp="true" />
		<untar src="${build.dir}/staging/ant.tar.bz2" dest="${build.dir}/ant" compression="bzip2" />
	</target>



	<target name="build-hq-installer" description="Builds the hq-installer jar" depends="compile-installer,pack-hq-installer" />

	<target name="pack-hq-installer" description="Packs the hq-installer jar">
		<jar basedir="${hq.installer}/target/classes" jarfile="${build.dir}/hq-installer.jar" />
	</target>

        <target name="build-all" description="Builds all components" depends="build-agent,build-war" />

	<target name="pack-installer" description="Pack the installer" depends="dbsetup-uncombine,dbsetup-combine">

		<delete dir="${installer.dir}" />
		<mkdir dir="${installer.dir}" />
		<mkdir dir="${installer.dir}/bin" />
		<mkdir dir="${installer.dir}/lib" />
		<mkdir dir="${installer.dir}/data" />
		<mkdir dir="${installer.dir}/logs" />

		<!-- Pack installer jar -->
		<antcall target="pack-hq-installer" />

		<antcall target="pack-common" />

		<copy todir="${installer.dir}/lib">
			<fileset dir="${build.dir}">
				<include name="hq-common.jar" />
				<include name="hq-util.jar" />
				<include name="hq-installer.jar" />
			</fileset>
		</copy>
		
		<!-- Compile and pack server bootstrap jar so it will be available to be copied by pack-installer-archive in hq and ee-->
		<antcall target="compile-bootstrap"/>
		<antcall target="pack-bootstrap"/>

		<!-- Unpack and cleanup ant -->
		<antcall target="unpack-ant" />

		<!-- Copy ant binaries and database setup utilities -->
		<copy todir="${installer.dir}/bin" flatten="true">
			<fileset dir="${build.dir}/ant" includes="**/bin/*">
				<exclude name="**/bin/*.pl" />
				<exclude name="**/bin/*.py" />
				<exclude name="**/bin/antRun*" />
			</fileset>
		</copy>

		<!-- Copy ant libs and DB driver libs -->
		<copy todir="${installer.dir}/lib" flatten="true">
			<fileset dir="${build.dir}/ant" includes="**/lib/*" />
			<fileset dir="${sigar.lib}" includes="**" />
			<fileset dir="${thirdparty.lib}">
				<include name="postgresql/postgresql-8.2-*.jdbc3.jar" />
				<include name="mysql_jdbc/mysql*.jar" />
				<include name="oro-2.0.8.jar" />
				<include name="ant-contrib.jar" />
				<include name="commons-logging-1.0.4.jar" />
				<include name="commons-collections-3.2.jar" />
				<include name="hibernate/*.jar" />
				<include name="groovy-all-1.6.jar" />
				<include name="json.jar" />
			</fileset>
			<fileset dir="${thirdparty.lib}/spring">
				<include name="*springframework.core-*.jar"/>
				<include name="*beans-*.jar"/>
				<include name="*transaction-*.jar"/>
				<include name="*springframework.context-*.jar"/>
			</fileset>
				
		</copy>

		<!-- Copy dbsetup files -->
		<copy todir="${installer.dir}/data" file="${build.dir}/sql/schema-orig.xml" />
		<copy todir="${installer.dir}/data" file="${build.dir}/sql/data-orig.xml" />

		<!-- Copy install binaries and data -->
		<copy todir="${installer.dir}/bin">
			<fileset dir="${hq.installer}/bin" includes="*setup*" />
			<fileset dir="${hq.installer}/bin" includes="db-*.sh" />
			<fileset dir="${hq.installer}/bin" includes="db-*.bat" />
		</copy>
		<copy todir="${installer.dir}/data">
			<fileset dir="${hq.installer}/data" includes="**" />
		</copy>

		<antcall target="write-version-file">
			<param name="version-file" value="${installer.dir}/data/version.properties" />
		</antcall>

		<antcall target="chmod-exec">
			<param name="chmod.dir" value="${installer.dir}" />
		</antcall>
		
		
	</target>



	<target name="build-war" description="Build and create the war" depends="compile-server,compile-rendit,compile-plugins,pack-plugins,pack-war" />

	<target name="pack-war" description="Create the war directory structure ( use if you modify .jsp or other web files, but no sources )" depends="pack-rendit">
		<mkdir dir="${war.dir}" />
		<mkdir dir="${war.dir}/WEB-INF/lib" />
		<mkdir dir="${war.dir}/WEB-INF/classes" />

		<copy todir="${war.dir}">
			<fileset dir="${webapp.home}">
				<include name="**" />
			</fileset>
		</copy>

		<!-- Assumes all .classes and resource files have been compiled to target dir-->
		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${hq.home}/hq-web/target/classes">
				<include name="**" />
			</fileset>
		</copy>

		<!-- Write version file to WEB-INF/classes -->
		<antcall target="write-version-file">
			<param name="version-file" value="${war.dir}/WEB-INF/classes/hq-version.properties" />
		</antcall>

		<copy todir="${war.dir}/WEB-INF/lib/">
			<fileset dir="${thirdparty.lib}">
				<include name="commons-beanutils-1.8.0.jar" />
				<include name="commons-fileupload-1.2.1.jar" />
				<include name="commons-lang-2.3.jar" />
				<include name="commons-logging-1.0.4.jar" />
				<include name="com.springsource.org.apache.commons.pool-1.5.3.jar" />
				<include name="log4j-1.2.14.jar" />
				<include name="quartz-1.6.5.jar" />
				<include name="quartz-oracle-1.6.5.jar" />
				<include name="snmp4j*.jar" />
				<include name="dnsjava-2.0.3.jar" />
				<include name="ehcache-1.5.0.jar" />
				<include name="jdom-1.1.jar" />
				<include name="jsr107cache-1.0.jar" />
				<!-- EHCache 1.5 dep -->
				<include name="json.jar" />
				<include name="jug-asl-2.0.0.jar" />
				<include name="commons-httpclient-3.1.jar" />
				<include name="commons-codec-1.3.jar" />
				<!-- HTTPClient dep -->
				<include name="groovy-all-1.6.jar" />
				<include name="xstream-1.3.1.jar" />
				<include name="xpp3_min-1.1.4c.jar" />
				<include name="commons-collections-3.2.jar" />
				<include name="commons-chain-1.2.jar" />
				<include name="commons-digester-1.8.jar" />
				<include name="commons-validator-1.3.1.jar" />
				<include name="jstl-1.1.2.jar" />
				<include name="standard-1.1.2.jar" />
				<include name="struts-core-1.3.10.jar" />
				<include name="struts-extras-1.3.10.jar" />
				<include name="struts-taglib-1.3.10.jar" />
				<include name="struts-tiles-1.3.10.jar" />
				<include name="struts-el-1.3.10.jar" />
				<include name="urlrewrite-3.1.0.jar" />

				<include name="ant.jar" />
				<include name="ant-lancher.jar" />
				<include name="com.springsource.javax.activation*.jar" />
				<include name="com.springsource.javax.mail*.jar" />
				<include name="com.springsource.javax.transaction*.jar" />
				<include name="com.springsource.com.sun.xml.bind-*.jar" />
				<include name="com.springsource.javax.xml.*.jar" />
				<include name="com.springsource.org.apache.xbean.spring*.jar" />

				<include name="*aopalliance*.jar" />
				<include name="*dbcp*.jar" />
			</fileset>
			<fileset dir="${thirdparty.lib}/spring" includes="*.jar" />
			<fileset dir="${thirdparty.lib}/activemq" includes="*.jar" />
			<fileset dir="${thirdparty.lib}/tomcat-jdbc" includes="*.jar" />
			<fileset dir="${thirdparty.lib}/mysql_jdbc" includes="mysql*.jar"/>
			
			<fileset dir="${thirdparty.lib}/postgresql" includes="postgresql-8.2-*.jdbc3.jar" />



			<fileset dir="${hibernate.lib}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${tapestry_lib}">
				<include name="backport-util-concurrent-3.1.jar" />
				<include name="commons-fileupload-1.2.jar" />
				<include name="commons-io-1.4.jar" />
				<include name="commons-pool-1.4.jar" />
				<include name="hivemind-1.1.1.jar" />
				<include name="hivemind-lib-1.1.1.jar" />
				<include name="ognl-2.7.2.jar" />
				<include name="oro-2.0.8.jar" />
				<include name="portlet-api-1.0.jar" />
				<include name="tacos-core-4.1.2-20080213.jar" />
				<include name="tapdoc-0.7.0-20070512.jar" />
				<include name="tapdoc-0.7.0-20071218-sources" />
				<include name="tapestry-annotations-4.1.5.jar" />
				<include name="tapestry-archetype-4.1.2.jar" />
				<include name="tapestry-contrib-4.1.5.jar" />
				<include name="tapestry-framework-4.1.5.jar" />
				<include name="tapestry-portlet-4.1.5.jar" />
				<include name="tapestry-prop-1.0.0.jar" />
				<include name="tapestry-test-4.1.4-20080130-JUnit.jar" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF/lib">
			<fileset dir="${sigar.lib}" includes="*"/>
		</copy>

		<mkdir dir="${war.dir}/WEB-INF/gconsoleTemplates" />

		<copy todir="${war.dir}/WEB-INF/gconsoleTemplates" failonerror="false">
			<fileset dir="${user.home}/.hq/gconsoleTemplates" />
		</copy>

		<antcall target="pack-common" />

		<copy todir="${war.dir}/WEB-INF/lib/">
			<fileset dir="${build.dir}">
				<include name="hq-common.jar" />
				<include name="hq-util.jar" />
				<include name="hq-lather.jar" />
				<include name="hq-pdk-shared.jar" />
				<include name="hqu-groovy.jar" />
			</fileset>
		</copy>

		<antcall target="copy-plugins-to-server" />

		<!-- Pack UI plugins -->
		<antcall target="hqu-deploy">
			<param name="wardir" value="${war.dir}" />
		</antcall>

	</target>

	<target name="pack-common" description="Pack the common jars">
		<jar basedir="${hq.util}/target/classes" jarfile="${build.dir}/hq-util.jar">
		</jar>

		<jar basedir="${hq.common}/target/classes" jarfile="${build.dir}/hq-common.jar">
		</jar>

		<jar basedir="${hq.lather}/target/classes" jarfile="${build.dir}/hq-lather.jar">
		</jar>

		<jar basedir="${hq.pdk.shared}/target/classes" jarfile="${build.dir}/hq-pdk-shared.jar">
			<manifest>
				<attribute name="Main-Class" value="org.hyperic.hq.product.util.PluginMain" />
			</manifest>
		</jar>
	</target>

	<target name="pack-pdk-lib" description="Pack the PDK lib jars">
		<mkdir dir="${pdk.lib}" />
		<mkdir dir="${pdk.mibs}" />

		<antcall target="pack-common" />

		<copy todir="${pdk.lib}" file="${build.dir}/hq-common.jar" />
		<copy todir="${pdk.lib}" file="${build.dir}/hq-util.jar" />
		<copy todir="${pdk.lib}" file="${build.dir}/hq-pdk-shared.jar" />


		<jar basedir="${hq.pdk.agent}/target/classes" jarfile="${pdk.lib}/hq-pdk-agent.jar">
		</jar>

		<copy todir="${pdk.lib}">
			<fileset dir="${sigar.lib}" includes="*.*" />
			<fileset dir="${thirdparty.lib}">
				<!-- commons-{collections,beanutils} not in the
             agent classpath but required for
             PluginDumper scripts -->
				<include name="commons-collections-3.2.jar" />
				<include name="commons-beanutils-1.8.0.jar" />
				<include name="commons-logging-1.0.4.jar" />
				<include name="log4j-1.2.14.jar" />
				<include name="oro-2.0.8.jar" />
				<!-- RT -->
				<include name="snmp4j*.jar" />
				<!-- All SNMP monitoring -->
				<include name="ant.jar" />
				<!-- AI scans + util.TokenReplacer -->
				<include name="junit-3.8.jar" />
				<!-- test to help with support issues -->
				<include name="junit-4.4.jar" />
				<include name="commons-httpclient-3.1.jar" />
				<!-- Lather -->
				<include name="commons-codec-1.3.jar" />
				<!-- HTTPClient dep -->
				<!-- WebSphere: must be in the main classloader for reasons unknown -->
				<include name="activation.jar" />
				<!-- for hq-plugin.xml parser -->
				<include name="jdom-1.1.jar" />
				<!-- for PluginDumper args parser -->
				<include name="getopt.jar" />
				<include name="tomcat-jk.jar" />
				<!-- for SSH collector within netservices plugin -->
				<include name="jsch-0.1.34.jar" />
				<!-- for DNS collector within netservices plugin -->
				<include name="dnsjava-2.0.3.jar" />
				<!-- for JMX based plugins -->
				<include name="mx4j/*.jar" />
				<!-- for XPathAPI -->
				<include name="xalan.jar" />
				<include name="xml-apis.jar" />
				<!-- for live data translation -->
				<include name="json.jar" />
				<include name="xstream-1.3.1.jar" />
				<include name="xpp3_min-1.1.4c.jar" />
				<!-- for WS/Xen -->
				<include name="xmlrpc-client-3.1.jar" />
				<include name="xmlrpc-common-3.1.jar" />
				<include name="ws-commons-util-1.0.2.jar" />
				<include name="com.springsource.com.sun.xml.bind-*.jar" />
				<include name="com.springsource.javax.xml.*.jar" />
			</fileset>
			<fileset dir="${tapestry_lib}">
				<!-- for CollectorThread -->
				<include name="backport-util-concurrent-3.1.jar" />
			</fileset>
		</copy>



		<!-- Copy jdbc drivers for use with jdbc based plugins -->
		<mkdir dir="${pdk.lib}/jdbc" />
		<copy toDir="${pdk.lib}/jdbc">
			<fileset dir="${thirdparty.lib}/mysql_jdbc" includes="mysql*.jar" />
			<!-- Postgres plugin uses the 7.4.3 driver -->
			<fileset dir="${thirdparty.lib}/postgresql" includes="postgresql-7.4.3.jar" />
		</copy>
	</target>

	<!-- Build the plugins -->
	<target name="pack-plugins" depends="init-taskdefs">

		<mkdir dir="${plugin.dir}" />

		<copy todir="${plugin.dir}">
			<!-- copy shared xml pieces prior to validation-->
			<fileset dir="${hq.plugins}/process/src/main/resources">
				<include name="*.xml" />
			</fileset>
			<fileset dir="${hq.plugins}/jvm/src/main/resources" includes="*.xml" />
		</copy>


		<hqplugin name="apache" />


		<hqplugin name="tomcat" />

		<hqplugin name="iplanet" />

		<hqplugin name="oracle" />

		<hqplugin name="oc4j" />

		<hqplugin name="db2">
			<fileset dir="${db2monitor.dir}" includes="lib/*" />
		</hqplugin>
		
		<hqplugin name="db2jdbc" />

		<hqplugin name="postgresql" />

		<hqplugin name="mysql" />

		<hqplugin name="samba" />

		<hqplugin name="spring" />

		<hqplugin name="sybase" />

		<hqplugin name="mysql_stats" />

		<hqplugin name="coldfusion" />

		<hqplugin name="alfresco" />

		<hqplugin name="zimbra" />

		<hqplugin name="openldap" />

		<hqplugin name="servlet" />

		<hqplugin name="jboss" />

		<hqplugin name="system" />

		<hqplugin name="weblogic" />

		<hqplugin name="websphere" />

		<hqplugin name="hqagent" />

		<hqplugin name="exchange" />

		<hqplugin name="iis" />

		<hqplugin name="dotnet" />

		<hqplugin name="mssql" />

		<hqplugin name="ntp" />

		<hqplugin name="bind" />

		<hqplugin name="postfix" />

		<hqplugin name="sqlquery" />

		<hqplugin name="netdevice" />

		<hqplugin name="netservices" />

		<hqplugin name="nagios" />

		<hqplugin name="ntds" />

		<hqplugin name="memcached" />

		<hqplugin name="perlbal" />

		<hqplugin name="informix" />

		<hqplugin name="vim" />

		<hqplugin name="vmware" />

		<hqplugin name="xen">
			<!-- XXX Xen sdk built w/ 1.6 + mods for Xen 4.0 compat -->
			<fileset dir="${hq.plugins}/xen/target/classes" includes="com/xensource/xenapi/*.class" />
		</hqplugin>

		<hqplugin name="groovy-scripting" />

	</target>

	<!-- Copy plugins -->
	<target name="copy-plugins" depends="init-taskdefs">
		<mkdir dir="${pdk.plugins}" />
		<mkdir dir="${pdk.plugins}/scripting" />

		<copy todir="${pdk.plugins}">
			<!-- copy shared xml pieces prior to validation-->
			<fileset dir="${hq.plugins}/process/src/main/resources">
				<include name="*.xml" />
			</fileset>
			<fileset dir="${hq.plugins}/jvm/src/main/resources" includes="*.xml" />
		</copy>

		<echo message="Copying plugins from: ${plugin.dir}" />

		<!-- Copy plugins to agent -->
		<copy todir="${pdk.plugins}">
			<fileset dir="${plugin.dir}" excludes="${plugins.exclude}">
				<exclude name="*-scripting-plugin.jar" />
				<include name="*-plugin.jar" />
			</fileset>
		</copy>

		<copy todir="${pdk.plugins}/scripting">
			<fileset dir="${plugin.dir}" excludes="${plugins.exclude}">
				<include name="*-scripting-plugin.jar" />
			</fileset>
			<fileset dir="${thirdparty.lib}">
				<include name="groovy-all-1.6.jar" />
			</fileset>
		</copy>


		<mkdir dir="${pdk.dir}/examples" />
		<plugincopy todir="${pdk.dir}/examples">
			<fileset dir="hq-plugins/examples/src/main/resources" includes="*.xml" />
		</plugincopy>


		<plugincopy todir="${pdk.plugins}" file="hq-plugins/activemq/src/main/resources/activemq-plugin.xml" />
		<plugincopy todir="${pdk.plugins}" file="hq-plugins/geronimo/src/main/resources/geronimo-plugin.xml" />
		<plugincopy todir="${pdk.plugins}" file="hq-plugins/glassfish/src/main/resources/glassfish-plugin.xml" />
		<plugincopy todir="${pdk.plugins}" file="hq-plugins/hq-internal/src/main/resources/hq-internal-plugin.xml" />
		<plugincopy todir="${pdk.plugins}" file="hq-plugins/jetty/src/main/resources/jetty-plugin.xml" />
		<plugincopy todir="${pdk.plugins}" file="hq-plugins/jmx/src/main/resources/jmx-plugin.xml" />
		<plugincopy todir="${pdk.plugins}" file="hq-plugins/resin/src/main/resources/resin-plugin.xml" />
		<plugincopy todir="${pdk.plugins}" file="hq-plugins/sendmail/src/main/resources/sendmail-plugin.xml" />


		<!-- Copy scripts -->
		<mkdir dir="${pdk.scripts}" />
		<copy todir="${pdk.scripts}">
			<fileset dir="${hq.pdk.agent}/scripts" includes="*.*" />
		</copy>
	</target>

	<target name="copy-plugins-to-server" depends="init-taskdefs">
		<mkdir dir="${war.dir}/WEB-INF/hq-plugins" />
		<mkdir dir="${war.dir}/WEB-INF/hq-plugins/scripting" />

		<copy todir="${war.dir}/WEB-INF/hq-plugins">
			<fileset dir="${plugin.dir}" excludes="${plugins.exclude}">
				<exclude name="*-scripting-plugin.jar" />
				<include name="*-plugin.jar" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF/hq-plugins">
			<!-- copy shared xml pieces-->
			<fileset dir="${hq.plugins}/process/src/main/resources">
				<include name="*.xml" />
			</fileset>
			<fileset dir="${hq.plugins}/jvm/src/main/resources" includes="*.xml" />
		</copy>

		<copy todir="${war.dir}/WEB-INF/hq-plugins/scripting">
			<fileset dir="${plugin.dir}" excludes="${plugins.exclude}">
				<include name="*-scripting-plugin.jar" />
			</fileset>
			<fileset dir="${thirdparty.lib}">
				<include name="groovy-all-1.6.jar" />
			</fileset>
		</copy>

		<plugincopy todir="${war.dir}/WEB-INF/hq-plugins" file="hq-plugins/activemq/src/main/resources/activemq-plugin.xml" />
		<plugincopy todir="${war.dir}/WEB-INF/hq-plugins" file="hq-plugins/geronimo/src/main/resources/geronimo-plugin.xml" />
		<plugincopy todir="${war.dir}/WEB-INF/hq-plugins" file="hq-plugins/glassfish/src/main/resources/glassfish-plugin.xml" />
		<plugincopy todir="${war.dir}/WEB-INF/hq-plugins" file="hq-plugins/hq-internal/src/main/resources/hq-internal-plugin.xml" />
		<plugincopy todir="${war.dir}/WEB-INF/hq-plugins" file="hq-plugins/jetty/src/main/resources/jetty-plugin.xml" />
		<plugincopy todir="${war.dir}/WEB-INF/hq-plugins" file="hq-plugins/jmx/src/main/resources/jmx-plugin.xml" />
		<plugincopy todir="${war.dir}/WEB-INF/hq-plugins" file="hq-plugins/resin/src/main/resources/resin-plugin.xml" />
		<plugincopy todir="${war.dir}/WEB-INF/hq-plugins" file="hq-plugins/sendmail/src/main/resources/sendmail-plugin.xml" />

	</target>


	<target name="pack-pdk" description="Pack the PDK" depends="pack-pdk-lib,pack-plugins,copy-plugins" />

	<!-- ==================== Agent packaging ==================== -->
	<!-- XXX use property to control debug/release properties -->

	<target name="pack-agent" description="Pack the agent">
		<mkdir dir="${agent.dir}" />
		<mkdir dir="${agent.dir}/bin" />
		<mkdir dir="${agent.dir}/log" />
		<mkdir dir="${agent.dir}/conf" />
		<mkdir dir="${agent.dir}/wrapper" />
		<mkdir dir="${agent.dir}/wrapper/lib" />
		<mkdir dir="${agent.dir}/wrapper/sbin" />
		<mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/lib" />
		<mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/lib" />
		<mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/rcfiles" />
		<mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/tmp" />
		<mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/conf" />

		<!-- Touch the agent log file so that "smart" unzippers don't forget
         to create the log directory -->
		<touch file="${agent.dir}/log/agent.log" />
		<touch file="${agent.dir}/bundles/${agent.bundle.dir}/tmp/empty" />

		<copy todir="${agent.dir}/bundles/${agent.bundle.dir}/lib" file="${build.dir}/hq-lather.jar" />

		<copy todir="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/lib">
			<fileset dir="${thirdparty.lib}/hibernate" includes="concurrent*.jar" />
		</copy>

		<jar basedir="${hq.agent.handlers}/hq-agent-handler-autoinventory/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-autoinventory.jar">
			<manifest>
				<attribute name="Main-Class" value="org.hyperic.hq.autoinventory.agent.server.AutoinventoryCommandsServer" />
			</manifest>
		</jar>

		<jar basedir="${hq.agent.handlers}/hq-agent-handler-bizapp/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-bizapp.jar">
			<manifest>
				<attribute name="Main-Class" value="org.hyperic.hq.bizapp.agent.server.CommandsServer" />
			</manifest>
		</jar>

		<jar basedir="${hq.agent.handlers}/hq-agent-handler-measurement/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-measurement.jar">
			<manifest>
				<attribute name="Main-Class" value="org.hyperic.hq.measurement.agent.server.MeasurementCommandsServer" />
			</manifest>
		</jar>

		<jar basedir="${hq.agent.handlers}/hq-agent-handler-commands/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-commands.jar">
			<manifest>
				<attribute name="Main-Class" value="org.hyperic.hq.agent.server.AgentCommandsServer" />
			</manifest>
		</jar>

		<jar basedir="${hq.agent.handlers}/hq-agent-handler-control/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-control.jar">
			<manifest>
				<attribute name="Main-Class" value="org.hyperic.hq.control.agent.server.ControlCommandsServer" />
			</manifest>
		</jar>

		<jar basedir="${hq.agent.handlers}/hq-agent-handler-livedata/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-livedata.jar">
			<manifest>
				<attribute name="Main-Class" value="org.hyperic.hq.livedata.agent.server.LiveDataCommandsServer" />
			</manifest>
		</jar>

		<!-- Agent jars -->
		<jar basedir="${hq.agent}/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/hq-agent-core.jar">
		</jar>

		<!-- version.properties to agent lib -->
		<antcall target="write-version-file">
			<param name="version-file" value="${agent.dir}/bundles/${agent.bundle.dir}/lib/hq-version.properties" />
		</antcall>

		<copy todir="${agent.dir}/wrapper/sbin">
			<fileset dir="${wrapper.bin}" includes="*" />
		</copy>

		<copy todir="${agent.dir}/wrapper/lib">
			<fileset dir="${wrapper.lib}" includes="*" />
		</copy>



		<!-- TODO: Copy and replace properties -->
		<copy file="${hq.agent}/src/main/resources/agent.properties" tofile="${agent.dir}/conf/agent.properties" />

		<copy file="${hq.agent}/src/main/resources/wrapper-master.conf" tofile="${agent.dir}/conf/wrapper.conf" />

		<copy file="${hq.agent}/bin/background.sh" tofile="${agent.dir}/bundles/${agent.bundle.dir}/background.sh" />
		<copy file="${hq.agent}/bin/background.bat" tofile="${agent.dir}/bundles/${agent.bundle.dir}/background.bat" />
		<copy file="${hq.agent}/src/main/resources/agent.jaas.config" tofile="${agent.dir}/bundles/${agent.bundle.dir}/jaas.config" />
		<copy file="${hq.agent}/bin/agent.rc" tofile="${agent.dir}/bundles/${agent.bundle.dir}/rcfiles/agent.rc" />
		<copy file="${hq.agent}/bin/hq-agent-master.sh" tofile="${agent.dir}/bin/hq-agent.sh" />
		<copy file="${hq.agent}/bin/hq-agent-master.bat" tofile="${agent.dir}/bin/hq-agent.bat" />

		<copy file="${hq.agent}/bin/hq-agent.sh" tofile="${agent.dir}/bundles/${agent.bundle.dir}/bin/hq-agent-nowrapper.sh" />

		<copy file="${hq.agent}/bin/hq-agent-wrapper.bat" tofile="${agent.dir}/bundles/${agent.bundle.dir}/bin/hq-agent.bat" />
		<copy file="${hq.agent}/bin/hq-agent-wrapper.sh" tofile="${agent.dir}/bundles/${agent.bundle.dir}/bin/hq-agent.sh" />

		<copy file="${hq.agent}/src/main/resources/wrapper.conf" tofile="${agent.dir}/bundles/${agent.bundle.dir}/conf/wrapper.conf" />

		<copy file="${hq.agent}/src/main/resources/rollback.properties" tofile="${agent.dir}/conf/rollback.properties" />
		<replace file="${agent.dir}/conf/rollback.properties">
			<replacefilter token="@@@AGENT_BUNDLE_DIR@@@" value="${agent.bundle.dir}" />
		</replace>

		<antcall target="chmod-exec">
			<param name="chmod.dir" value="${agent.dir}" />
		</antcall>

	</target>

	<target name="build-agent" description="Build and pack the agent directory structure" depends="compile-agent,compile-plugins,pack-pdk,pack-agent" />



	<!-- ==================== Generic targets ==================== -->

	<target name="clean" description="Clean the build directories">
		<delete dir="${build.dir}" />
		<delete dir="${hq.util}/target" />
		<delete dir="${hq.common}/target" />
		<delete dir="${hq.lather}/target" />
		<delete dir="${hq.pdk.shared}/target" />
		<delete dir="${hq.pdk.agent}/target" />
		<delete dir="${hq.agent}/target" />
		<delete dir="${hq.web}/target" />
		<delete dir="${hq.bootstrap}/target" />
		<delete dir="${hq.installer}/target" />
		<delete dir="${rendit_sys.dir}/target" />
		<delete includeemptydirs="true">
			<fileset dir="${hq.agent.handlers}" defaultexcludes="false" includes="*/target/**" />
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${hq.plugins}" defaultexcludes="false" includes="*/target/**" />
		</delete>
	</target>

	<target name="deploy" description="Copy the war to tomcat deploy dir ( slow )">
		<!-- Deploy app as ROOT -->
		<delete dir="${tomcat.deploy.dir}/ROOT" />
		<mkdir dir="${tomcat.deploy.dir}/ROOT" />
		<copy todir="${tomcat.deploy.dir}/ROOT">
			<fileset dir="${war.dir}" includes="**" />
		</copy>
	</target>

	<target name="redeploy" depends="undeploy,deploy" />

	<target name="undeploy" description="Remove the war from tomcat deploy dir">
		<delete dir="${tomcat.deploy.dir}/ROOT" />
	</target>

	<target name="hq-javadoc" depends="hibernate-prep">
		<!-- 
    set this in ~/hq/build.properties if you want it someplace other than 
    your source tree 
    -->
		<property name="hq.javadoc.dest.dir" location="${build.dir}/javadoc" />
		<property name="hq.api.version" value="${version}" />
		<mkdir dir="${hq.javadoc.dest.dir}" />
		<javadoc destdir="${hq.javadoc.dest.dir}" private="false" package="false" version="true" author="true" maxmemory="256M" use="true" packagenames="org.hyperic.*" additionalparam="-breakiterator" overview="doc/javadoc-overview.html" windowtitle="Hyperic HQ Management System">
			<sourcepath>
				<pathelement location="src" />
				<pathelement location="build/src" />
			</sourcepath>
			<classpath>
				<path refid="alljars" />
				<pathelement location="build/classes" />
			</classpath>
			<doctitle>
				<![CDATA[ Hyperic HQ  <br>API Specification ]]></doctitle>
			<header>
				<![CDATA[<font size="2">Hyperic HQ v. ${hq.api.version}</font>]]>
      </header>
		<bottom>
			<![CDATA[Copyright &#169; 2004-2006 Hyperic, Inc. <a href="mailto:info@hyperic.net">info@hyperic.net</a>, All Rights Reserved.]]>
      </bottom>
</javadoc>
</target>

<!-- Quality Targets -->
<target name="test" depends="compile-tests,run-tests" />

<target name="compile-tests" depends="init-taskdefs,init-tests">
<test-compile module.dir="${hq.agent}" compile.classpath.id="agent.compile.classpath" />
<test-compile module.dir="${hq.agent.handlers}/hq-agent-handler-autoinventory" compile.classpath.id="agent.handler.compile.classpath" />
<test-compile module.dir="${hq.agent.handlers}/hq-agent-handler-bizapp" compile.classpath.id="agent.handler.compile.classpath" />
<test-compile module.dir="${hq.agent.handlers}/hq-agent-handler-commands" compile.classpath.id="agent.handler.compile.classpath" />
<test-compile module.dir="${hq.agent.handlers}/hq-agent-handler-control" compile.classpath.id="agent.handler.compile.classpath" />
<test-compile module.dir="${hq.agent.handlers}/hq-agent-handler-livedata" compile.classpath.id="agent.handler.compile.classpath" />
<test-compile module.dir="${hq.agent.handlers}/hq-agent-handler-measurement" compile.classpath.id="agent.handler.compile.classpath" />
<test-compile module.dir="${hq.pdk.agent}" compile.classpath.id="agent.pdk.compile.classpath" />
<test-compile module.dir="${hq.common}" compile.classpath.id="shared.compile.classpath" />
<test-compile module.dir="${hq.util}" compile.classpath.id="shared.compile.classpath" />
<test-compile module.dir="${hq.lather}" compile.classpath.id="shared.compile.classpath" />
<test-compile module.dir="${hq.pdk.shared}" compile.classpath.id="shared.compile.classpath" />
<test-compile module.dir="${hq.web}" compile.classpath.id="web.compile.classpath" />
<test-compile module.dir="${hq.bootstrap}" compile.classpath.id="bootstrap.compile.classpath" />
</target>

<target name="run-tests" depends="init-taskdefs,init-tests">
<test-run module.dir="${hq.agent}" classpath.id="agent.compile.classpath" />
<test-run module.dir="${hq.agent.handlers}/hq-agent-handler-autoinventory" classpath.id="agent.handler.compile.classpath" />
<test-run module.dir="${hq.agent.handlers}/hq-agent-handler-bizapp" classpath.id="agent.handler.compile.classpath" />
<test-run module.dir="${hq.agent.handlers}/hq-agent-handler-commands" classpath.id="agent.handler.compile.classpath" />
<test-run module.dir="${hq.agent.handlers}/hq-agent-handler-control" classpath.id="agent.handler.compile.classpath" />
<test-run module.dir="${hq.agent.handlers}/hq-agent-handler-livedata" classpath.id="agent.handler.compile.classpath" />
<test-run module.dir="${hq.agent.handlers}/hq-agent-handler-measurement" classpath.id="agent.handler.compile.classpath" />
<test-run module.dir="${hq.pdk.agent}" classpath.id="agent.pdk.compile.classpath" />
<test-run module.dir="${hq.common}" classpath.id="shared.compile.classpath" />
<test-run module.dir="${hq.util}" classpath.id="shared.compile.classpath" />
<test-run module.dir="${hq.lather}" classpath.id="shared.compile.classpath" />
<test-run module.dir="${hq.pdk.shared}" classpath.id="shared.compile.classpath" />
<test-run module.dir="${hq.web}" classpath.id="web.compile.classpath" />
<test-run module.dir="${hq.bootstrap}" classpath.id="bootstrap.compile.classpath" />
</target>


<target name="instrument-tests" depends="clover.init">
<instrument-module input.dir="${hq.util}/src/test/java" staging.dir="${hq.util}/target/clover/staging/src/test/java" resource.dir="${hq.util}/src/test/resources" output.dir="${hq.util}/target/test-classes" classpath.id="shared.compile.classpath" />
<delete dir="${hq.util}/target/clover" quiet="true" />
<instrument-module input.dir="${hq.common}/src/test/java" staging.dir="${hq.common}/target/clover/staging/src/test/java" resource.dir="${hq.common}/src/test/resources" output.dir="${hq.common}/target/test-classes" classpath.id="shared.compile.classpath" />
<delete dir="${hq.common}/target/clover" quiet="true" />
<instrument-module input.dir="${hq.lather}/src/test/java" staging.dir="${hq.lather}/target/clover/staging/src/test/java" resource.dir="${hq.lather}/src/test/resources" output.dir="${hq.lather}/target/test-classes" classpath.id="shared.compile.classpath" />
<delete dir="${hq.lather}/target/clover" quiet="true" />
<instrument-module input.dir="${hq.pdk.shared}/src/test/java" staging.dir="${hq.pdk.shared}/target/clover/staging/src/test/java" resource.dir="${hq.pdk.shared}/src/test/resources" output.dir="${hq.pdk.shared}/target/test-classes" classpath.id="shared.compile.classpath" />
<delete dir="${hq.pdk.shared}/target/clover" quiet="true" />
<instrument-module input.dir="${hq.web}/src/test/java" staging.dir="${hq.web}/target/clover/staging/src/test/java" resource.dir="${hq.web}/src/test/resources" output.dir="${hq.web}/target/test-classes" classpath.id="web.compile.classpath" />
<delete dir="${hq.web}/target/clover" quiet="true" />
<instrument-module input.dir="${hq.bootstrap}/src/test/java" staging.dir="${hq.bootstrap}/target/clover/staging/src/test/java" resource.dir="${hq.bootstrap}/src/test/resources" output.dir="${hq.bootstrap}/target/test-classes" classpath.id="bootstrap.compile.classpath" />
<delete dir="${hq.bootstrap}/target/clover" quiet="true" />
<instrument-module classpath.id="agent.pdk.compile.classpath" input.dir="${hq.pdk.agent}/src/test/java" resource.dir="${hq.pdk.agent}/src/test/resources" output.dir="${hq.pdk.agent}/target/test-classes" staging.dir="${hq.pdk.agent}/target/clover/staging/src/test/java" />
<delete dir="${hq.pdk.agent}/target/clover" quiet="true" />
<instrument-module classpath.id="agent.compile.classpath" input.dir="${hq.agent}/src/test/java" resource.dir="${hq.agent}/src/test/resources" output.dir="${hq.agent}/target/test-classes" staging.dir="${hq.agent}/target/clover/staging/src/test/java" />
<delete dir="${hq.agent}/target/clover" quiet="true" />
<instrument-agent-handler-tests handler.name="autoinventory" />
<instrument-agent-handler-tests handler.name="bizapp" />
<instrument-agent-handler-tests handler.name="commands" />
<instrument-agent-handler-tests handler.name="control" />
<instrument-agent-handler-tests handler.name="livedata" />
<instrument-agent-handler-tests handler.name="measurement" />
</target>


<target name="build-instrumented-war" depends="instrument-war,instrument-bootstrap,compile-rendit,compile-plugins, pack-plugins,pack-war">
<copy todir="${war.dir}/WEB-INF/lib/">
	<fileset dir="${thirdparty.lib}">
		<include name="com.springsource.com.cenqua.clover-2.4.2.jar" />
	</fileset>
</copy>
</target>

<target name="instrument-common" depends="clover.init">
<instrument-module input.dir="${hq.util}/src/main/java" staging.dir="${hq.util}/target/clover/staging/src/main/java" resource.dir="${hq.util}/src/main/resources" output.dir="${hq.util}/target/classes" classpath.id="shared.compile.classpath" />
<delete dir="${hq.util}/target/clover" quiet="true" />
<instrument-module input.dir="${hq.common}/src/main/java" staging.dir="${hq.common}/target/clover/staging/src/main/java" resource.dir="${hq.common}/src/main/resources" output.dir="${hq.common}/target/classes" classpath.id="shared.compile.classpath" />
<delete dir="${hq.common}/target/clover" quiet="true" />
<instrument-module input.dir="${hq.lather}/src/main/java" staging.dir="${hq.lather}/target/clover/staging/src/main/java" resource.dir="${hq.lather}/src/main/resources" output.dir="${hq.lather}/target/classes" classpath.id="shared.compile.classpath" />
<delete dir="${hq.lather}/target/clover" quiet="true" />
<instrument-module input.dir="${hq.pdk.shared}/src/main/java" staging.dir="${hq.pdk.shared}/target/clover/staging/src/main/java" resource.dir="${hq.pdk.shared}/src/main/resources" output.dir="${hq.pdk.shared}/target/classes" classpath.id="shared.compile.classpath" />
<delete dir="${hq.pdk.shared}/target/clover" quiet="true" />
</target>

<target name="instrument-war" depends="instrument-common">
<instrument-module input.dir="${hq.web}/src/main/java" staging.dir="${hq.web}/target/clover/staging/src/main/java" resource.dir="${hq.web}/src/main/resources" output.dir="${hq.web}/target/classes" classpath.id="web.compile.classpath" />
<delete dir="${hq.web}/target/clover" quiet="true" />
<antcall target="compile-installer" />
</target>

<target name="instrument-bootstrap" depends="instrument-common">
	<instrument-module input.dir="${hq.bootstrap}/src/main/java" staging.dir="${hq.bootstrap}/target/clover/staging/src/main/java" resource.dir="${hq.bootstrap}/src/main/resources" output.dir="${hq.bootstrap}/target/classes" classpath.id="bootstrap.compile.classpath" />
	<delete dir="${hq.bootstrap}/target/clover" quiet="true" />
</target>

<target name="build-instrumented-agent" depends="instrument-agent,compile-plugins,pack-pdk,pack-agent">
<copy todir="${agent.dir}/bundles/${agent.bundle.dir}/lib">
	<fileset dir="${thirdparty.lib}">
		<include name="com.springsource.com.cenqua.clover-2.4.2.jar" />
	</fileset>
</copy>
</target>

<target name="instrument-agent" depends="instrument-common">
<instrument-module classpath.id="agent.pdk.compile.classpath" input.dir="${hq.pdk.agent}/src/main/java" resource.dir="${hq.pdk.agent}/src/main/resources" output.dir="${hq.pdk.agent}/target/classes" staging.dir="${hq.pdk.agent}/target/clover/staging/src/main/java" />
<delete dir="${hq.pdk.agent}/target/clover" quiet="true" />
<instrument-module classpath.id="agent.compile.classpath" input.dir="${hq.agent}/src/main/java" resource.dir="${hq.agent}/src/main/resources" output.dir="${hq.agent}/target/classes" staging.dir="${hq.agent}/target/clover/staging/src/main/java" />
<delete dir="${hq.agent}/target/clover" quiet="true" />
<instrument-agent-handler handler.name="autoinventory" />
<instrument-agent-handler handler.name="bizapp" />
<instrument-agent-handler handler.name="commands" />
<instrument-agent-handler handler.name="control" />
<instrument-agent-handler handler.name="livedata" />
<instrument-agent-handler handler.name="measurement" />
</target>

<macrodef name="instrument-agent-handler">
<attribute name="handler.name" />
<sequential>
	<instrument-module classpath.id="agent.handler.compile.classpath" input.dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/src/main/java" resource.dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/src/main/resources" output.dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/classes" staging.dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/clover/staging/src/main/java" />
	<delete dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/clover" quiet="true" />
</sequential>
</macrodef>

<macrodef name="instrument-agent-handler-tests">
<attribute name="handler.name" />
<sequential>
	<path id="test.run.classpath">
		<path refid="agent.handler.compile.classpath" />
		<path location="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/classes" />
	</path>
	<instrument-module classpath.id="test.run.classpath" input.dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/src/test/java" resource.dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/src/test/resources" output.dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/test-classes" staging.dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/clover/staging/src/test/java" />
	<delete dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/clover" quiet="true" />
</sequential>
</macrodef>

<target name="post-build">

    <property name="release.dir" value="/raid/release/candidates/hq"/>

    <property name="versionfile" value="${version.properties}"/>

    <!-- Increment build # -->
    <propertyfile file="${versionfile}">
      <entry key="build" type="int" default="0" operation="+" pattern="0000"/>
    </propertyfile>

    <property name="release.comment" value="Release Build"/>
    <property name="hq.isDev" value="false"/>
    <property file="${versionfile}" />
    
    <checksum forceOverwrite="yes" fileext=".md5">
        <fileset dir="${hq.home}/build" includes="hyperic-*.tgz"/>
        <fileset dir="${hq.home}/build" includes="hyperic-*.zip"/>
    </checksum>

    <git command="add hq-version.properties" dir="${hq.home}"/>
    <git command="commit -m 'Release ${version} build #${build}'" dir="${hq.home}"/>
    <git command="push git@git.springsource.org:hq/hq.git" dir="${hq.home}"/>

    <!-- Copy to release dir -->
    <copy todir="${release.dir}">
      <fileset dir="${hq.home}/build" includes="hyperic-*.tgz"/>
      <fileset dir="${hq.home}/build" includes="hyperic-*.zip"/>
      <fileset dir="${hq.home}/build" includes="*.md5"/>
    </copy>


    <!-- Send email -->
    <mail subject="HQ Daily Build: ${version} build #${build}"
          mailhost="localhost"
          mailport="25">
      <from address="${mail.from}"/>
      <to address="${mail.to}"/>
      <message>
        The autobuild has completed successfully.

        This build is available for download from:
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-sparc-solaris.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-x86-linux.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-win32.zip
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-x86_64-linux.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-apple-osx.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-noJRE.tgz
          http://${build.server}${release.dir}/hyperic-hq-installer-${version}-${build}-noJRE.zip

        Agent bundles are available for download from:
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-hpux-11.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-sparc-solaris.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-x86-linux.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-win32.zip
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-x86_64-linux.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-apple-osx.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-ppc-aix.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-noJRE.tgz
          http://${build.server}${release.dir}/hyperic-hq-agent-${version}-${build}-noJRE.zip

        Source bundles are available for download from:

          ${release.dir}/hyperic-hq-src-${version}-${build}.zip
          ${release.dir}/hyperic-hq-src-${version}-${build}.tgz

      </message>
    </mail>
</target>

</project>
