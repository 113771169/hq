<?xml version="1.0"?>

<project name="HQ" default="build" basedir=".">
  <property environment="ENV" />

  <!-- User defined overrides -->
  <property file="${user.home}/.hq/build.properties" />

  <property name="hq.home" location="." />
  
  <!-- Default build properties -->
  <property file="build.properties" />

  <!-- Hibernate properties -->
  <!--><property file="etc/hibernate.properties" /> -->

  <!-- Version file -->
  <property name="version.properties" value="${hq.home}/hq-common/src/main/resources/version.properties"/>
  <property file="${version.properties}" />
 
  <!-- ==================== Defaults ==================== -->
  <property name="hq.common" location="${hq.home}/hq-common"/>
  <property name="hq.util" location="${hq.home}/hq-util"/>
  <property name="hq.pdk.shared" location="${hq.home}/hq-pdk-shared"/>
  <property name="hq.pdk.agent" location="${hq.home}/hq-agent/hq-agent-pdk"/>
  <property name="hq.agent" location="${hq.home}/hq-agent/hq-agent-core"/>
  <property name="hq.agent.handlers" location="${hq.home}/hq-agent/hq-agent-handlers"/>
  <property name="hq.plugins" location="${hq.home}/hq-plugins" />

  <property name="jboss.home" location="${ENV.JBOSS_HOME}" />
  <property name="j2ee.jar" location="${jboss.home}/client/jboss-j2ee.jar" />
  <property name="jbossweb.home" value="jboss-web.deployer"/>
  <property name="tomcat.home" 
  	location="${jboss.home}/server/default/deploy/${jbossweb.home}" />

  <property name="build.dir" location="${basedir}/build" />
  <property name="archive.basename" value="hyperic-hq" />
  <property name="archive.build.dir" location="${build.dir}/archive" />

  <!-- Native libs -->
  <property name="hq.bin" location="${hq.common}/thirdparty/hq_bin" />
  <property name="lather.lib" location="${hq.bin}/lather_bin" />
  <property name="sigar.lib" location="${hq.bin}/sigar_bin/lib" />
  <property name="db2monitor.dir" location="${hq.bin}/db2monitor_bin"/>
  <property name="launcher.dir" location="${hq.bin}/launcher_bin"/>

  <!-- Thirdparty libs -->
  <property name="thirdparty.lib" location="${basedir}/hq-common/thirdparty/lib"/>
  <property name="hibernate.lib" location="${thirdparty.lib}/hibernate"/>
  <property name="tapestry_lib" location="${thirdparty.lib}/tapestry"/>

  <property name="webapp.home" location="${hq.home}/hq-web/src/main/webapp" />
  <property name="ear.dir" location="${build.dir}/hq.ear" />
  <property name="war.dir" location="${build.dir}/hq.war" />
  <property name="ROOT.war" location="${build.dir}/ROOT.war"/>
  <property name="agent.dir" location="${build.dir}/agent" />
  <property name="agent.bundle.dir" value="agent-${version}-${build}"/>    

  <!-- PDK destination -->
  <property name="pdk.dir" location="${agent.dir}/bundles/${agent.bundle.dir}/pdk" />
  <property name="agent.pdkDir" location="${pdk.dir}" />
  <property name="pdk.lib" location="${pdk.dir}/lib" />
  <property name="pdk.plugins" location="${pdk.dir}/plugins" />
  <property name="pdk.mibs" location="${pdk.dir}/mibs" />
  <property name="pdk.scripts" location="${pdk.dir}/scripts" />
 

  <!-- Java Service Wrapper destination -->
  <property name="wrapper.lib" location="${hq.bin}/wrapper_bin/lib" />
  <property name="wrapper.bin" location="${hq.bin}/wrapper_bin/bin" />
	
  <!-- Server plugins destination -->
  <property name="server.plugin.dir" location="${ear.dir}/hq-plugins" />
  <!-- Location to pack plugins (pre-copy to PDK and Server) -->
  <property name="plugin.dir" value="${build.dir}/plugins"/>

  <property name="installer.dir" value="${build.dir}/installer"/>

  <property name="jboss.deploy.dir"
              value="${jboss.home}/server/default/deploy" />
              
  <property name="jboss.deploy.ear.dir"
              value="${jboss.home}/server/default/deploy/hq.ear" />
              
  <property name="jboss.deploy.war.dir"
              value="${jboss.home}/server/default/deploy/hq.ear/hq.war" />
              
  <path id="pdknative">
    <fileset dir="${sigar.lib}" includes="*.jar" />
    <fileset dir="${db2monitor.dir}" includes="lib/db2monitor.jar" />
  </path>

 

  <path id="alljars">
    <path refid="pdknative" />
    <fileset dir="${lather.lib}" includes="lather.jar" />
    <fileset dir="${thirdparty.lib}" includes="*.jar" excludes="strutstest-*.jar,cactus*.jar,mockejb.jar,mockrunner-ejb.jar,dbunit*.jar,jaas.jar"/>
    <fileset dir="${thirdparty.lib}" includes="*.zip" />      
    <fileset dir="${thirdparty.lib}/oracle_jdbc" includes="*.jar" />
    <fileset dir="${thirdparty.lib}/postgresql"
             includes="postgresql-8.2-*.jdbc3.jar"/>
    <fileset dir="${thirdparty.lib}/mysql_jdbc" includes="mysql*.jar"/>
    <fileset dir="${thirdparty.lib}/mx4j" includes="*.jar" />
 	<fileset dir="${thirdparty.lib}/spring" includes="*.jar" />
    <fileset dir="${thirdparty.lib}/tapestry" includes="*.jar" />
    <fileset dir="${wrapper.lib}" includes="*.jar" />
    <fileset dir="${hibernate.lib}" includes="*.jar" />
    <fileset dir="${jboss.home}/server/default/lib"
             includes="*.jar"
             excludes="antlr-*.jar,txsnatch.jar,jbossjta.jar" />
    <fileset dir="${jboss.home}/lib" includes="*.jar" />
    <fileset dir="${jboss.home}/client" includes="*.jar" />
    <fileset dir="${tomcat.home}" includes="*.jar" />
    <fileset dir="${hq.plugins}" includes="**/build-lib/*.jar" />
    <fileset dir="${hq.plugins}" includes="**/lib/*.jar" />
  </path>

  <path id="testjars">
    <path refid="alljars" />
    <path location="${thirdparty.lib}/cactus-1.7.2.jar" />
    <path location="${thirdparty.lib}/strutstest-2.1.3.jar" />
    <path location="${thirdparty.lib}/mockejb.jar" />
    <path location="${thirdparty.lib}/mockrunner-ejb.jar" />
	<path location="${thirdparty.lib}/dbunit-2.2.jar" />
  </path>


  <path id="clover.classpath">
	<pathelement location="${thirdparty.lib}/com.springsource.com.cenqua.clover-2.4.2.jar" />
  </path>

  <path id="remotejars">    
    <path refid="alljars" />
    <fileset dir="${webapp.home}/WEB-INF/lib" includes="*.jar" />
    <fileset dir="${jboss.home}/server/default/lib" includes="*.jar" />
    <fileset dir="${jboss.home}/lib" includes="*.jar" />
    <fileset dir="${jboss.home}/client" includes="*.jar" />
  </path>

  <path id="pdkjars">
    <path refid="pdknative" />
    <!-- exclude hq-product.jar, else version.properties
         update will fail on windows -->
    <fileset dir="${pdk.lib}"
             includes="**/*.jar" />
    <path location="${hq.common}/target/classes" />
  </path>

  <path id="custom-ant-tasks.path" >
    <path refid="alljars" />
    <path location="${build.dir}/classes" />
  </path>

  <!-- Source common targets -->
  <import file="${hq.home}/build_util/util-build.xml"/>
  <import file="${hq.home}/build_util/test-build.xml"/>
    
  <target name="init-props" unless="init-props.notrequired">
     <!--<property file="${version.properties}" />-->
     <property name="release.comment" value="Development Build"/>
     <property name="hq.isDev" value="true"/>
     <echo>${release.comment}, version: ${version}, build number: ${build}</echo>
     <property name="init-props.notrequired" value="true"/>
  </target>

  <target name="init" depends="init-props"
          unless="init.notrequired">
     <property name="init.notrequired" value="true"/>
  </target>

  <target name="init-taskdefs" unless="init-taskdefs.notrequired">
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"
             classpathref="alljars"/>
    <taskdef name="for" classname="net.sf.antcontrib.logic.For"
             classpathref="alljars"/>
    <taskdef name="post" classname="net.sf.antcontrib.net.PostTask"
             classpathref="alljars"/>
    <taskdef resource="org/hyperic/tools/ant/ant-tools.properties"
             classpathref="custom-ant-tasks.path"/>
    <property name="init-taskdefs.notrequired" value="true"/>
  </target>

  <!-- ==================== Compile java sources ==================== -->
 

   <target name="compile" depends="compile-shared"/>

   <target name="compile-shared" depends="init">
	   <path id="compile.classpath">
            <path refid="alljars"/>
            <path refid="testjars"/>
            <path location="${hq.util}/target/classes"/>
            <path location="${hq.common}/target/classes"/>
      </path>
      <compile-sources classpath.id="compile.classpath" src.dir="${hq.util}" output.dir="${hq.util}/target/classes"/>
      <compile-sources classpath.id="compile.classpath" src.dir="${hq.common}" output.dir="${hq.common}/target/classes"/>
      <compile-sources classpath.id="compile.classpath" src.dir="${hq.pdk.shared}" output.dir="${hq.pdk.shared}/target/classes"/>
   </target>

   <target name="compile-agent" depends="init">
	 <path id="compile.classpath">
            <path refid="alljars"/>
            <path refid="testjars"/>
            <path location="${hq.util}/target/classes"/>
            <path location="${hq.common}/target/classes"/>
            <path location="${hq.pdk.shared}/target/classes"/>
            <path location="${hq.pdk.agent}/target/classes"/>
      </path>
      <path id="handler.classpath">
	       <path refid="alljars"/>
            <path refid="testjars"/>
            <path location="${hq.util}/target/classes"/>
            <path location="${hq.common}/target/classes"/>
            <path location="${hq.pdk.shared}/target/classes"/>
            <path location="${hq.pdk.agent}/target/classes"/>
            <path location="${hq.agent}/target/classes"/>
      </path>
      <compile-sources classpath.id="compile.classpath" src.dir="${hq.agent}" output.dir="${hq.agent}/target/classes"/>
      <compile-sources classpath.id="compile.classpath" src.dir="${hq.pdk.agent}" output.dir="${hq.pdk.agent}/target/classes"/>
      <compile-agent-handlers classpath.id="handler.classpath" handler.name="autoinventory"/>
      <compile-agent-handlers classpath.id="handler.classpath" handler.name="bizapp"/>
      <compile-agent-handlers classpath.id="handler.classpath" handler.name="commands"/>
      <compile-agent-handlers classpath.id="handler.classpath" handler.name="control"/>
      <compile-agent-handlers classpath.id="handler.classpath" handler.name="livedata"/>
      <compile-agent-handlers classpath.id="handler.classpath" handler.name="measurement"/>
   </target>

   <macrodef name="compile-sources">
		<attribute name="classpath.id"/>
		<attribute name="src.dir"/>
		<attribute name="output.dir"/>
      <sequential>
      <mkdir dir="@{output.dir}" />
      <hq-javac destdir="@{output.dir}">
        <classpath refid="@{classpath.id}"/>
        <src>
	       <dirset dir="@{src.dir}">
		      <include name="src/main/java"/>
			</dirset>
		</src>	 
     </hq-javac>
     <copy toDir="@{output.dir}">
	    <fileset dir="@{src.dir}/src/main/resources" includes="**/*"/>
	 </copy>
	</sequential>
  </macrodef>

  <macrodef name="compile-agent-handlers">
	 <attribute name="handler.name"/>
	 <attribute name="classpath.id"/>
	 <sequential>
	 <mkdir dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/classes" />	
     <hq-javac destdir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/classes">
        <classpath refid="@{classpath.id}"/>
        <src>
	    <dirset dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}">
		  <include name="src/main/java"/>
	    </dirset>
    </src>
     </hq-javac>
	 <copy toDir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/target/classes">
	    <fileset dir="${hq.agent.handlers}/hq-agent-handler-@{handler.name}/src/main/resources" includes="*"/>
	 </copy>
    </sequential>
  </macrodef>

  <target name="compile-plugins">
	<compile-plugin name="apache"/>
	
    <compile-plugin name="tomcat"/>

    <compile-plugin name="iplanet"/>

    <compile-plugin name="oracle"/>

    <compile-plugin name="oc4j"/> 	

    <compile-plugin name="db2"/>
    
    <compile-plugin name="postgresql"/>

    <compile-plugin name="mysql"/>

    <compile-plugin name="samba"/>

	<compile-plugin name="spring"/>

    <compile-plugin name="sybase"/>

    <compile-plugin name="mysql_stats"/>

    <compile-plugin name="coldfusion"/>

    <compile-plugin name="alfresco"/>

    <compile-plugin name="zimbra"/>

    <compile-plugin name="openldap"/>

    <compile-plugin name="servlet"/>

    <compile-plugin name="jboss"/>

    <compile-plugin name="system"/>

    <compile-plugin name="weblogic"/>

    <compile-plugin name="websphere"/>

  

    <compile-plugin name="exchange"/>

    <compile-plugin name="iis"/>

    <compile-plugin name="dotnet"/>

    <compile-plugin name="mssql"/>

    <compile-plugin name="ntp"/>

    <compile-plugin name="bind"/>

    <compile-plugin name="postfix"/>

    <compile-plugin name="sqlquery"/>

    <compile-plugin name="netdevice"/>

    <compile-plugin name="netservices"/>

    <compile-plugin name="nagios"/>

    <compile-plugin name="ntds"/>

    <compile-plugin name="memcached"/>

    <compile-plugin name="perlbal"/>

    <compile-plugin name="informix"/>

    <compile-plugin name="vim"/>

    <compile-plugin name="vmware"/>

    <compile-plugin name="xen"/>
    
    <compile-plugin name="groovy-scripting"/>

    <!-- special case.  hqagent plugin gets to reference hq-agent-core in classpath b/c its used for agent to self monitor.  Other plugins should not depend on this -->
	<mkdir dir="${hq.plugins}/hqagent/target/classes"/>
	<hq-javac destdir="${hq.plugins}/hqagent/target/classes">
			 <src>
			       <dirset dir="${hq.plugins}/hqagent">
				      <include name="src/main/java"/>
					</dirset>
				</src>
        <classpath>
	 		<path refid="alljars"/>
	       	<path refid="testjars"/>
	        <path location="${hq.agent}/target/classes"/>
	        <path location="${hq.pdk.shared}/target/classes"/>
	        <path location="${hq.pdk.agent}/target/classes"/>
			<path location="${hq.util}/target/classes"/>
			<path location="${hq.common}/target/classes"/>
		</classpath>
    </hq-javac>
  </target>
  
  <macrodef name="compile-plugin">
	<attribute name="name"/>
	<sequential>
	<mkdir dir="${hq.plugins}/@{name}/target/classes"/>
	<hq-javac destdir="${hq.plugins}/@{name}/target/classes">
			 <src>
			       <dirset dir="${hq.plugins}/@{name}">
				      <include name="src/main/java"/>
					</dirset>
				</src>
        <classpath>
	 		<path refid="alljars"/>
	       	<path refid="testjars"/>
	        <path location="${hq.plugins}/@{name}/lib/*.jar"/>
	        <path location="${hq.plugins}/@{name}/build-lib/*.jar"/>
	        <path location="${hq.pdk.shared}/target/classes"/>
	        <path location="${hq.pdk.agent}/target/classes"/>
			<path location="${hq.util}/target/classes"/>
			<path location="${hq.common}/target/classes"/>
		</classpath>
    </hq-javac>
   </sequential>
 </macrodef>	 
  
 <target name="copy-resources" depends="init">
	
      <!-- Copy resources -->
      <copy toDir="${build.dir}/classes">
        <fileset dir="src" includes="**/*.properties" />
      </copy>

      <copy toDir="${build.dir}/classes"
            file="etc/ehcache.xml"/>

      <mkdir dir="${build.dir}/classes/images"/>
      <copy toDir="${build.dir}/classes/images">
        <fileset dir="${webapp.home}/images">
          <include name="icon_available_green.gif" />
          <include name="icon_available_red.gif" />
          <include name="icon_available_error.gif" />
          <include name="icon_auto-group.gif" />
          <include name="icon_cluster.gif" />
          <include name="icon_resource.gif" />
        </fileset>
      </copy>
      <copy toDir="${build.dir}/classes">
        <fileset dir="${hq.home}/etc" 
                 includes="cactus.properties,log_client.properties,spring-*.properties,META-INF/spring/**/*-context.xml" />
      </copy>
  </target>



  <!-- ==================== JSP precompile ============================ -->
  
  <import file="${hq.home}/build_util/jsp-build.xml"/>

  <!-- ==================== Source code generation ==================== -->

 
  <import file="${hq.home}/build_util/hibernate-build.xml"/>
 
  <!-- HQU -->
  <import file="${hq.home}/build_util/hqu-build.xml"/>

  <!-- ================== DB Setup =================== -->

  <import file="${hq.home}/build_util/dbsetup-build.xml"/>

  <!-- ==================== EAR packaging ==================== -->

  <!-- Doesn't depend on compile - if you use an IDE it'll compile the classes for
       you, only need to package -->
  <target name="pack-ear-files" description="Create the ear directory structure" 
          depends="dbsetup-init">
    <mkdir dir="${ear.dir}" />
    <mkdir dir="${ear.dir}/META-INF" />
    <mkdir dir="${ear.dir}/lib" />
    <mkdir dir="${ear.dir}/sigar_bin/lib" />
    <mkdir dir="${server.plugin.dir}" />

    <mkdir dir="${ear.dir}/servlet-invoker.war/WEB-INF"/>
    <copy todir="${ear.dir}/servlet-invoker.war/WEB-INF"
          file="etc/jboss/transport/servlet-invoker.war/WEB-INF/web.xml"/>
 
    <mkdir dir="${ear.dir}/hq-session.jar/META-INF" />
    <mkdir dir="${ear.dir}/hq-agent-session.jar/META-INF" />
    <mkdir dir="${ear.dir}/hq-message.jar/META-INF" />

    <copy todir="${ear.dir}/hq-session.jar/META-INF" >
      <fileset dir="${basedir}/dd/session" includes="*" />
    </copy>
    <copy todir="${ear.dir}/hq-agent-session.jar/META-INF" >
      <fileset dir="${basedir}/dd/agent-session" includes="*" />
    </copy>
    <copy todir="${ear.dir}/hq-message.jar/META-INF" >
      <fileset dir="${basedir}/dd/mdb" includes="*" />
    </copy>

    <copy todir="${ear.dir}/META-INF" overwrite="true">
        <fileset dir="etc" 
                 includes="application.xml,jboss-app.xml,startup_classes.txt,preload_caches.txt,tweak.properties" />
        <fileset dir="${build.dir}/classes/META-INF">
            <include name="**/*.hbm.xml" />
            <include name="*.cfg.xml" />
        </fileset>
    </copy>

   <copy todir="${ear.dir}">
    <fileset dir="etc" includes="META-INF/spring/*-context.xml"/>
    </copy>

    <copy todir="${ear.dir}">
	 <fileset dir="etc" includes="spring-*.properties"/>
	</copy>
	
	<copy file="${hq.home}/etc/hibernate.properties"
          todir="${ear.dir}"/>
	
		<copy file="${hq.home}/etc/quartz.properties"
	          todir="${ear.dir}"/>
	
    <copy file="etc/ehcache.xml" todir="${ear.dir}"/>


    <copy file="etc/jboss/events/alertdef-prop-service.xml" tofile="${ear.dir}/alertdef-prop-service.xml" />
    <copy file="etc/jboss/measurement/measurement-mq-service.xml" tofile="${ear.dir}/measurement-mq-service.xml" />
    <copy file="etc/jboss/events/events-mq-service.xml" tofile="${ear.dir}/events-mq-service.xml" />

    <copy file="etc/jboss/pdk/product-plugin-service.xml" tofile="${ear.dir}/product-plugin-service.xml" />
    <replace file="${ear.dir}/product-plugin-service.xml">
      <replacefilter token="@@@HYPERIC_EAR@@@" value="hq.ear"/>
    </replace>

    <mkdir dir="${ear.dir}/autoinventory-mbeans.sar/META-INF" />
    <mkdir dir="${ear.dir}/events-mbeans.sar/META-INF" />
    <mkdir dir="${ear.dir}/common-mbeans.sar/META-INF" />
    <mkdir dir="${ear.dir}/measurement-mbeans.sar/META-INF" />
    <mkdir dir="${ear.dir}/scheduler-mbeans.sar/META-INF" />
    <mkdir dir="${ear.dir}/hq-agent-bundles" />

   

    <copy todir="${ear.dir}/autoinventory-mbeans.sar/META-INF" 
          file="etc/jboss/autoinventory/sar/jboss-service.xml" />
    <copy todir="${ear.dir}/events-mbeans.sar/META-INF" 
          file="etc/jboss/events/sar/jboss-service.xml" />
    <replace file="${ear.dir}/events-mbeans.sar/META-INF/jboss-service.xml">
      <replacefilter token="@@@server.mail.host@@@" value="${server.mail.host}"/>
      <replacefilter token="@@@server.mail.sender@@@" value="${server.mail.sender}"/>
    </replace>
    <copy todir="${ear.dir}/measurement-mbeans.sar/META-INF" 
          file="etc/jboss/measurement/sar/jboss-service.xml" />

	<delete dir="${ear.dir}/lather-jboss.sar" />
   	<unzip src="${lather.lib}/lather-jboss.sar"
		          dest="${ear.dir}/lather-jboss.sar"
		          overwrite="false"/>
    <mkdir dir="${ear.dir}/lather-jboss.sar/org/hyperic/util/notReady"/>
	<copy todir="${ear.dir}/lather-jboss.sar/org/hyperic/util/notReady">
		<fileset dir="${hq.home}/build/classes/org/hyperic/util/notReady">
		           <include name="*.class"/>
		       </fileset>
	</copy>
    
    <!-- Write version resource -->
    <antcall target="write-version-file">
      <param name="version-file"
             value="${build.dir}/src/version.properties"/>
    </antcall>

    <copy todir="${build.dir}/src">
      <fileset dir="etc" includes="product.properties" />
    </copy>

    <antcall target="pack-hq-jar"/>

    <copy todir="${ear.dir}/lib" >
      <fileset dir="${thirdparty.lib}" >
        <include name="commons-beanutils-1.8.0.jar" />
        <include name="commons-fileupload-1.2.1.jar" />          
        <include name="commons-lang-2.3.jar" />
        <include name="log4j-1.2.14.jar" />
        <include name="quartz-1.6.5.jar" />
        <include name="quartz-oracle-1.6.5.jar" />
        <include name="quartz-jboss-1.6.5.jar" />
        <include name="snmp4j.jar" />
        <include name="dnsjava-2.0.3.jar" />
        <include name="ehcache-1.5.0.jar" />
        <include name="jsr107cache-1.0.jar" /> <!-- EHCache 1.5 dep -->
        <include name="json.jar" />
        <include name="jug-asl-2.0.0.jar" />
        <include name="commons-httpclient-3.1.jar" />
        <include name="commons-codec-1.3.jar" /> <!-- HTTPClient dep -->
        <include name="groovy-all-1.6.jar" />
        <include name="xstream-1.3.1.jar" />
        <include name="xpp3_min-1.1.4c.jar" />

        <include name="ant.jar" />
        <include name="ant-lancher.jar" />

		<include name="com.springsource.com.sun.xml.bind-*.jar"/>
		<include name="com.springsource.javax.xml.bind-*.jar"/>
		<include name="com.springsource.javax.xml.stream-*.jar"/>
		
		<include name="*aopalliance*.jar"/>
	    <include name="*dbcp*.jar"/>

        <!--  in container test jar files -->
        <include name="mockejb.jar" />
        <include name="mockrunner-ejb.jar" />
        <include name="easymock-2.3.jar" />
        <include name="easymockclassextension-2.3.jar" />
	
      </fileset>
      <fileset dir="${thirdparty.lib}/spring" includes="*.jar"/>
      <fileset dir="${sigar.lib}" >
        <include name="sigar.jar" />
      </fileset> 
      <fileset dir="${lather.lib}" >
        <include name="lather.jar" />
      </fileset> 
      <fileset dir="${build.dir}/lib" >
        <include name="jxla.jar" />
      </fileset>
      <fileset dir="${hibernate.lib}">
        <include name="cglib-2.1.3.jar" />
        <include name="concurrent-1.3.2.jar" />
        <include name="dom4j-1.6.1.jar" />
      </fileset>
      <fileset dir="${tapestry_lib}">
         <include name="backport-util-concurrent-3.1.jar" />
         <include name="commons-fileupload-1.2.jar" />
         <include name="commons-io-1.4.jar" />
         <include name="commons-pool-1.4.jar" />
         <include name="hivemind-1.1.1.jar" />
         <include name="hivemind-lib-1.1.1.jar" />
         <include name="javassist-3.6.ga.jar" />
         <include name="ognl-2.7.2.jar" />
         <include name="oro-2.0.8.jar" />
         <include name="portlet-api-1.0.jar" />
         <include name="tacos-core-4.1.2-20080213.jar" />
         <include name="tapdoc-0.7.0-20070512.jar" />
         <include name="tapdoc-0.7.0-20071218-sources" />
         <include name="tapestry-annotations-4.1.5.jar" />
         <include name="tapestry-archetype-4.1.2.jar" />
         <include name="tapestry-contrib-4.1.5.jar" />
         <include name="tapestry-framework-4.1.5.jar" />
         <include name="tapestry-portlet-4.1.5.jar" />
         <include name="tapestry-prop-1.0.0.jar" />
         <include name="tapestry-test-4.1.4-20080130-JUnit.jar" />
      </fileset>
    </copy>

    <copy todir="${ear.dir}/sigar_bin/lib" >
       <fileset dir="${sigar.lib}" >
          <exclude name="sigar.jar" />
       </fileset>
    </copy>

    <copy todir="${ear.dir}/alertTemplates">
       <fileset dir="${basedir}/etc/alertTemplates"/>
    </copy>

    <copy todir="${ear.dir}/gconsoleTemplates" failonerror="false">
       <fileset dir="${user.home}/.hq/gconsoleTemplates"/>
    </copy>

    <copy tofile="${ear.dir}/lib/oro-2.0.8.jar" 
          file="${thirdparty.lib}/oro-2.0.8.jar" />
      
    <copy tofile="${ear.dir}/lib/jdom-1.1.jar"
          file="${thirdparty.lib}/jdom-1.1.jar" />

    <touch file="${ear.dir}/META-INF/application.xml" />
  </target>
	
  <target name="pack-hq-jar">
	 <copy file="${pdk.productStub}"
	          toDir="${build.dir}/classes/org/hyperic/hq/product"/>
  	 <!-- TODO: Create separate jars for each component -->
  	    <jar file="${ear.dir}/hq.jar" basedir="${build.dir}/classes" >
  	      <include name="images/**" />
  	      <include name="org/hyperic/**" />
  	      <exclude name="org/hyperic/hq/ui/**" />
  	      <exclude name="org/hyperic/tools/ant/**" />
  	      <exclude name="org/hyperic/tools/db/**" />
  	      <exclude name="org/hyperic/hq/plugin/**"/>
  	      <!-- Exclude unit tests -->
  	      <exclude name="org/hyperic/**/*_test*"/>
		  <!-- Exclude groovy classes -->
		  <exclude name="org/hyperic/hq/hqu/rendit/**"/>
  	    </jar>

  	    <!-- We only want server and shared classes for the UI -->
  	    <jar file="${ear.dir}/hq.jar" basedir="${build.dir}/classes"
  	         update="true">
  	      <include name="org/hyperic/hq/ui/server/session/**"/>
  	      <include name="org/hyperic/hq/ui/shared/**"/>
  	    </jar>
  	
  		<jar basedir="${build.dir}/src" 
  	         jarfile="${ear.dir}/hq.jar"
  	         update="true">
  	      <include name="version.properties"/>
  	      <include name="product.properties"/>
  	    </jar>
  </target>

  <target name="pack-ear" depends="pack-ear-files,write-ear-manifest"/>

  <target name="write-ear-manifest" depends="init-taskdefs" unless="generate-manifest.notrequired">
    <!-- generate EAR MANIFEST file -->
    <pathconvert targetos="unix" pathSep="," property="Class-Path">
      <path>
        <fileset dir="${ear.dir}" includes="hq.jar,hq-test.jar,hqee.jar,hqee-test.jar" />
        <fileset dir="${ear.dir}/lib" includes="sigar.jar" />
        <fileset dir="${ear.dir}/lib" includes="*.jar" />
      </path>
      <mapper>
        <globmapper from="${ear.dir}/" to="hq.ear/" handledirsep="true" />
      </mapper>
    </pathconvert>
    <delete quiet="true" file="${ear.dir}/META-INF/MANIFEST.MF" />
    <echo file="${ear.dir}/META-INF/MANIFEST.MF">Manifest-Version: 1.0${line.separator}</echo>
    <echo file="${ear.dir}/META-INF/MANIFEST.MF" append="true">Class-Path:</echo>
    <for param="hqjar" list="${Class-Path}">
      <sequential>
        <echo file="${ear.dir}/META-INF/MANIFEST.MF" append="true">  @{hqjar}${line.separator}</echo>
      </sequential>
    </for>
    <property name="generate-manifest.notrequired" value="true" />
  </target>

  <target name="pack-test">
    <mkdir dir="${war.dir}" />
    <mkdir dir="${war.dir}/WEB-INF/lib" />

    <copy todir="${war.dir}/WEB-INF/lib/" >
      <fileset dir="${thirdparty.lib}" >
        <include name="strutstest-2.1.3.jar" />
        <include name="cactus-1.7.2.jar" />
        <include name="junit-3.8.jar" />
        <include name="junit-4.4.jar" />
      </fileset>
    </copy>

    <copy todir="${war.dir}/WEB-INF/classes" >
      <fileset dir="${hq.home}/etc" includes="cactus.properties" />
      <fileset dir="${build.dir}/classes"
               includes="**/*CactusTest.class,**/HQCactusBase.class" />
    </copy>
  </target>

  <target name="build-ear" description="Build and create the ear directory structure" 
          depends="compile,pack-ear,pack-war" />

  <target name="build-war" description="Build and create the war" 
          depends="compile,pack-war" />
  
  <!-- ==================== UI packaging ==================== -->

  


  <target name="compile-tests">
	 <path id="src.path">
			<path location="${basedir}/unittest/src" />
	 </path>
	<path id="compile.classpath">
		 <path refid="testjars" />
	</path>
	<compile-test-sources srcpath.id="src.path" output.dir="${build.dir}/classes" classpath.id="compile.classpath"/>
  </target>

  <macrodef name="compile-test-sources">
		<attribute name="output.dir"/>
		<attribute name="srcpath.id"/>
		<attribute name="classpath.id"/>
	<sequential>
		<hq-javac destdir="@{output.dir}">
	       <classpath refid="@{classpath.id}"/>
			<src refid="@{srcpath.id}"/>
	    </hq-javac>
	</sequential>
</macrodef>

  
  
  <target name="pack-war" description="Create the war directory structure ( use if you modify .jsp or other web files, but no sources )">
    <mkdir dir="${war.dir}" />
    <mkdir dir="${war.dir}/WEB-INF/lib" />
    <mkdir dir="${war.dir}/WEB-INF/classes" />
    
     <copy todir="${war.dir}" >
      <fileset dir="${webapp.home}">
        <include name="**"/>
      </fileset>
    </copy>


    <!-- Assumes all .classes and resource files have been compiled to target dir-->
   	<copy todir="${war.dir}/WEB-INF/classes" >
      <fileset dir="${hq.home}/hq-web/target/classes">
        <include name="**"/>
      </fileset>
    </copy>

    <replace file="${war.dir}/META-INF/context.xml">
      <replacefilter token="@@@HYPERIC_UI_HOTDEPLOY@@@" value="${hq.ui.hot-deploy}"/>
    </replace>

    
   
    <copy todir="${war.dir}/WEB-INF/lib/" >
      <fileset dir="${thirdparty.lib}" >
		   <include name="commons-beanutils-1.8.0.jar" />
	        <include name="commons-fileupload-1.2.1.jar" />          
	        <include name="commons-lang-2.3.jar" />
	        <include name="log4j-1.2.14.jar" />
	        <include name="quartz-1.6.5.jar" />
	        <include name="quartz-oracle-1.6.5.jar" />
	        <include name="quartz-jboss-1.6.5.jar" />
	        <include name="snmp4j.jar" />
	        <include name="dnsjava-2.0.3.jar" />
	        <include name="ehcache-1.5.0.jar" />
	        <include name="jsr107cache-1.0.jar" /> <!-- EHCache 1.5 dep -->
	        <include name="json.jar" />
	        <include name="jug-asl-2.0.0.jar" />
	        <include name="commons-httpclient-3.1.jar" />
	        <include name="commons-codec-1.3.jar" /> <!-- HTTPClient dep -->
	        <include name="groovy-all-1.6.jar" />
	        <include name="xstream-1.3.1.jar" />
	        <include name="xpp3_min-1.1.4c.jar" />
			<include name="commons-collections-3.2.jar"/>
	      	<include name="commons-chain-1.2.jar" />
	        <include name="commons-digester-1.8.jar" />
			<include name="commons-validator-1.3.1.jar" />
	        <include name="jstl-1.1.2.jar" />
	        <include name="standard-1.1.2.jar" />
	      	<include name="spring-struts-2.0.8.jar" />
	      	<include name="struts-core-1.3.10.jar" />               
	        <include name="struts-extras-1.3.10.jar" />               
	        <include name="struts-taglib-1.3.10.jar" />               
	        <include name="struts-tiles-1.3.10.jar" />               
	        <include name="struts-el-1.3.10.jar" />
	        <include name="urlrewrite-3.1.0.jar" />

	        <include name="ant.jar" />
	        <include name="ant-lancher.jar" />

			<include name="com.springsource.com.sun.xml.bind-*.jar"/>
			<include name="com.springsource.javax.xml.bind-*.jar"/>
			<include name="com.springsource.javax.xml.stream-*.jar"/>

			<include name="*aopalliance*.jar"/>
		    <include name="*dbcp*.jar"/>

	      </fileset>
	      <fileset dir="${thirdparty.lib}/spring" includes="*.jar"/>
	      <fileset dir="${sigar.lib}" >
	        <include name="sigar.jar" />
	      </fileset> 
	      <fileset dir="${lather.lib}" >
	        <include name="lather.jar" />
	      </fileset> 
	
	     <fileset dir="${thirdparty.lib}/mysql_jdbc">
		   <include name="mysql-connector-java-5.0.5-bin.jar"/>
		 </fileset>
	     
	      <fileset dir="${hibernate.lib}">
	        <include name="cglib-2.1.3.jar" />
	        <include name="concurrent-1.3.2.jar" />
	      </fileset>
	      <fileset dir="${tapestry_lib}">
	         <include name="backport-util-concurrent-3.1.jar" />
	         <include name="commons-fileupload-1.2.jar" />
	         <include name="commons-io-1.4.jar" />
	         <include name="commons-pool-1.4.jar" />
	         <include name="hivemind-1.1.1.jar" />
	         <include name="hivemind-lib-1.1.1.jar" />
	         <include name="ognl-2.7.2.jar" />
	         <include name="oro-2.0.8.jar" />
	         <include name="portlet-api-1.0.jar" />
	         <include name="tacos-core-4.1.2-20080213.jar" />
	         <include name="tapdoc-0.7.0-20070512.jar" />
	         <include name="tapdoc-0.7.0-20071218-sources" />
	         <include name="tapestry-annotations-4.1.5.jar" />
	         <include name="tapestry-archetype-4.1.2.jar" />
	         <include name="tapestry-contrib-4.1.5.jar" />
	         <include name="tapestry-framework-4.1.5.jar" />
	         <include name="tapestry-portlet-4.1.5.jar" />
	         <include name="tapestry-prop-1.0.0.jar" />
	         <include name="tapestry-test-4.1.4-20080130-JUnit.jar" />
	      </fileset>
	      
    </copy>

<antcall target="pack-common"/>

 <copy todir="${war.dir}/WEB-INF/lib/" >
      <fileset dir="${build.dir}" >
		 <include name="hq-common.jar" />
	      <include name="hq-util.jar" />
	<include name="hq-pdk-shared.jar" />
	  </fileset>
	</copy>

    <!-- Pack UI plugins -->
    <!--><antcall target="hqu-deploy">
      <param name="eardir" value="${ear.dir}"/>
      <param name="wardir" value="${war.dir}"/>
    </antcall> -->
  </target>

  <target name="deploy-ui" description="">
    <echo>deploying files from ${hq.home}</echo>
    <!-- Copy updated assets -->
    <copy todir="${jboss.deploy.war.dir}" >
      <fileset dir="${hq.home}/web">
        <include name="**/*.js"/>
        <include name="**/*.xml"/>
        <include name="**/*.css"/>
        <include name="**/*.gif"/>
        <include name="**/*.png"/>
        <include name="**/*.jpg"/>
        <include name="**/*.ico"/>
        <include name="**/*.jsp"/>
        <include name="**/*.properties"/>
        <include name="**/*.application"/>
        <include name="**/*.page"/>
        <include name="**/*.html"/>
        <exclude name="**/dojo/*"/>
      </fileset>
    </copy>

    <jar file="${jboss.deploy.war.dir}/WEB-INF/lib/hq-ui.jar" basedir="${hq.home}/build/classes" update="true">
      <include name="org/hyperic/hq/ui/**" />
      <fileset dir="${hq.home}/src">
        <include name="org/hyperic/hq/ui/**/*.html" />
        <include name="org/hyperic/hq/ui/**/*.page" />
        <include name="org/hyperic/hq/ui/**/*.properties" />
      </fileset>
      <include name="servletunit/struts/**" />
      <exclude name="org/hyperic/hq/ui/server/session/**" />
      <exclude name="org/hyperic/hq/ui/shared/**" />
      <exclude name="org/hyperic/hq/ui/tapestry/**" />
    </jar>

    <jar file="${jboss.deploy.war.dir}/WEB-INF/lib/hq-tapestry-lib.jar" basedir="${hq.home}/build/classes" update="true">
      <include name="org/hyperic/ui/tapestry/**" />
      <fileset dir="${hq.home}/src">
        <include name="org/hyperic/ui/tapestry/**/*.html" />
        <include name="org/hyperic/ui/tapestry/**/*.page" />
        <include name="org/hyperic/ui/tapestry/**/*.jwc" />
        <include name="org/hyperic/ui/tapestry/**/*.library" />
        <include name="org/hyperic/ui/tapestry/**/*.script" />
        <include name="org/hyperic/ui/tapestry/**/*.js" />
        <include name="org/hyperic/ui/tapestry/**/*.properties" />
      </fileset>
    </jar>

  </target>

  <target name="undeploy-ui">
    <delete file="${jboss.deploy.war.dir}/WEB-INF/lib/hq-tapestry-lib.jar"/>
    <delete file="${jboss.deploy.war.dir}/WEB-INF/lib/hq-ui.jar"/>
  </target>

  <target name="trigger-jboss-reload" depends="init-taskdefs">
    <post to="http://localhost:7080/jmx-console/HtmlAdaptor">
      <prop name="action" value="invokeOp"/>
      <prop name="name" value="jboss.system:service=MainDeployer"/>
      <prop name="methodIndex" value="18"/>
      <prop name="arg0" value="file:${jboss.home}/server/default/deploy/hq.ear/hq.war/"/>
    </post>
  </target>

  <target name="redeploy-ui" depends="undeploy-ui,deploy-ui,trigger-jboss-reload"/>

  <target name="minify-ui" depends="init-taskdefs, pack-war">
    <for param="file">
      <path>
        <fileset dir="${war.dir}" includes="**/*.js"/>
        <fileset dir="${war.dir}" includes="**/*.css"/>
      </path>
      <sequential>
        <tempfile property="@{file}" suffix=".temp" destDir="build"/>
        <echo>-o @{file} @{file}</echo>
        <java fork="true" jar="${thirdparty.lib}/minify/yuicompressor-2.3.5.jar">
            <arg value="-o @{file} @{file}"/>
        </java>
      </sequential>
    </for>
  </target>

  <!-- ==================== PDK packaging ==================== -->
  <target name="pdk-javadoc">
    <property name="pdk.javadoc" location="${pdk.dir}/javadoc"/>
    <property name="pdk.version" value="${version}"/>
    <property name="pdk.title" value="Hyperic HQ Plugin API"/>
    <mkdir dir="${pdk.javadoc}" />
    <javadoc
      destdir="${pdk.javadoc}"
      private="false"
      version="true"
      author="false"
      maxmemory="256M"
      windowtitle="${pdk.title}">
      <sourcepath>
        <pathelement location="src"/>
      </sourcepath>
      <fileset dir="src">
        <include name="org/hyperic/hq/product/*.java"/>
        <include name="org/hyperic/util/config/*.java"/>
        <include name="org/hyperic/snmp.*.java"/>
      </fileset>
      <classpath>
        <path refid="alljars" />
        <pathelement location="build/classes"/>
      </classpath>
      <doctitle>${pdk.title}</doctitle>
      <header>
        <![CDATA[<font size="2">${pdk.title} v. ${pdk.version}</font>]]>
      </header>
      <bottom>
        <![CDATA[Copyright &#169; 2004-2006 Hyperic, Inc. <a href="mailto:support@hyperic.net">support@hyperic.net</a>, All Rights Reserved.]]>
      </bottom>
    </javadoc>
  </target>

  <target name="pack-common" description="Pack the common jars">
	
    <jar basedir="${hq.util}/target/classes"
         jarfile="${build.dir}/hq-util.jar">
    </jar>

    <antcall target="write-version-file">
      <param name="version-file"
             value="${hq.common}/target/classes/version.properties"/>
    </antcall>

    <jar basedir="${hq.common}/target/classes" jarfile="${build.dir}/hq-common.jar">
    </jar>

    <jar basedir="${hq.pdk.shared}/target/classes"
         jarfile="${build.dir}/hq-pdk-shared.jar">
      <manifest>
        <attribute name="Main-Class"
                   value="org.hyperic.hq.product.util.PluginMain"/>
      </manifest>
    </jar>

   </target>

  <target name="pack-pdk-lib" description="Pack the PDK lib jars">
    <mkdir dir="${pdk.lib}"/>
    <mkdir dir="${pdk.mibs}"/>

 	<antcall target="pack-common"/>

   <copy todir="${pdk.lib}" file="${build.dir}/hq-common.jar"/>
   <copy todir="${pdk.lib}" file="${build.dir}/hq-util.jar"/>
   <copy todir="${pdk.lib}" file="${build.dir}/hq-pdk-shared.jar"/>

    <jar basedir="${hq.pdk.shared}/target/classes"
         jarfile="${pdk.lib}/hq-pdk-shared.jar">
      <manifest>
        <attribute name="Main-Class"
                   value="org.hyperic.hq.product.util.PluginMain"/>
      </manifest>
    </jar>

    <jar basedir="${hq.pdk.agent}/target/classes"
         jarfile="${pdk.lib}/hq-pdk-agent.jar">
    </jar>

    <copy todir="${pdk.lib}">
      <fileset dir="${sigar.lib}" includes="*.*" />
      <fileset dir="${thirdparty.lib}" >
        <!-- commons-{collections,beanutils} not in the
             agent classpath but required for
             PluginDumper scripts -->
        <include name="commons-collections-3.2.jar" />
        <include name="commons-beanutils-1.8.0.jar" />  
        <include name="commons-logging-1.0.4.jar" />
        <include name="log4j-1.2.14.jar" />
        <include name="oro-2.0.8.jar" />   <!-- RT -->
        <include name="snmp4j.jar" />        <!-- All SNMP monitoring -->
        <include name="ant.jar" />  <!-- AI scans + util.TokenReplacer -->
        <include name="junit-3.8.jar" />  <!-- test to help with support issues -->
        <include name="junit-4.4.jar" />
        <include name="commons-httpclient-3.1.jar" /> <!-- Lather -->
        <include name="commons-codec-1.3.jar" /> <!-- HTTPClient dep -->
        <!-- WebSphere: must be in the main classloader for reasons unknown -->
        <include name="activation.jar" />
        <!-- for hq-plugin.xml parser -->
        <include name="jdom-1.1.jar" />
        <!-- for PluginDumper args parser -->
        <include name="getopt.jar" />
        <include name="tomcat-jk.jar" />
        <!-- for SSH collector within netservices plugin -->
        <include name="jsch-0.1.34.jar"/>
        <!-- for DNS collector within netservices plugin -->
        <include name="dnsjava-2.0.3.jar"/>
        <!-- for JMX based plugins -->
        <include name="mx4j/*.jar"/>
        <!-- for XPathAPI -->
        <include name="xalan.jar"/>
        <include name="xml-apis.jar"/>
        <!-- for live data translation -->
        <include name="json.jar"/>
        <include name="xstream-1.3.1.jar"/>
        <include name="xpp3_min-1.1.4c.jar"/>
        <!-- for WS/Xen -->
        <include name="xmlrpc-client-3.1.jar"/>
        <include name="xmlrpc-common-3.1.jar"/>
        <include name="ws-commons-util-1.0.2.jar"/>
      </fileset>
      <fileset dir="${tapestry_lib}">
        <!-- for CollectorThread -->
        <include name="backport-util-concurrent-3.1.jar"/>
      </fileset>
    </copy>

   

    <!-- Copy jdbc drivers for use with jdbc based plugins -->
    <mkdir dir="${pdk.lib}/jdbc"/>
    <copy toDir="${pdk.lib}/jdbc">
	   	<fileset dir="${thirdparty.lib}/mysql_jdbc" includes="mysql*.jar" />
       	<!-- Postgres plugin uses the 7.4.3 driver -->
       <fileset dir="${thirdparty.lib}/postgresql" includes="postgresql-7.4.3.jar"/>
    </copy>

    <!-- requires ${pdk.lib} we just created -->
    <taskdef name="hqplugin" 
             classname="org.hyperic.hq.product.ant.PluginJar"
             classpathref="pdkjars"/>
    <!-- validate pure-xml plugins -->
    <taskdef name="plugincopy" 
             classname="org.hyperic.hq.product.ant.PluginCopy"
             classpathref="pdkjars"/>
  </target>

  <!-- Build the plugins -->
  <target name="pack-plugins" depends="init-taskdefs,pack-pdk-lib">
    <mkdir dir="${pdk.plugins}"/>
    <mkdir dir="${plugin.dir}"/>

    <copy todir="${pdk.plugins}">
	<!-- copy shared xml pieces prior to validation-->
	   <fileset dir="${hq.plugins}/process/src/main/resources">
		   <include name="*.xml"/>
	    </fileset>
	   <fileset dir="${hq.plugins}/jvm/src/main/resources" includes="*.xml"/>
    </copy>

    <hqplugin name="apache"/>


    <hqplugin name="tomcat"/>

    <hqplugin name="iplanet"/>

    <hqplugin name="oracle"/>
  	
    <hqplugin name="oc4j"/> 	

    <hqplugin name="db2">
       <fileset dir="${db2monitor.dir}" includes="lib/*"/>
    </hqplugin>

    <hqplugin name="postgresql"/>

    <hqplugin name="mysql"/>

    <hqplugin name="samba"/>

	<hqplugin name="spring"/>

    <hqplugin name="sybase"/>

    <hqplugin name="mysql_stats"/>

    <hqplugin name="coldfusion"/>

    <hqplugin name="alfresco"/>

    <hqplugin name="zimbra"/>

    <hqplugin name="openldap"/>

    <hqplugin name="servlet"/>

    <hqplugin name="jboss"/>

    <hqplugin name="system"/>

    <hqplugin name="weblogic"/>

    <hqplugin name="websphere"/>

    <hqplugin name="hqagent"/>

    <hqplugin name="exchange"/>

    <hqplugin name="iis"/>

    <hqplugin name="dotnet"/>

    <hqplugin name="mssql"/>

    <hqplugin name="ntp"/>

    <hqplugin name="bind"/>

    <hqplugin name="postfix"/>

    <hqplugin name="sqlquery"/>

    <hqplugin name="netdevice"/>

    <hqplugin name="netservices"/>

    <hqplugin name="nagios"/>

    <hqplugin name="ntds"/>

    <hqplugin name="memcached"/>

    <hqplugin name="perlbal"/>

    <hqplugin name="informix"/>
	
    <hqplugin name="vim"/>

    <hqplugin name="vmware"/>

    <hqplugin name="xen">
       <!-- XXX Xen sdk built w/ 1.6 + mods for Xen 4.0 compat -->
       <fileset dir="${hq.plugins}/xen/target/classes"
                includes="com/xensource/xenapi/*.class"/>
    </hqplugin>

    <hqplugin name="groovy-scripting"/>

  

	
  </target>
  
  <!-- Copy plugins -->
  <target name="copy-plugins" depends="init-taskdefs">
    <mkdir dir="${pdk.plugins}"/>
    <mkdir dir="${pdk.plugins}/scripting"/>

    <echo message="Copying plugins from: ${plugin.dir}"/>

    <!-- Copy plugins to agent -->
    <copy todir="${pdk.plugins}">
      <fileset dir="${plugin.dir}"
               excludes="${plugins.exclude}">
        <exclude name="*-scripting-plugin.jar"/>
        <include name="*-plugin.jar"/>
      </fileset>
    </copy>

    <copy todir="${pdk.plugins}/scripting">
      <fileset dir="${plugin.dir}"
               excludes="${plugins.exclude}">
        <include name="*-scripting-plugin.jar"/>
      </fileset>
      <fileset dir="${thirdparty.lib}">
        <include name="groovy-all-1.6.jar" />
      </fileset>
    </copy>


    <mkdir dir="${pdk.dir}/examples"/>
    <plugincopy todir="${pdk.dir}/examples">
      <fileset dir="hq-plugins/examples/src/main/resources" includes="*.xml"/>
    </plugincopy>


    <plugincopy todir="${pdk.plugins}" file="hq-plugins/activemq/src/main/resources/activemq-plugin.xml"/>
    <plugincopy todir="${pdk.plugins}" file="hq-plugins/geronimo/src/main/resources/geronimo-plugin.xml"/>
    <plugincopy todir="${pdk.plugins}" file="hq-plugins/glassfish/src/main/resources/glassfish-plugin.xml"/>
    <plugincopy todir="${pdk.plugins}" file="hq-plugins/hq-internal/src/main/resources/hq-internal-plugin.xml"/>
    <plugincopy todir="${pdk.plugins}" file="hq-plugins/jetty/src/main/resources/jetty-plugin.xml"/>
    <plugincopy todir="${pdk.plugins}" file="hq-plugins/jmx/src/main/resources/jmx-plugin.xml"/>
    <plugincopy todir="${pdk.plugins}" file="hq-plugins/resin/src/main/resources/resin-plugin.xml"/>
	<plugincopy todir="${pdk.plugins}" file="hq-plugins/sendmail/src/main/resources/sendmail-plugin.xml"/>

    
    <!-- Copy scripts -->
    <mkdir dir="${pdk.scripts}"/>
    <copy todir="${pdk.scripts}">
      <fileset dir="${hq.pdk.agent}/scripts" includes="*.*"/>
    </copy>
  </target>

  <target name="pack-pdk" description="Pack the PDK"
          depends="pack-pdk-lib,pack-plugins,copy-plugins"/>

  <!-- ==================== Agent packaging ==================== -->
  <!-- XXX use property to control debug/release properties -->

  <target name="pack-agent" description="Pack the agent">
    <mkdir dir="${agent.dir}" />
    <mkdir dir="${agent.dir}/bin" />
    <mkdir dir="${agent.dir}/log" />
    <mkdir dir="${agent.dir}/conf" />
    <mkdir dir="${agent.dir}/wrapper" />
    <mkdir dir="${agent.dir}/wrapper/lib" />
    <mkdir dir="${agent.dir}/wrapper/sbin" />
    <mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/lib" />
    <mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/lib" />	 
    <mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/rcfiles" />
    <mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/tmp" />
    <mkdir dir="${agent.dir}/bundles/${agent.bundle.dir}/conf" />

    <!-- Touch the agent log file so that "smart" unzippers don't forget
         to create the log directory -->
    <touch file="${agent.dir}/log/agent.log"/>
    <touch file="${agent.dir}/bundles/${agent.bundle.dir}/tmp/empty"/>

    <copy todir="${agent.dir}/bundles/${agent.bundle.dir}/lib" >
      <fileset dir="${lather.lib}" includes="lather.jar" />
    </copy>
  	
    <copy todir="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/lib" >
		<fileset dir="${thirdparty.lib}">
		  <include name="jboss-remoting.jar"/>
		  <include name="jboss-common.jar"/>
	      <include name="jboss-jmx.jar"/>
		</fileset>
		<fileset dir="${thirdparty.lib}/hibernate" includes="concurrent*.jar"/>
    </copy>

    <jar basedir="${hq.agent.handlers}/hq-agent-handler-autoinventory/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-autoinventory.jar">
	   <manifest>
		  <attribute name="Main-Class" value="org.hyperic.hq.autoinventory.agent.server.AutoinventoryCommandsServer"/>
	   </manifest>
    </jar>

     <jar basedir="${hq.agent.handlers}/hq-agent-handler-bizapp/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-bizapp.jar">
	   <manifest>
		  <attribute name="Main-Class" value="org.hyperic.hq.bizapp.agent.server.CommandsServer"/>
	   </manifest>
    </jar>

    <jar basedir="${hq.agent.handlers}/hq-agent-handler-measurement/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-measurement.jar">
	   <manifest>
		  <attribute name="Main-Class" value="org.hyperic.hq.measurement.agent.server.MeasurementCommandsServer"/>
	   </manifest>
    </jar>

    <jar basedir="${hq.agent.handlers}/hq-agent-handler-commands/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-commands.jar">
	   <manifest>
		  <attribute name="Main-Class" value="org.hyperic.hq.agent.server.AgentCommandsServer"/>
	   </manifest>
    </jar>

    <jar basedir="${hq.agent.handlers}/hq-agent-handler-control/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-control.jar">
	   <manifest>
		  <attribute name="Main-Class" value="org.hyperic.hq.control.agent.server.ControlCommandsServer"/>
	   </manifest>
    </jar>

    <jar basedir="${hq.agent.handlers}/hq-agent-handler-livedata/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/handlers/hq-agent-handler-livedata.jar">
	   <manifest>
		  <attribute name="Main-Class" value="org.hyperic.hq.livedata.agent.server.LiveDataCommandsServer"/>
	   </manifest>
    </jar>

	<!-- Agent jars -->
    <jar basedir="${hq.agent}/target/classes" jarfile="${agent.dir}/bundles/${agent.bundle.dir}/lib/hq-agent-core.jar">
    </jar>
	  
    <copy todir="${agent.dir}/wrapper/sbin" >
      <fileset dir="${wrapper.bin}" includes="*" />
    </copy> 	
  	
    <copy todir="${agent.dir}/wrapper/lib" >
      <fileset dir="${wrapper.lib}" includes="*" />
    </copy> 	
	  
    

    <!-- TODO: Copy and replace properties -->
    <copy file="${hq.agent}/src/main/resources/agent.properties"
        tofile="${agent.dir}/conf/agent.properties"/>

    <copy file="${hq.agent}/src/main/resources/wrapper-master.conf"
        tofile="${agent.dir}/conf/wrapper.conf"/>
  	
    <copy file="${hq.agent}/bin/background.sh"
        tofile="${agent.dir}/bundles/${agent.bundle.dir}/background.sh"/>
    <copy file="${hq.agent}/bin/background.bat"
        tofile="${agent.dir}/bundles/${agent.bundle.dir}/background.bat"/>
    <copy file="${hq.agent}/src/main/resources/agent.jaas.config"
        tofile="${agent.dir}/bundles/${agent.bundle.dir}/jaas.config"/>
    <copy file="${hq.agent}/bin/agent.rc"
        tofile="${agent.dir}/bundles/${agent.bundle.dir}/rcfiles/agent.rc"/>

    <!-- DEPRECATED: replaced hq-agent.exe with Java Service Wrapper
    <copy file="${launcher.dir}/hq-agent.exe"
        tofile="${agent.dir}/bundles/${agent.bundle.dir}/hq-agent.exe" />
    -->
    <copy file="${hq.agent}/bin/hq-agent-master.sh"
        tofile="${agent.dir}/bin/hq-agent.sh"/>  
      <copy file="${hq.agent}/bin/hq-agent-master.bat"
          tofile="${agent.dir}/bin/hq-agent.bat"/>  
  	
    <copy file="${hq.agent}/bin/hq-agent.sh"
        tofile="${agent.dir}/bundles/${agent.bundle.dir}/bin/hq-agent-nowrapper.sh"/>
  	
    <copy file="${hq.agent}/bin/hq-agent-wrapper.bat"
        tofile="${agent.dir}/bundles/${agent.bundle.dir}/bin/hq-agent.bat" />
    <copy file="${hq.agent}/bin/hq-agent-wrapper.sh"
        tofile="${agent.dir}/bundles/${agent.bundle.dir}/bin/hq-agent.sh"/> 	
  	
    <copy file="${hq.agent}/src/main/resources/wrapper.conf"
        tofile="${agent.dir}/bundles/${agent.bundle.dir}/conf/wrapper.conf"/> 		
  	
    <copy file="${hq.agent}/src/main/resources/rollback.properties"
        tofile="${agent.dir}/conf/rollback.properties"/>      	
    <replace file="${agent.dir}/conf/rollback.properties">
    	<replacefilter token="@@@AGENT_BUNDLE_DIR@@@" value="${agent.bundle.dir}"/>
    </replace>
  	
    <antcall target="chmod-exec">
      <param name="chmod.dir" value="${agent.dir}"/>
    </antcall>
  
  </target>

  <target name="build-agent" description="Build and pack the agent directory structure" 
          depends="compile-shared,compile-agent,compile-plugins,pack-pdk,pack-agent" />

  <!-- ==================== Catalina packaging ==================== -->

  <target name="pack-servlet" description="Pack servlet engine measurement dirs">
    
    <!-- The name is what the tomcat plugin uses. --> 
    <property name="servlet.base" location="build/native_plugins/hyperic-hq" /> 
    <mkdir dir="${servlet.base}/native-lib" />
    <mkdir dir="${servlet.base}/WEB-INF/lib" />
    <copy file="plugins/servlet/examples/web.xml" todir="${servlet.base}/WEB-INF" />
 
    <jar basedir="${build.dir}/classes" jarfile="${servlet.base}/WEB-INF/lib/hq-filter.jar">
      <include name="org/hyperic/hq/product/servlet/filter/**"/>
      <include name="org/hyperic/hq/product/servlet/mbean/**"/>
    </jar>

    <jar basedir="${build.dir}/classes" jarfile="${servlet.base}/WEB-INF/lib/hq-webapp.jar">
      <include name="org/hyperic/hq/product/servlet/webapp/**"/>
    </jar>

    <copy todir="${servlet.base}/WEB-INF/lib" >
      <fileset dir="${thirdparty.lib}" >
        <include name="commons-modeler.jar" />
        <include name="commons-logging-1.0.4.jar" />
      </fileset>
    </copy>

    <!-- copy the sigar libraries too. -->
    <copy todir="${servlet.base}/WEB-INF/lib">
        <fileset dir="${sigar.lib}">
            <include name="sigar.jar"/>
        </fileset>
    </copy>
    <copy todir="${servlet.base}/native-lib">
        <fileset dir="${sigar.lib}">
            <include name="*.*"/>
            <exclude name="*.jar"/>
        </fileset>
    </copy>

    <mkdir dir="build/native_plugins/libs" />

    <copy todir="build/native_plugins/libs" 
          file="${servlet.base}/WEB-INF/lib/hq-filter.jar" />

    <copy todir="build/native_plugins/libs" 
          file="${thirdparty.lib}/mx4j-jmx.jar" />

    <copy todir="build/native_plugins/libs" 
          file="${thirdparty.lib}/commons-modeler.jar" />

    <copy todir="build/native_plugins/libs" >
       <fileset dir="${thirdparty.lib}/tomcat">
         <include name="tomcat-coyote.jar" />
         <include name="tomcat-jk2.jar" />
         <include name="tomcat-http11.jar" />
         <include name="tomcat-util.jar" />
         <include name="catalina.jar" />
       </fileset>
    </copy>
     
    <!-- 2 simple webapps with instrumentation - one using global web.xml, the other using
         its own web.xml -->

    <!-- hq-filter.jar, jmx must be configured in the container and the default 
           web.xml must include our settings -->
    <mkdir dir="build/native_plugins/sample_global/WEB-INF" />
    <copy  tofile="build/native_plugins/sample_global/WEB-INF/web.xml"
           file="plugins/servlet/examples/example_global_web.xml" />
    <copy  todir="build/native_plugins/sample_global" 
           file="plugins/servlet/examples/index.jsp" />
 
    <!-- JMX must be available -->
    <mkdir dir="build/native_plugins/sample_local/WEB-INF/lib" />
    <copy  tofile="build/native_plugins/sample_local/WEB-INF/web.xml"
           file="plugins/servlet/examples/example_web.xml" />
    <copy  todir="build/native_plugins/sample_local" 
           file="plugins/servlet/examples/index.jsp" />
    <copy todir="build/native_plugins/sample_local/WEB-INF/lib" 
          file="${servlet.base}/WEB-INF/lib/hq-filter.jar" />

    <!-- Instrument hq.ear -->
    <mkdir dir="${ear.dir}/hyperic-hq.war" />
    <copy todir="${ear.dir}/hyperic-hq.war" >
      <fileset dir="${servlet.base}" includes="**" />
    </copy>
    <copy todir="${tomcat.home}" file="installer/data/web.xml" />
    <copy todir="${tomcat.home}" 
          file="${servlet.base}/WEB-INF/lib/hq-filter.jar" />
  </target>

  <!-- ==================== Generic targets ==================== -->

  <target name="pack" description="Create the jars and copy descriptors" 
          depends="init,pack-agent,pack-pdk,pack-ear,pack-war,pack-servlet" >
  </target>

  <target name="all" description="compile and pack for everything" 
          depends="init,hibernate-prep,build" >
  </target>

   <target name="pack-test-coverage">
	 <copy todir="${war.dir}/WEB-INF/lib/" >
	      <fileset dir="${thirdparty.lib}" >
	        <include name="com.springsource.com.cenqua.clover-*.jar" />
	      </fileset>
	    </copy>

	    <copy todir="${ROOT.war}/WEB-INF/lib/">
			 <fileset dir="${thirdparty.lib}" includes="com.springsource.com.cenqua.clover-*.jar"/>
		</copy>
   </target>

   <!-- When running the 'test' target 'test-all' must be run to deploy the 
       tests into the EAR and ensure deferrable constraints are set correctly -->
  <target name="test-all" depends="test-build, pack-test-ear" />

  <target name="test-build">
    <property name="unittest-lib" location="${hq.home}/unittest/lib" />
    <echo message="using unittest.lib as -> ${unittest-lib}"/>    
    <antcall target="all">
      <param name="unittest.lib" value="${unittest-lib}"/>
    </antcall>
    <antcall target="compile-tests"/>
  </target>

   <target name="pack-test-ear">
    <!-- Package the test jars and deploy into the EAR -->
    <jar file="${ear.dir}/hq-test.jar" basedir="${build.dir}/classes" > 
      <include name="org/hyperic/**/*_test*"/>
    </jar>
 
    <mkdir dir="${ear.dir}/hq-session-test.jar/META-INF" />
    <copy todir="${ear.dir}/hq-session-test.jar/META-INF" >
      <fileset dir="${basedir}/dd/session-test" includes="*" />
    </copy>

    <copy todir="${ear.dir}/lib">
		<fileset dir="${thirdparty.lib}" includes="com.springsource.com.cenqua.clover-*.jar"/>
	</copy>
	
    <!-- Rewrite the manifest to include the test jars -->
    <antcall target="write-ear-manifest" inheritAll="false"/>

    <!-- Copy in application.xml that includes the test EJBs -->
    <copy file="etc/application-test.xml"
          toFile="${ear.dir}/META-INF/application.xml"
          overwrite="true"/>

  </target>	

  <target name="build" depends="init,compile,pack" 
         description="Compile and pack - no code generation" />

  <target name="clean" description="Clean the build directories" >
    <delete dir="${build.dir}"/>
    <delete dir="${hq.util}/target/classes"/>
    <delete dir="${hq.common}/target/classes"/>
    <delete dir="${hq.pdk.shared}/target/classes"/>
    <delete dir="${hq.pdk.agent}/target/classes"/>
    <delete dir="${hq.agent}/target/classes"/>
   	<delete includeemptydirs="true">
       <fileset dir="${hq.agent.handlers}" defaultexcludes="false" includes="*/target/classes/**"/>
    </delete>
    <delete includeemptydirs="true">
       <fileset dir="${hq.plugins}" defaultexcludes="false" includes="*/target/classes/**"/>
    </delete>
  </target>
  
  <target name="mostly-clean" depends="remote-clean" description="Clean the build directory" >
    <delete>
      <fileset dir="${build.dir}">
        <exclude name="**/jsp/"/>
        <exclude name="**/docs/"/>
      </fileset>
    </delete>
  </target>
  
  <target name="check-for-ui">
    <available property="ui-subsystem.available" file="subsystem/ui"/>
  </target>
  <target name="remote-clean" depends="check-for-ui" description="Clean the remote tomcat"
          if="ui-subsystem.available">
    <delete>
      <fileset dir="${webapp.home}" includes="**/*.nbattrs"/>
      <fileset dir="${webapp.home}" includes="**/*.DS_Store"/>            
    </delete>        
    <delete file="${webapp.home}/WEB-INF/web.warContent"/>
    <delete file="${webapp.home}/WEB-INF/tld/cam-rt.tld"/>      
    <delete >
      <fileset dir="${webapp.home}/WEB-INF/lib"/>
    </delete>
    <delete includeEmptyDirs="true">
      <fileset dir="${webapp.home}/WEB-INF/classes">
        <exclude name="ApplicationResources.properties"/>
        <exclude name="MockupResources.properties"/>
        <exclude name="*.properties"/>
        <include name="**/*.class"/>        
      </fileset>
    </delete>
  </target>  

  <target name="deploy"
          description="Copy the war to jboss deploy dir ( slow )">
    <property name="jboss.deploy.dir"
              value="${jboss.home}/server/default/deploy"/>
          
    <!-- create the deploy directory -->
    <mkdir dir="${jboss.deploy.dir}/hq.war" />
    <copy todir="${jboss.deploy.dir}/hq.war" >
      <fileset dir="${war.dir}" includes="**" />
    </copy>
  </target>

  <target name="redeploy" depends="undeploy,deploy"/>

  <target name="undeploy" depends="init-taskdefs"
          description="Remove the war from jboss deploy dir">
    <delete dir="${jboss.home}/server/default/deploy/hq.war"/>
  </target>

  <!--
  Source JBoss targets for prepare prepare-jboss
  -->
  <import file="${hq.home}/build_util/jboss-build.xml"/>

  <target name="prepare-jboss" 
          depends="pre-prepare-jboss,post-prepare-jboss"
          description="Prepare jboss - copy required drivers"/>

  <!-- This extension to the "prepare-jboss" target is necessary since the 
	   in-container unit tests deploy from the ${ear.dir} directory 
	   that does *not* reside under ${jboss.home}. Unfortunately plugins 
	   are deployed relative to ${jboss.home} so we have to copy over the 
	   plugins to an hq.ear directory residing under ${jboss.home}.
	   (see the "URLs" attribute for the URLDeploymentScanner in 
	    product-plugin-service.xml) -->		
  <target name="test-prepare-jboss" 
          depends="prepare-jboss"
          description="Prepare jboss for in-container unit testing">
	  
      <delete dir="${jboss.home}/server/unittest"/>

      <echo message="Creating 'unittest' configuration - a copy of the prepared 'default' configuration"/>
	  	
      <copy todir="${jboss.home}/server/unittest">
        <fileset dir="${jboss.home}/server/default" excludes="**/hq.ear/**"/>
      </copy>
	    
      <echo message="Copying hq-plugins to 'unittest' configuration..."/>
      <copy todir="${jboss.home}/server/unittest/deploy/hq.ear/hq-plugins">
          <fileset dir="${server.plugin.dir}"/>
      </copy>
	  
      <echo message="Creating hqu directory..."/>
      <mkdir dir="${jboss.home}/server/unittest/deploy/hq.ear/hq.war/hqu"/>
	 
      <echo message="Copying unit test libraries.."/>
      <copy todir="${jboss.home}/server/unittest/lib">
          <fileset dir="${thirdparty.lib}">
			  <include name="mockejb.jar"/>
			  <include name="jmock-core-1.2.0.jar"/>
			  <include name="dbunit*.jar"/>
			  <include name="junit*.jar"/>
			
		  </fileset>	  
      </copy>	  
	  
      <echo message="Copying code coverage libraries.."/>
      <copy todir="${jboss.home}/server/unittest/lib">
          <fileset dir="${thirdparty.lib}">
			<include name="com.springsource.com.cenqua.clover-*.jar"/>
		  </fileset>
      </copy>
 	  
      <echo message="Before running unit tests DON'T FORGET to set the connectionURL in the 'unittest' configuration hq-ds.xml to point at the unit test database."/>
  </target>
  	
  <target name="pack-jres">
    <!-- include zip'ed JREs in our final package -->
    <copy toDir="${installer.dir}/jres">
      <fileset dir="${jre.dir}" includes="*" />
    </copy>
  </target>
  	
  <target name="pack-installer" description="Pack the installer" 
          depends="dbsetup-uncombine,dbsetup-combine">

    <delete dir="${installer.dir}"/>
    <mkdir dir="${installer.dir}"/>
    <mkdir dir="${installer.dir}/bin"/>
    <mkdir dir="${installer.dir}/etc"/>
    <mkdir dir="${installer.dir}/lib"/>
    <mkdir dir="${installer.dir}/data"/>
    <mkdir dir="${installer.dir}/logs"/>

    <!-- Pack installer jar -->
    <antcall target="installer-jar"/>

    <!-- Unpack and cleanup ant -->
    <antcall target="unpack-ant"/>

    <!-- Copy ant binaries and database setup utilities -->
    <copy todir="${installer.dir}/bin" flatten="true">
      <fileset dir="${build.dir}/ant" includes="**/bin/*">
        <exclude name="**/bin/*.pl"/>
        <exclude name="**/bin/*.py"/>
        <exclude name="**/bin/antRun*"/>
      </fileset>
    </copy>

    <copy todir="${installer.dir}/etc">
      <fileset dir="${hq.home}/etc">
        <include name="hibernate/hibernate*"/>
      </fileset>
    </copy>

    <copy todir="${installer.dir}/etc/hibernate">
     <fileset dir="${hq.home}">
        <include name="sql/**/*.hq-xml"/>
        <include name="sql/**/*.hbm.xml"/>
      </fileset>
    </copy>

    <copy file="${hq.home}/etc/hibernate.properties"
          todir="${installer.dir}/etc/hibernate"/>

    <!-- Copy ant libs and DB driver libs -->
    <copy todir="${installer.dir}/lib" flatten="true">
      <fileset dir="${build.dir}/ant" includes="**/lib/*"/>
      <fileset dir="${sigar.lib}" includes="**"/>
      <fileset dir="${thirdparty.lib}">
        <include name="postgresql/postgresql-8.2-*.jdbc3.jar"/>
        <include name="mysql_jdbc/mysql*.jar"/>
        <include name="oro-2.0.8.jar" />
        <include name="ant-contrib.jar" />
        <include name="commons-logging-1.0.4.jar"/>
        <include name="commons-collections-3.2.jar"/>
        <include name="hibernate/*.jar"/>
        <include name="groovy-all-1.6.jar"/>
        <include name="json.jar"/>
      </fileset>
    </copy>

    <!-- Copy dbsetup files -->
    <copy todir="${installer.dir}/data"
          file="${build.dir}/sql/schema-orig.xml"/>
    <copy todir="${installer.dir}/data"
          file="${build.dir}/sql/data-orig.xml"/>
    <copy todir="${installer.dir}/data"
          file="${hq.home}/sql/common-dbsetup-typemap.xml"/>

    <!-- Copy install binaries and data -->
    <copy todir="${installer.dir}/bin">
      <fileset dir="installer/bin" includes="*setup*"/>
      <fileset dir="installer/bin" includes="db-*.sh"/>
      <fileset dir="installer/bin" includes="db-*.bat"/>
    </copy>
    <copy todir="${installer.dir}/data">
      <fileset dir="installer/data" includes="**" excludes="eula.txt" />
    </copy>

    <!-- Copy other files needed by consolidated config system -->
    <copy tofile="${installer.dir}/data/hq-engine/jboss-service-events.xml"
          file="etc/jboss/events/sar/jboss-service.xml"/>
    <!-- JMS settings -->
    <copy toFile="${installer.dir}/data/hq-engine/hsqldb-jdbc2-service.xml"
          file="etc/jboss/jms/hsqldb-jdbc2-service.xml"/>

    <antcall target="chmod-exec">
      <param name="chmod.dir" value="${installer.dir}"/>
    </antcall>
    
  </target>

  <target name="installer-jar" depends="init,init-taskdefs">
    <!-- Build installer-specific sources -->
    <delete dir="${build.dir}/installer-classes"/>
    <mkdir dir="${build.dir}/installer-classes"/>
    <hq-javac destdir="${build.dir}/installer-classes">
      <classpath refid="custom-ant-tasks.path"/>
      <src>
        <path location="installer/src" />
      </src>
    </hq-javac>

    <copy todir="${build.dir}/installer-classes">
      <fileset dir="${build.dir}/classes">
        <include name="org/hyperic/util/**"/>
        <include name="org/hyperic/tools/**"/>
        <!-- For SST_Crisponizer -->
        <include name="org/hyperic/hibernate/**"/>
        <!-- For SST_MetricDataUpgrader.  RecoveryConditionExport also needs ConfigChangedEvent and ResourceLogEvent contained here -->
        <include name="org/hyperic/hq/measurement/shared/**"/>
        <!-- For RecoveryCondition and Counter export tasks.  We must be able to deserialize any TriggerFiredEvents (and nested AbstractEvents) stored with now-removed "Multi Condition Triggers" during upgrade.-->
        <include name="org/hyperic/hq/control/ControlEvent.class"/>
 		<include name="org/hyperic/hq/measurement/ext/MeasurementEvent.class"/>
        <include name="org/hyperic/hq/product/MetricValue.class"/>
		<include name="org/hyperic/hq/events/AbstractEvent.class"/>
		<include name="org/hyperic/hq/events/AlertFiredEvent.class"/>
		<include name="org/hyperic/hq/events/TriggerFiredEvent.class"/>
		<include name="org/hyperic/hq/events/TriggerNotFiredEvent.class"/>
		<include name="org/hyperic/hq/events/ResourceEventInterface.class"/>
		<include name="org/hyperic/hq/events/LoggableInterface.class"/>
		<include name="org/hyperic/hq/events/AbstractEvent.class"/>
		<include name="org/hyperic/hq/events/server/session/FileAlertConditionEvaluatorStateRepository.class"/>
		<include name="org/hyperic/hq/events/server/session/AlertConditionEvaluatorStateRepository.class"/>
		<!-- Need CPropChangeEvent and AppdefEntityID in package below for deserialization-->
		<include name="org/hyperic/hq/appdef/shared/**"/>
        <exclude name="**/*License*" />
        <exclude name="**/*license*" />
      </fileset>
    </copy>
    <mkdir dir="${installer.dir}/lib"/>
    <jar basedir="${build.dir}/installer-classes" 
         jarfile="${installer.dir}/lib/hq-installer.jar"/>

    <jar basedir="${build.dir}/installer-classes" 
         jarfile="${installer.dir}/lib/hq-boot.jar">
      <include name="org/hyperic/*.class"/>
      <include name="org/hyperic/util/ArrayUtil.class"/>
    </jar>
  </target>

  <!-- Target to check release components before building -->
  <target name="check-jboss">

    <available property="jboss.zip.available" file="${jboss.zip}"/>
    <fail unless="jboss.zip.available">
        JBoss distribution not found at ${jboss.zip}.  Define this property
        in your ~/.hq/build.properties to point to a vaild JBoss binary
        release
    </fail>

  </target>
  
  <target name="check-release">

    <available property="jre.dir.available" file="${jre.dir}"/>
    <fail unless="jre.dir.available">
        JRES not found at ${jre.dir}.  Either change this property in
        your ~/.hq/build.properties to point to a working copy of the
        jres project or checkout a copy to ${jre.dir}
    </fail>

    <available property="pgsql.dir.available" file="${pgsql.dir}"/>
    <fail unless="pgsql.dir.available">
        PostgreSQL binaries not found at ${pgsql.dir}.  Either change
        this property in your ~/.hq/build.properties to point to a working
        copy of the pgsql project or checkout a copy to ${pgsql.dir}
    </fail>

    <available property="ant.bz2.available" file="${ant.bz2}"/>
    <fail unless="ant.bz2.available">
        Ant distribution not found at ${ant.bz2}.  Define this property
        in your ~/.hq/build.properties to point to a vaild ant bz2 binary
        release.
    </fail>   

  </target>

  <target name="check-unpack-ant">
    <uptodate property="unpack-ant.notrequired" 
              srcfile="${ant.bz2}"
              targetfile="${build.dir}/ant" />
  </target>
  <target name="unpack-ant" 
          depends="check-unpack-ant" unless="unpack-ant.notrequired">
    <delete dir="${build.dir}/ant"/>
    <untar src="${ant.bz2}" 
           dest="${build.dir}/ant"
           compression="bzip2"/>
  </target>

  <target name="remove-tests" unless="debug.enable">
    <delete includeEmptyDirs="true">
      <fileset dir="${war.dir}/WEB-INF/classes" >
        <include name="**/test/*"/>
        <include name="**/test"/>
      </fileset>
    </delete>
    <delete dir="${war.dir}/test" />
    <delete file="${war.dir}/WEB-INF/lib/junit-3.8.jar"/>
    <delete file="${war.dir}/WEB-INF/lib/junit-4.4.jar"/>
    <delete file="${war.dir}/WEB-INF/lib/cactus-*.jar" />
    <delete file="${war.dir}/WEB-INF/lib/strutstest-*.jar" />
    <delete file="${war.dir}/WEB-INF/lib/mockejb.jar" />
    <delete file="${war.dir}/WEB-INF/lib/mockrunner-ejb.jar" />
    <delete file="${war.dir}/WEB-INF/lib/oro-2.0.8.jar" />
    <delete file="${war.dir}/WEB-INF/lib/strutstest.jar" />
    <delete file="${war.dir}/WEB-INF/lib/commons-httpclient-3.1.jar" />    
    <delete file="${war.dir}/WEB-INF/classes/cactus.properties"/>
    <delete file="${war.dir}/WEB-INF/classes/log_client.properties"/>
  </target>

  <!-- Bring in tasks for rolling the archives -->
  <import file="${hq.home}/build_util/archive-build.xml"/>

  <target name="archive-prep" depends="init,check-jboss,all,precompile-jsp,pdk-javadoc,unpack-jboss,dbsetup-combine,jboss-version,pack-installer,precompile-jsp-check,remove-tests">

    <property name="archive-dir" 
              location="${archive.build.dir}/${archive.basename}-installer" />
    <mkdir dir="${archive-dir}" />

    <!-- Verify that the unpacked JBoss is the same 
         as the one in jboss.home -->
    <verifysame file1="${jboss.home}/client/jbossall-client.jar"
                file2="${build.dir}/${jboss.version}/client/jbossall-client.jar"/>

    <!-- Copy agent dir -->
    <copy toDir="${archive-dir}/agent-${version}">
      <fileset dir="${agent.dir}">
        <include name="**" />
      </fileset>
    </copy>

    <!-- Copy installer dir -->
    <copy toDir="${archive-dir}/installer-${version}">
      <fileset dir="${build.dir}/installer">
        <include name="**" />
      </fileset>
    </copy>

    <antcall target="write-version-file">
      <param name="version-file"
             value="${archive-dir}/installer-${version}/data/version.properties"/>
    </antcall>

    <!-- Copy servlet instrumentation -->
    <mkdir dir="${archive-dir}/agent-${version}/bundles/${agent.bundle.dir}/product_connectors/servlet-${version}"/>
    <copy toDir="${archive-dir}/agent-${version}/bundles/${agent.bundle.dir}/product_connectors/servlet-${version}">
      <fileset dir="${build.dir}/native_plugins">
        <include name="hyperic-hq/**" />
        <include name="libs/**" />
        <include name="sample-local/**" />
        <include name="sample-global/**" />
      </fileset>
    </copy>

    <!-- Copy SNMP and RT packages -->
    <copy toDir="${archive-dir}/agent-${version}/bundles/${agent.bundle.dir}/product_connectors">
      <fileset dir="${hq.bin}/product_connectors">
        <include name="**" />
      </fileset>
    </copy>

    <!-- Make server dirs -->
    <mkdir dir="${archive-dir}/server-${version}"/>
    <mkdir dir="${archive-dir}/server-${version}/bin"/>
    <mkdir dir="${archive-dir}/server-${version}/logs"/>
    <mkdir dir="${archive-dir}/server-${version}/data"/>
    <mkdir dir="${archive-dir}/server-${version}/data/conf"/>

    <!-- Copy jboss -->
    <copy toDir="${archive-dir}/server-${version}/hq-engine">
      <fileset dir="${build.dir}/${jboss.version}">
        <include name="**" />
      </fileset>
    </copy>

    <!-- Copy server README -->
    <copy toFile="${archive-dir}/server-${version}/README.txt"
          file="installer/SERVER-README.txt"/>
    <replace file="${archive-dir}/server-${version}/README.txt">
      <replacefilter token="@@@VERSION@@@" value="${version}"/>
    </replace>

    <!-- Copy agent README -->
    <copy toFile="${archive-dir}/agent-${version}/README.txt"
          file="installer/AGENT-README.txt"/>
    <replace file="${archive-dir}/agent-${version}/README.txt">
      <replacefilter token="@@@VERSION@@@" value="${version}"/>
    </replace>

    <!-- Copy server startup scripts -->
    <copy todir="${archive-dir}/server-${version}/bin" file="installer/bin/hq-server.sh"/>
    <copy todir="${archive-dir}/server-${version}/bin" file="installer/bin/hq-threaddump.sh"/>
    <copy todir="${archive-dir}/server-${version}/bin" file="${launcher.dir}/hq-server.exe" />
    
    <!-- Copy EAR -->
    <property name="archive-ear-dir"
              value="${archive-dir}/server-${version}/hq-engine/server/default/deploy/hq.ear"/>
    <copy toDir="${archive-ear-dir}">
      <fileset dir="${ear.dir}">
        <include name="**" />
      </fileset>
    </copy>

   

    <!-- Truncate all JSPs and .do files  They are all pre-compiled -->
    <truncate>
      <fileset dir="${archive-dir}/server-${version}/hq-engine/server/default/deploy/hq.ear/hq.war">
        <include name="**/*.jsp"/>
        <include name="**/*.do"/>
      </fileset>
    </truncate>

    <!-- Copy setup scripts to top-level of install bundle -->
    <copy toFile="${archive-dir}/setup.sh" file="${build.dir}/installer/bin/setup.sh"/>
    <copy toFile="${archive-dir}/setup.bat" file="${build.dir}/installer/bin/setup.bat"/>
    <!-- Replace version token in  setup scripts -->
    <replace file="${archive-dir}/setup.sh" token="@@@VERSION@@@" value="${version}"/>
    <replace file="${archive-dir}/setup.bat" token="@@@VERSION@@@" value="${version}"/>
    <!-- Remote setup scripts from installer's bin dir -->
    <delete file="${archive-dir}/installer-${version}/bin/setup.sh"/>
    <delete file="${archive-dir}/installer-${version}/bin/setup.bat"/>

    <!-- Set file permissions -->
    <antcall target="chmod-exec">
      <param name="chmod.dir" value="${archive.build.dir}"/>
    </antcall>

    <!-- Packup the agent, server and servlet dirs -->
    <antcall target="compress-dir">
      <param name="archive-dir" value="${archive-dir}/agent-${version}"/>
      <param name="archive-file" value="${archive-dir}/agent-${version}.tgz"/>
      <param name="remove-archive-dir" value="true"/>
    </antcall>
    <antcall target="compress-dir">
      <param name="archive-dir" value="${archive-dir}/server-${version}"/>
      <param name="archive-file" value="${archive-dir}/server-${version}.tgz"/>
      <param name="remove-archive-dir" value="true"/>
    </antcall>
  </target>
	
  <target name="archive-full" depends="init,check-release,archive-prep,pack-jres">
    <antcall target="roll-archives"/>
  </target>

  <target name="archive-nojre" depends="archive-prep">
    <antcall target="roll-nojre-archives"/>
  </target>

  <target name="extract-jboss" depends="jboss-version">
    <unzip src="${jboss.zip}" dest="${jboss.home}/.."/>
  </target>

  <target name="hq-javadoc" depends="hibernate-prep">
    <!-- 
    set this in ~/hq/build.properties if you want it someplace other than 
    your source tree 
    -->
    <property name="hq.javadoc.dest.dir" location="${build.dir}/javadoc" />
    <property name="hq.api.version" value="${version}" />
    <mkdir dir="${hq.javadoc.dest.dir}" />
    <javadoc
      destdir="${hq.javadoc.dest.dir}"
      private="false"
      package="false"
      version="true"
      author="true"
      maxmemory="256M"
      use="true"
      packagenames="org.hyperic.*"
      additionalparam="-breakiterator"
      overview="doc/javadoc-overview.html"
      windowtitle="Hyperic HQ Management System">
      <sourcepath>
        <pathelement location="src"/>
        <pathelement location="build/src"/>
      </sourcepath>
      <classpath>
        <path refid="alljars" />
        <pathelement location="build/classes"/>
      </classpath>
      <doctitle><![CDATA[ Hyperic HQ  <br>API Specification ]]></doctitle>
      <header>
        <![CDATA[<font size="2">Hyperic HQ v. ${hq.api.version}</font>]]>
      </header>
      <bottom>
        <![CDATA[Copyright &#169; 2004-2006 Hyperic, Inc. <a href="mailto:info@hyperic.net">info@hyperic.net</a>, All Rights Reserved.]]>
      </bottom>
    </javadoc>
  </target>

</project>
