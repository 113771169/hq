<?xml version="1.0"?>

<!DOCTYPE project [
    <!ENTITY xdoclet-build SYSTEM "build_util/xdoclet-build.xml">
    <!ENTITY util-build SYSTEM "build_util/util-build.xml">
    <!ENTITY jsp-build SYSTEM "build_util/jsp-build.xml">
    <!ENTITY jboss-build SYSTEM "build_util/jboss-build.xml">
    <!ENTITY archive-build SYSTEM "build_util/archive-build.xml">
    <!ENTITY hibernate-build SYSTEM "build_util/hibernate-build.xml">
    <!ENTITY dbsetup-build SYSTEM "build_util/dbsetup-build.xml">
    <!ENTITY test-build SYSTEM "build_util/test-build.xml">
]>

<project name="HQ" default="build" basedir=".">
  <property environment="ENV" />

  <!-- User defined overrides -->
  <property file="${user.home}/.hq/build.properties" />

  <property name="hq.home" location="." />
  
  <!-- Default build properties -->
  <property file="etc/build.properties" />

  <!-- Hibernate properties -->
  <property file="etc/hibernate.properties" />

  <!-- Version file -->
  <property name="version.properties" value="etc/version.properties"/>
 
  <!-- ==================== Defaults ==================== -->
  <property name="jboss.home" location="${ENV.JBOSS_HOME}" />
  <property name="j2ee.jar" location="${jboss.home}/client/jboss-j2ee.jar" />
  <property name="jbossweb.home" value="jbossweb-tomcat55.sar"/>
  <property name="tomcat.home" 
  	location="${jboss.home}/server/default/deploy/${jbossweb.home}" />

  <property name="build.dir" location="${basedir}/build" />
  <property name="archive.basename" value="hyperic-hq" />
  <property name="archive.build.dir" location="${build.dir}/archive" />

  <!-- Native libs -->
  <property name="hq.bin" location="hq_bin" />
  <property name="lather.lib" location="${hq.bin}/lather_bin" />
  <property name="sigar.lib" location="${hq.bin}/sigar_bin/lib" />
  <property name="db2monitor.dir" location="${hq.bin}/db2monitor_bin"/>
  <property name="launcher.dir" location="${hq.bin}/launcher_bin"/>

  <!-- Thirdparty libs -->
  <property name="thirdparty.lib" location="thirdparty/lib"/>
  <property name="xdoclet.lib" location="${thirdparty.lib}/xdoclet"/>
  <property name="hibernate_lib" location="${thirdparty.lib}/hibernate"/>

  <property name="webapp.home" location="${hq.home}/web" />
  <property name="ear.dir" location="${build.dir}/hq.ear" />
  <property name="ROOT.war" location="${build.dir}/ROOT.war"/>
  <property name="agent.dir" location="${build.dir}/agent" />

  <!-- PDK destination -->
  <property name="pdk.dir" location="${agent.dir}/pdk" />
  <property name="pdk.lib" location="${pdk.dir}/lib" />
  <property name="pdk.plugins" location="${pdk.dir}/plugins" />
  <property name="pdk.mibs" location="${agent.dir}/pdk/mibs" />
  <property name="pdk.scripts" location="${pdk.dir}/scripts" />
  <property name="pdk.productStub"
            value="plugins/etc/ProductPluginXML.stub"/>

  <!-- Server plugins destination -->
  <property name="server.plugin.dir" location="${ear.dir}/hq-plugins" />
  <!-- Location to pack plugins (pre-copy to PDK and Server) -->
  <property name="plugin.dir" value="${build.dir}/plugins"/>

  <property name="installer.dir" value="${build.dir}/installer"/>

  <property name="rendit_sys.dir" 
	        value="${basedir}/src/org/hyperic/hq/ui/rendit/rendit_sys"/>
	
  <path id="pdknative">
    <fileset dir="${sigar.lib}" includes="*.jar" />
    <fileset dir="${db2monitor.dir}" includes="lib/db2monitor.jar" />
  </path>

  <path id="alljars">
    <path refid="pdknative" />
    <fileset dir="${lather.lib}" includes="lather.jar" />
    <fileset dir="${thirdparty.lib}" includes="*.jar" excludes="strutstest-*.jar,cactus*.jar,mockejb.jar,mockrunner-ejb.jar"/>
    <fileset dir="${thirdparty.lib}" includes="*.zip" />      
    <fileset dir="${thirdparty.lib}/oracle_jdbc" includes="*.jar" />
    <fileset dir="${thirdparty.lib}/postgresql"
             includes="postgresql-8.1-*.jdbc3.jar"/>
    <fileset dir="${thirdparty.lib}/mysql_jdbc" includes="mysql*.jar"/>
    <fileset dir="${thirdparty.lib}/mx4j" includes="*.jar" />
    <fileset dir="${xdoclet.lib}" includes="*.jar" />
    <fileset dir="${hibernate_lib}" includes="*.jar" />
    <fileset dir="${jboss.home}/server/default/lib" includes="*.jar" />
    <fileset dir="${jboss.home}/lib" includes="*.jar" />
    <fileset dir="${jboss.home}/client" includes="*.jar" />
    <fileset dir="${tomcat.home}" includes="*.jar" />
    <fileset dir="${hq.home}/plugins" includes="**/build-lib/*.jar" />
    <fileset dir="${hq.home}/plugins" includes="**/lib/*.jar" />
  </path>

  <path id="testjars">
    <path refid="alljars" />
    <path location="${thirdparty.lib}/cactus-1.7.2.jar" />
    <path location="${thirdparty.lib}/strutstest-2.1.3.jar" />
    <path location="${thirdparty.lib}/mockejb.jar" />
    <path location="${thirdparty.lib}/mockrunner-ejb.jar" />
  </path>

  <path id="emma.lib">
    <pathelement location="${thirdparty.lib}/emma.jar" />
    <pathelement location="${thirdparty.lib}/emma_ant.jar" />
  </path>

  <path id="remotejars">    
    <path refid="alljars" />
    <fileset dir="${webapp.home}/WEB-INF/lib" includes="*.jar" />
    <fileset dir="${jboss.home}/server/default/lib" includes="*.jar" />
    <fileset dir="${jboss.home}/lib" includes="*.jar" />
    <fileset dir="${jboss.home}/client" includes="*.jar" />
  </path>

  <path id="pdkjars">
    <path refid="pdknative" />
    <!-- exclude hq-product.jar, else version.properties
         update will fail on windows -->
    <fileset dir="${pdk.lib}"
             excludes="hq-product.jar"
             includes="**/*.jar" />
    <path location="${build.dir}/classes" />
  </path>

  <path id="custom-ant-tasks.path" >
    <path refid="alljars" />
    <path location="${build.dir}/classes" />
  </path>

  <path id="jboss-aop.path">
    <pathelement path="${thirdparty.lib}/aop/javassist.jar"/>
      <pathelement path="${thirdparty.lib}/aop/jboss-aop.jar"/>
      <pathelement path="${thirdparty.lib}/aop/jboss-common.jar"/>
      <pathelement path="${thirdparty.lib}/aop/trove.jar"/>
      <pathelement path="${thirdparty.lib}/aop/concurrent.jar"/>
  </path>
    
  <!-- Source common targets -->
  &util-build;
  &test-build;
    
  <target name="init-props" unless="init-props.notrequired">
     <property file="${version.properties}" />
     <property name="release.comment" value="Development Build"/>

     <echo>${release.comment}, version: ${version}, build number: ${build}</echo>
     <property name="init-props.notrequired" value="true"/>
  </target>

  <target name="init-internal-taskdefs" 
          unless="init-internal-taskdefs.notrequired">
    <macrodef name="hq-javac">
      <attribute name="destdir"      default="${build.dir}/classes"/>
      <attribute name="source"       default="${hq.javac.source}"/>
      <attribute name="deprecation"  default=""/>
      <element name="javac-body" implicit="yes"/>      

      <sequential>
        <javac destdir="@{destdir}"
               optimize="${hq.javac.optimize}"
               debug="${hq.javac.debug}"
               source="@{source}">
          <javac-body/>
        </javac>
      </sequential>
    </macrodef>

    <property name="init-internal-taskdefs.notrequired" value="true"/>
  </target>

  <target name="init" depends="init-props,init-internal-taskdefs"
          unless="init.notrequired">
     <property name="init.notrequired" value="true"/>
  </target>

  <target name="init-taskdefs" unless="init-taskdefs.notrequired">
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"
             classpathref="alljars"/>
    <taskdef name="for" classname="net.sf.antcontrib.logic.For"
             classpathref="alljars"/>
    <taskdef resource="org/hyperic/tools/ant/ant-tools.properties"
             classpathref="custom-ant-tasks.path"/>
      
    <property name="init-taskdefs.notrequired" value="true"/>
  </target>

  <!-- ==================== Compile java sources ==================== -->
  <target name="compile-app-sources" depends="init">
      <mkdir dir="${build.dir}/classes" />
      <hq-javac destdir="${build.dir}/classes">
        <classpath>
            <path refid="alljars"/>
            <path refid="testjars"/>
            <path location="${build.dir}/tools/txsnatch/classes"/>
        </classpath>
        <src>
          <!-- Generated sources -->
          <path location="${build.dir}/src" />
          <!-- Shared and utility sources -->
          <path location="src" />
          <!-- Plugin sources -->
          <dirset dir="plugins">
            <include name="*/src"/>
          </dirset>
        </src>
        <exclude name="**/*_test.java" />
      </hq-javac>
  </target>
    
  <target name="copy-resources" depends="init">
      <!-- Copy resources -->
      <copy toDir="${build.dir}/classes">
        <fileset dir="src" includes="**/*.properties" />
      </copy>

      <copy toDir="${build.dir}/classes"
            file="etc/ehcache.xml"/>

      <mkdir dir="${build.dir}/classes/images"/>
      <copy toDir="${build.dir}/classes/images">
        <fileset dir="${webapp.home}/images">
          <include name="icon_available_green.gif" />
          <include name="icon_available_red.gif" />
          <include name="icon_available_error.gif" />
          <include name="icon_auto-group.gif" />
          <include name="icon_cluster.gif" />
          <include name="icon_resource.gif" />
        </fileset>
      </copy>
      <copy toDir="${build.dir}/classes">
        <fileset dir="${hq.home}/etc" 
                 includes="cactus.properties,log_client.properties" />
      </copy>
  </target>
    
  <target name="compile-txsnatch" depends="init">
      <mkdir dir="${build.dir}/tools/txsnatch/classes" />
      <hq-javac destdir="${build.dir}/tools/txsnatch/classes">
        <classpath>
            <path refid="alljars"/>
        </classpath>
        <src>
          <path location="${basedir}/tools/txsnatch/src" />
        </src>
      </hq-javac>
  </target>

  <target name="compile" description="Compile sources" 
          depends="compile-txsnatch,compile-app-sources,copy-resources"/>

  <!-- ==================== JSP precompile ============================ -->
  
  &jsp-build; <!-- Include precompile-jsp -->

  <!-- ==================== Source code generation ==================== -->

  &xdoclet-build;
  &hibernate-build;

  <!-- ================== DB Setup =================== -->

  &dbsetup-build;

  <!-- ==================== EAR packaging ==================== -->

  <!-- Doesn't depend on compile - if you use an IDE it'll compile the classes for
       you, only need to package -->
  <target name="pack-ear-files" description="Create the ear directory structure" 
          depends="dbsetup-init">
    <mkdir dir="${ear.dir}" />
    <mkdir dir="${ear.dir}/META-INF" />
    <mkdir dir="${ear.dir}/lib" />
    <mkdir dir="${ear.dir}/sigar_bin/lib" />
    <mkdir dir="${server.plugin.dir}" />

    <mkdir dir="${ear.dir}/hq-session.jar/META-INF" />
    <mkdir dir="${ear.dir}/hq-agent-session.jar/META-INF" />
    <mkdir dir="${ear.dir}/hq-message.jar/META-INF" />

    <copy todir="${ear.dir}/hq-session.jar/META-INF" >
      <fileset dir="${build.dir}/dd/session" includes="*" />
    </copy>
    <copy todir="${ear.dir}/hq-agent-session.jar/META-INF" >
      <fileset dir="${build.dir}/dd/agent-session" includes="*" />
    </copy>
    <copy todir="${ear.dir}/hq-message.jar/META-INF" >
      <fileset dir="${build.dir}/dd/mdb" includes="*" />
    </copy>

    <copy todir="${ear.dir}/META-INF" overwrite="true">
        <fileset dir="etc" 
                 includes="application.xml,jboss-app.xml,startup_classes.txt,tweak.properties" />
        <fileset dir="${build.dir}/classes/META-INF">
            <include name="**/*.hbm.xml" />
            <include name="*.cfg.xml" />
        </fileset>
    </copy>

    <copy file="etc/ehcache.xml" todir="${ear.dir}"/>

    <copy file="etc/jboss/events/alertdef-prop-service.xml" tofile="${ear.dir}/alertdef-prop-service.xml" />
     <copy file="etc/jboss/measurement/measurement-prop-service.xml" tofile="${ear.dir}/measurement-prop-service.xml" />
    <copy file="etc/jboss/measurement/measurement-mq-service.xml" tofile="${ear.dir}/measurement-mq-service.xml" />
    <copy file="etc/jboss/events/events-mq-service.xml" tofile="${ear.dir}/events-mq-service.xml" />

    <copy file="etc/jboss/pdk/product-plugin-service.xml" tofile="${ear.dir}/product-plugin-service.xml" />
    <replace file="${ear.dir}/product-plugin-service.xml">
      <replacefilter token="@@@HYPERIC_EAR@@@" value="hq.ear"/>
    </replace>

    <mkdir dir="${ear.dir}/events-mbeans.sar/META-INF" />
    <mkdir dir="${ear.dir}/common-mbeans.sar/META-INF" />
    <mkdir dir="${ear.dir}/measurement-mbeans.sar/META-INF" />
    <mkdir dir="${ear.dir}/scheduler-mbeans.sar/META-INF" />

    <copy todir="${ear.dir}/events-mbeans.sar/META-INF" 
          file="etc/jboss/events/sar/jboss-service.xml" />
    <replace file="${ear.dir}/events-mbeans.sar/META-INF/jboss-service.xml">
      <replacefilter token="@@@server.mail.host@@@" value="${server.mail.host}"/>
      <replacefilter token="@@@server.mail.sender@@@" value="${server.mail.sender}"/>
    </replace>
    <copy todir="${ear.dir}/measurement-mbeans.sar/META-INF" 
          file="etc/jboss/measurement/sar/jboss-service.xml" />
    <copy todir="${ear.dir}/scheduler-mbeans.sar/META-INF" 
          file="etc/jboss/scheduler/sar/jboss-service.xml" />
    <replace file="${ear.dir}/scheduler-mbeans.sar/META-INF/jboss-service.xml">
      <replacefilter token="@@@server.quartzDelegate@@@" value="${quartz.delegate}"/>
    </replace>

    <!-- TODO: Create separate jars for each component -->
    <jar file="${ear.dir}/hq.jar" basedir="${build.dir}/classes" >
      <include name="images/**" />
      <include name="org/hyperic/**" />
      <exclude name="org/hyperic/hq/ui/**" />
      <exclude name="org/hyperic/hq/bizapp/client/shell/**" />
      <exclude name="org/hyperic/tools/ant/**" />
      <exclude name="org/hyperic/tools/db/**" />
      <exclude name="org/hyperic/hq/plugin/**"/>
    </jar>

    <!-- Write version resource -->
    <antcall target="write-version-file">
      <param name="version-file"
             value="${build.dir}/src/version.properties"/>
    </antcall>

    <copy todir="${build.dir}/src">
      <fileset dir="etc" includes="product.properties" />
    </copy>

    <jar basedir="${build.dir}/src" 
         jarfile="${ear.dir}/hq.jar"
         update="true">
      <include name="version.properties"/>
      <include name="product.properties"/>
    </jar>

    <copy todir="${ear.dir}/lib" >
      <fileset dir="${thirdparty.lib}" >
        <include name="backport-util-concurrent.jar" />
        <include name="commons-beanutils.jar" />
        <include name="commons-logging.jar" />
        <include name="commons-modeler.jar" />
        <include name="commons-collections.jar" />
        <include name="commons-dbcp.jar" />
        <include name="commons-httpclient-2.0.jar" />
        <include name="commons-pool.jar" />
        <include name="commons-services.jar" />
        <include name="log4j-1.2.14.jar" />
        <include name="quartz-1.5.1.jar" />
        <include name="quartz-oracle-1.5.1.jar" />
        <include name="instantj-1.6.jar" />
        <include name="snmp4j.jar" />
        <include name="dnsjava-2.0.3.jar" />
        <include name="ehcache-1.2.4.jar" />
        <include name="json.jar" />
        <include name="jug-asl-2.0.0.jar" />
        <include name="commons-httpclient-3.0.1.jar" />
        <include name="groovy-all-1.0.jar" />

        <!-- replacement j2ee compile required for instantj 
             since our installer doesn't install tools.jar -->
        <include name="pizza-1.1.jar" /> 

        <include name="ant.jar" />
        <include name="ant-lancher.jar" />

        <!--  in container test jar files -->
        <include name="mockejb.jar" />
        <include name="mockrunner-ejb.jar" />
      </fileset>
      <fileset dir="${sigar.lib}" >
        <include name="sigar.jar" />
      </fileset> 
      <fileset dir="${lather.lib}" >
        <include name="lather.jar" />
      </fileset> 
      <fileset dir="${db2monitor.dir}/lib" >
        <include name="db2monitor.jar" />
      </fileset>
      <fileset dir="${build.dir}/lib" >
        <include name="jxla.jar" />
      </fileset>
      <fileset dir="${hibernate_lib}">
        <include name="antlr-2.7.6.jar" />
        <include name="asm-attrs.jar" />
        <include name="asm.jar" />
        <include name="cglib-2.1.3.jar" />
        <include name="concurrent-1.3.2.jar" />
        <include name="dom4j-1.6.1.jar" />
        <include name="hibernate3.jar" />
      </fileset>
    </copy>

    <copy todir="${ear.dir}/sigar_bin/lib" >
       <fileset dir="${sigar.lib}" >
          <exclude name="sigar.jar" />
       </fileset>
    </copy>

    <copy tofile="${ear.dir}/lib/jakarta-oro.jar" 
          file="${thirdparty.lib}/jakarta-oro-2.0.7.jar" />
      
    <copy tofile="${ear.dir}/lib/jdomb8.jar"
          file="${thirdparty.lib}/jdom_b8.jar" />

    <copy todir="${ear.dir}/rendit_sys">
       <fileset dir="${rendit_sys.dir}"/>
    </copy>

    <touch file="${ear.dir}/META-INF/application.xml" />
  </target>

  <target name="rendit-deploy" depends="init">
  	<!-- Just a quick way to copy rendit_sys into JBoss -->
    <copy todir="${jboss.home}/server/default/deploy/hq.ear/rendit_sys">
       <fileset dir="${rendit_sys.dir}"/>
    </copy>
  </target>
  	
  <target name="pack-ear" depends="pack-ear-files" unless="generate-manifest.notrequired">
    <!-- generate EAR MANIFEST file -->
    <pathconvert targetos="unix" pathSep="," property="Class-Path">
      <path>
        <fileset dir="${ear.dir}" includes="hq.jar,hqee.jar" />
        <fileset dir="${ear.dir}/lib" includes="*.jar" />
      </path>
      <mapper>
        <globmapper from="${ear.dir}/" to="hq.ear/" handledirsep="true" />
      </mapper>
    </pathconvert>
    <delete quiet="true" file="${ear.dir}/META-INF/MANIFEST.MF" />
    <echo file="${ear.dir}/META-INF/MANIFEST.MF">Manifest-Version: 1.0${line.separator}</echo>
    <echo file="${ear.dir}/META-INF/MANIFEST.MF" append="true">Class-Path:</echo>
    <for param="hqjar" list="${Class-Path}">
      <sequential>
        <echo file="${ear.dir}/META-INF/MANIFEST.MF" append="true">  @{hqjar}${line.separator}</echo>
      </sequential>
    </for>
    <property name="generate-manifest.notrequired" value="true" />
  </target>

  <target name="pack-test">
    <mkdir dir="${ear.dir}/hq.war" />
    <mkdir dir="${ear.dir}/hq.war/WEB-INF/lib" />

    <copy todir="${ear.dir}/hq.war/WEB-INF/lib/" >
      <fileset dir="${thirdparty.lib}" >
        <include name="strutstest-2.1.3.jar" />
        <include name="cactus-1.7.2.jar" />
        <include name="junit.jar" />
      </fileset>
    </copy>

    <copy todir="${ear.dir}/hq.war/WEB-INF/classes" >
      <fileset dir="${hq.home}/etc" includes="cactus.properties" />
      <fileset dir="${build.dir}/classes"
               includes="**/*CactusTest.class,**/HQCactusBase.class" />
    </copy>
  </target>

  <target name="pack-war" description="Create the war directory structure ( use if you modify .jsp or other web files, but no sources )"
          depends="pack-ear,pack-test">
    <mkdir dir="${ear.dir}/hq.war" />
    <mkdir dir="${ear.dir}/hq.war/WEB-INF/lib" />
    
    <copy todir="${ear.dir}/hq.war" >
      <fileset dir="${webapp.home}">
        <include name="**"/>
        <exclude name="**/*.in"/>
      </fileset>
    </copy>

    <delete dir="${ear.dir}/hq.war/WEB-INF/classes/net"/>

    <!-- Copy and replace params in hq.properties -->
    <delete file="${ear.dir}/hq.war/WEB-INF/hq.properties"/>
    <copy tofile="${ear.dir}/hq.war/WEB-INF/hq.properties"
          file="${webapp.home}/WEB-INF/hq.properties.in"/>
    <replace file="${ear.dir}/hq.war/WEB-INF/hq.properties">
      <replacefilter token="@@@PROVIDER_URL@@@" 
                     value="${hq.ejb.remote.config.ip}:2099"/>
      <replacefilter token="@@@WEBAPP_ATTACH_REMOTELY_FLAG@@@" value="${hq.attach-remote-flag}"/>
    </replace>

    <copy todir="${ear.dir}/hq.war/WEB-INF/lib/" >
      <fileset dir="${thirdparty.lib}" >
        <include name="commons-beanutils.jar" />
        <include name="commons-digester.jar" />
        <include name="commons-collections.jar" />
        <include name="commons-validator.jar" />
        <include name="commons-dbcp.jar" />        
        <include name="jstl.jar" />
        <include name="standard.jar" />
        <include name="struts.jar" />               
        <include name="struts-el.jar" />
      </fileset>
    </copy>

    <!--copy todir="${ear.dir}/hq.war/WEB-INF/classes" >
      <fileset dir="${build.dir}/classes" includes="**/*Test*.class" />
    </copy-->

    <jar file="${ear.dir}/hq.war/WEB-INF/lib/hq-ui.jar" basedir="${build.dir}/classes" >
      <include name="org/hyperic/hq/ui/**" />
      <include name="servletunit/struts/**" />
    </jar>

    <jar file="${ear.dir}/hq.war/WEB-INF/lib/display-taglib.jar" basedir="${build.dir}/classes" >
      <include name="org/apache/taglibs/display/**" />
    </jar>

    <!-- Pack ROOT.war used for startup progress -->
    <mkdir dir="${ROOT.war}" />
    <mkdir dir="${ROOT.war}/WEB-INF" />
    <mkdir dir="${ROOT.war}/WEB-INF/lib" />
    <jar file="${ROOT.war}/WEB-INF/lib/boot-ui.jar" basedir="${build.dir}/classes" >
      <include name="org/hyperic/util/notReady/StartupServlet.class" />
      <include name="org/hyperic/util/notReady/NotReadyAppender*" />
    </jar>
    <copy tofile="${ROOT.war}/WEB-INF/web.xml"
          file="src/org/hyperic/util/notReady/web.xml"/>

  </target>
  
  <target name="build-ear" description="Build and create the ear directory structure" 
          depends="compile,pack-ear,pack-war" />

  <target name="build-war" description="Build and create the war" 
          depends="compile,pack-war" />
  
  <!-- ==================== UI packaging ==================== -->
  
  <target name="compile-ui" depends="init">
    <!-- Compile all of the ui classes -->

    <hq-javac deprecation="${hq.remote-dev.deprecation}">
      <classpath refid="remotejars"/>
      <src path="src"/>
      <include name="**/hq/ui/**"/>
      <exclude name="**/test/**" />
    </hq-javac>
   </target>

  <target name="pack-remote" description="Create the remote war directory structure ( use if you modify .jsp or other web files, but no sources )"
          depends="pack-ear,pack-test">
    <property name="web.ear" value="${build.dir}/web.ear"/>
    <mkdir dir="${web.ear}/META-INF" />
    <copy tofile="${web.ear}/META-INF/application.xml"
          file="etc/web-ear-application.xml"/>

    <property name="remote.war" value="${web.ear}/hq.war"/>
    <mkdir dir="${remote.war}/WEB-INF/lib" />
    
    <copy todir="${remote.war}" >
      <fileset dir="${webapp.home}">
        <include name="**"/>
        <exclude name="**/*.in"/>
        <exclude name="**/*.production"/>
        <exclude name="mockup/**"/> 
      </fileset>
    </copy>

    <!-- Copy and replace params in hq.properties -->
    <copy tofile="${remote.war}/WEB-INF/hq.properties"
          file="${webapp.home}/WEB-INF/hq.properties.in"/>
    <replace file="${remote.war}/WEB-INF/hq.properties">
      <replacefilter token="@@@PROVIDER_URL@@@" 
                     value="${hq.ejb.remote.config.ip}:2099"/>
      <replacefilter token="@@@WEBAPP_ATTACH_REMOTELY_FLAG@@@" value="${hq.attach-remote-flag}"/>
    </replace>

    <copy todir="${remote.war}/WEB-INF/lib/" >
      <fileset dir="${thirdparty.lib}" >
        <include name="commons-beanutils.jar" />
        <include name="commons-digester.jar" />
        <include name="commons-logging.jar" />
        <include name="commons-collections.jar" />        
        <include name="commons-validator.jar" />
        <include name="commons-dbcp.jar" />        
        <include name="log4j-1.2.14.jar" />
        <include name="jstl.jar" />
        <include name="standard.jar" />
        <include name="struts.jar" />               
        <include name="struts-el.jar" />
        <include name="snmp4j.jar" />
      </fileset> 
    </copy>

    <delete dir="${remote.war}/WEB-INF/classes/net"/>
    <copy todir="${remote.war}/WEB-INF/classes/" >
      <fileset dir="${build.dir}/classes" >
        <include name="org/hyperic/hq/ui/**" />
        <include name="servletunit/struts/**" />
      </fileset>
    </copy>

    <jar file="${remote.war}/WEB-INF/lib/display-taglib.jar" basedir="${build.dir}/classes" >
      <include name="org/apache/taglibs/display/**" />
    </jar>

  </target>
  
  <target name="remote-jsp">
    <property name="jboss.deploy.dir"
              value="${jboss.home}/server/default/deploy"/>

    <copy todir="${jboss.deploy.dir}/web.ear/hq.war" >
      <fileset dir="${webapp.home}" includes="**/*.js*" />
      <fileset dir="${webapp.home}" includes="**/*.css" />
      <fileset dir="${webapp.home}" includes="**/images/*" />
    </copy>

  </target>

  <target name="remote-dev" depends="compile-ui, pack-remote">
    <property name="jboss.deploy.dir"
              value="${jboss.home}/server/default/deploy"/>

    <copy todir="${jboss.deploy.dir}/web.ear" >
      <fileset dir="${web.ear}" includes="**" />
    </copy>

    <!-- Make sure the webapp gets redeployed -->
    <touch file="${jboss.deploy.dir}/web.ear/META-INF/application.xml"/>

  </target>

  <target name="undeploy-remote-dev">
    <property name="jboss.deploy.dir"
              value="${jboss.home}/server/default/deploy"/>

    <delete dir="${jboss.deploy.dir}/web.ear"/>
  </target>

  <!-- ==================== PDK packaging ==================== -->
  <target name="pdk-javadoc">
    <property name="pdk.javadoc" location="${pdk.dir}/javadoc"/>
    <property name="pdk.version" value="${version}"/>
    <property name="pdk.title" value="Hyperic HQ Plugin API"/>
    <mkdir dir="${pdk.javadoc}" />
    <javadoc
      destdir="${pdk.javadoc}"
      private="false"
      version="true"
      author="false"
      maxmemory="256M"
      windowtitle="${pdk.title}">
      <sourcepath>
        <pathelement location="src"/>
      </sourcepath>
      <fileset dir="src">
        <include name="org/hyperic/hq/product/*.java"/>
        <include name="org/hyperic/util/config/*.java"/>
        <include name="org/hyperic/snmp.*.java"/>
      </fileset>
      <classpath>
        <path refid="alljars" />
        <pathelement location="build/classes"/>
      </classpath>
      <doctitle>${pdk.title}</doctitle>
      <header>
        <![CDATA[<font size="2">${pdk.title} v. ${pdk.version}</font>]]>
      </header>
      <bottom>
        <![CDATA[Copyright &#169; 2004-2006 Hyperic, Inc. <a href="mailto:support@hyperic.net">support@hyperic.net</a>, All Rights Reserved.]]>
      </bottom>
    </javadoc>
  </target>

  <target name="pack-pdk-lib" description="Pack the PDK lib jars">
    <copy file="${pdk.productStub}"
          toDir="${build.dir}/classes/org/hyperic/hq/product"/>
    <mkdir dir="${pdk.lib}"/>
    <mkdir dir="${pdk.mibs}"/>

    <jar basedir="${build.dir}/classes"
         jarfile="${pdk.lib}/hyperic-util.jar">
      <include name="org/hyperic/util/**"/>
    </jar>

    <jar basedir="${build.dir}/classes"
         jarfile="${pdk.lib}/hq-product.jar">

      <manifest>
        <attribute name="Main-Class"
                   value="org.hyperic.hq.product.util.PluginMain"/>
      </manifest>

      <include name="org/hyperic/hq/bizapp/shared/lather/*.class" />
      <include name="org/hyperic/hq/product/*.*" />
      <include name="org/hyperic/hq/product/ant/*.class" />
      <include name="org/hyperic/hq/product/servlet/client/*.class" />
      <include name="org/hyperic/snmp/**" />
      <include name="org/hyperic/hq/product/pluginxml/*.class" />
      <include name="org/hyperic/hq/product/util/*.class" />
      <include name="org/hyperic/hq/product/logparse/*.class" />
      <include name="org/hyperic/hq/common/*.class" />
      <include name="org/hyperic/hq/measurement/*.class"/>
      <include name="org/hyperic/hq/measurement/server/session/SRN.class"/>
      <include name="org/hyperic/hq/measurement/data/*.class"/>
      <!-- For log/config track objects.  Should be moved into
           the product package -->
      <include name="org/hyperic/hq/measurement/shared/*.class"/>
      <!-- following needed for ai server detector plugins -->
      <include name="org/hyperic/hq/autoinventory/**"/>
      <include name="org/hyperic/hq/appdef/shared/**"/>
      <include name="org/hyperic/hq/authz/shared/**"/>
      <!-- following needed for rt plugins -->
      <include name="org/hyperic/hq/rt/shared/**"/>
      <include name="${pdk.productStub}"/>
      <!-- include hq version information -->
      <include name="org/hyperic/hq/common/shared/ProductProperties.class"/>
      <!-- workaround for StackOverflow w/ WLS 9.x -->
      <include name="weblogic/net/file/Handler.class"/>
    </jar>

    <!-- Pack version info -->
    <antcall target="write-version-file">
      <param name="version-file"
             value="${build.dir}/src/version.properties"/>
    </antcall>

    <copy todir="${build.dir}/src">
      <fileset dir="etc" includes="product.properties" />
    </copy>

    <jar basedir="${build.dir}/src" 
         jarfile="${pdk.lib}/hq-product.jar"
         update="true">
      <include name="version.properties"/>
      <include name="product.properties"/>
    </jar>

    <!-- create the jxla.jar, used by rt -->
    <mkdir dir="${build.dir}/lib"/>
    <jar file="${build.dir}/lib/jxla.jar" basedir="${build.dir}/classes" >
      <include name="org/novadeck/jxla/**" />
    </jar>

    <copy todir="${pdk.lib}">
      <fileset dir="${build.dir}/lib" >
        <include name="jxla.jar" />
      </fileset>
      <fileset dir="${sigar.lib}" includes="*.*" />
      <fileset dir="${thirdparty.lib}" >
        <!-- commons-{collections,beanutils} not in the
             agent classpath but required for
             PluginDumper scripts -->
        <include name="commons-collections.jar" />
        <include name="commons-beanutils.jar" />  
        <include name="commons-logging.jar" />
        <include name="log4j-1.2.14.jar" />
        <include name="jakarta-oro*.jar" />   <!-- RT -->
        <include name="snmp4j.jar" />        <!-- All SNMP monitoring -->
        <include name="ant.jar" />  <!-- AI scans + util.TokenReplacer -->
        <include name="bcel-5.1.jar" />  <!-- sigar PTQL -->
        <include name="junit.jar" />  <!-- test to help with support issues -->
        <include name="commons-httpclient-2.0.jar" /> <!-- Lather -->
        <!-- WebSphere: must be in the main classloader for reasons unknown -->
        <include name="activation.jar" />
        <!-- for hq-plugin.xml parser -->
        <include name="jdom_b8.jar" />
        <!-- for PluginDumper args parser -->
        <include name="getopt.jar" />
        <include name="tomcat-jk.jar" />
        <!-- for SSH collector within netservices plugin -->
        <include name="jsch-0.1.23.jar"/>
        <!-- for DNS collector within netservices plugin -->
        <include name="dnsjava-2.0.3.jar"/>
        <!-- for JMX based plugins -->
        <include name="mx4j/*.jar"/>
      </fileset>
    </copy>

    <!-- product.jmx.* has to be loaded from the plugin ClassLoader -->
    <jar basedir="${build.dir}/classes"
         jarfile="${pdk.lib}/mx4j/hq-jmx.jar">
      <include name="org/hyperic/hq/product/jmx/*.class" />
    </jar>

    <!-- Copy jdbc drivers for use with jdbc based plugins -->
    <mkdir dir="${pdk.lib}/jdbc"/>
    <copy toDir="${pdk.lib}/jdbc">
       <fileset dir="${thirdparty.lib}/oracle_jdbc" includes="oracle12.jar" />
       <fileset dir="${thirdparty.lib}/mysql_jdbc" includes="mysql*.jar" />
       <fileset dir="${thirdparty.lib}/sybase_jdbc" includes="sybase*.jar" />
       <!-- Postgres plugin uses the 7.4.3 driver -->
       <fileset dir="${thirdparty.lib}/postgresql" includes="postgresql-7.4.3.jar"/>
       <fileset dir="${thirdparty.lib}/mssql_jdbc" includes="ms*.jar" />
       <fileset dir="${thirdparty.lib}/db2_jdbc" includes="*.jar" />
    </copy>

    <!-- requires ${pdk.lib} we just created -->
    <taskdef name="hqplugin" 
             classname="org.hyperic.hq.product.ant.PluginJar"
             classpathref="pdkjars"/>
    <!-- validate pure-xml plugins -->
    <taskdef name="plugincopy" 
             classname="org.hyperic.hq.product.ant.PluginCopy"
             classpathref="pdkjars"/>
  </target>

  <!-- Build the plugins -->
  <target name="pack-plugins" depends="init-taskdefs,pack-pdk-lib">
    <mkdir dir="${plugin.dir}"/>

    <hqplugin name="apache"/>

    <hqplugin name="iplanet"/>

    <hqplugin name="oracle"/>

    <hqplugin name="db2">
       <fileset dir="${db2monitor.dir}" includes="lib/*"/>
    </hqplugin>

    <hqplugin name="postgresql"/>

    <hqplugin name="mysql"/>

    <hqplugin name="sybase"/>

    <hqplugin name="servlet"/>

    <hqplugin name="jboss"/>

    <hqplugin name="system"/>

    <hqplugin name="weblogic"/>

    <hqplugin name="websphere"/>

    <hqplugin name="hqagent"/>

    <hqplugin name="exchange"/>

    <hqplugin name="iis"/>

    <hqplugin name="dotnet"/>

    <hqplugin name="mssql"/>

    <hqplugin name="mqseries"/>

    <hqplugin name="ntp"/>

    <hqplugin name="bind"/>

    <hqplugin name="postfix"/>

    <hqplugin name="sqlquery"/>

    <hqplugin name="netdevice"/>

    <hqplugin name="netservices"/>

    <hqplugin name="nagios"/>

    <hqplugin name="ntds"/>

    <hqplugin name="memcached"/>

    <hqplugin name="mule"/>

    <hqplugin name="vmware"/>
  </target>
  
  <!-- Copy plugins -->
  <target name="copy-plugins" depends="init-taskdefs">
    <mkdir dir="${pdk.plugins}"/>

    <echo message="Copying plugins from: ${plugin.dir}"/>

    <!-- Copy plugins to agent -->
    <copy todir="${pdk.plugins}">
      <fileset dir="${plugin.dir}"
               excludes="${plugins.exclude}">
        <include name="*-plugin.jar"/>
      </fileset>
      <!-- copy shared xml pieces but leave *-plugin.xml
           to plugincopy below for validation -->
      <fileset dir="${hq.home}/plugins/xml/"
               excludes="${plugins.exclude}">
        <include name="*.xml"/>
        <exclude name="*-plugin.xml"/>
      </fileset>
    </copy>

    <plugincopy todir="${pdk.plugins}">
      <fileset dir="plugins/xml" includes="*-plugin.xml"/>
    </plugincopy>

    <mkdir dir="${pdk.dir}/examples"/>
    <plugincopy todir="${pdk.dir}/examples">
      <fileset dir="plugins/examples" includes="*.xml"/>
    </plugincopy>

    <!-- Copy plugins to server -->
    <copy todir="${server.plugin.dir}">
      <fileset dir="${pdk.plugins}">
        <include name="*-plugin.jar"/>
        <include name="*.xml"/>
      </fileset>
    </copy>

    <!-- Copy scripts -->
    <mkdir dir="${pdk.scripts}"/>
    <copy todir="${pdk.scripts}">
      <fileset dir="plugins/scripts" includes="*.*"/>
    </copy>
  </target>

  <target name="pack-pdk" description="Pack the PDK"
          depends="pack-pdk-lib,pack-plugins,copy-plugins"/>

  <!-- ==================== Agent packaging ==================== -->
  <!-- XXX use property to control debug/release properties -->

  <target name="pack-agent" description="Pack the agent">
    <mkdir dir="${agent.dir}" />
    <mkdir dir="${agent.dir}/lib" />
    <mkdir dir="${agent.dir}/log" />
    <mkdir dir="${agent.dir}/rcfiles" />
    <mkdir dir="${agent.dir}/tmp" />

    <!-- Touch the agent log file so that "smart" unzippers don't forget
         to create the log directory -->
    <touch file="${agent.dir}/log/agent.log"/>
    <touch file="${agent.dir}/tmp/empty"/>

    <copy todir="${agent.dir}/lib" >
      <fileset dir="${lather.lib}" includes="lather.jar" />
    </copy>

    <!-- Autoinventory jars -->
    <jar basedir="${build.dir}/classes" jarfile="${agent.dir}/lib/AgentAutoinventoryServer.jar">
      <include name="org/hyperic/hq/autoinventory/**"/>
      <include name="org/hyperic/hq/authz/client/**"/>
      <include name="org/hyperic/hq/authz/shared/**"/>
      <include name="org/hyperic/hq/authz/values/**"/>
      <include name="org/hyperic/hq/appdef/shared/**"/>
      <manifest>
        <attribute name="Main-Class" value="org.hyperic.hq.autoinventory.agent.server.AutoinventoryCommandsServer" />
      </manifest>
    </jar>

    <!-- Bizapp jars -->
    <jar basedir="${build.dir}/classes" jarfile="${agent.dir}/lib/AgentBizappServer.jar">
      <include name="org/hyperic/hq/bizapp/agent/server/**"/>
      <include name="org/hyperic/hq/bizapp/agent/commands/**"/>
      <include name="org/hyperic/hq/bizapp/agent/*"/>
      <manifest>
        <attribute name="Main-Class" value="org.hyperic.hq.bizapp.agent.server.CommandsServer" />
      </manifest>
    </jar>

    <!-- Measurement jars -->
    <jar basedir="${build.dir}/classes" jarfile="${agent.dir}/lib/AgentMeasurementServer.jar">
        <include name="org/hyperic/hq/measurement/agent/**"/>
        <include name="org/hyperic/hq/measurement/ext/**"/>
        <include name="org/hyperic/hq/measurement/shared/**"/>
        <include name="org/hyperic/hq/measurement/monitor/**"/>
        <include name="org/hyperic/hq/measurement/data/**"/>
        <include name="org/hyperic/hq/measurement/client/**"/>
        <include name="org/hyperic/hq/measurement/schedule/**"/>
        <include name="org/hyperic/hq/measurement/*"/>
        <include name="org/hyperic/hq/measurement/server/session/SRN.class"/>
        <manifest>
            <attribute name="Main-Class" value="org.hyperic.hq.measurement.agent.server.MeasurementCommandsServer"/>
        </manifest>
    </jar>

    <!-- Top level stuff -->
    <jar basedir="${build.dir}/classes" jarfile="${agent.dir}/lib/AgentServer.jar">
      <include name="org/hyperic/hq/agent/**"/>
      <include name="org/hyperic/hq/bizapp/agent/*.class"/>
      <include name="org/hyperic/hq/bizapp/client/*.class"/>
      <include name="org/hyperic/hq/bizapp/shared/*.class"/>
      <include name="org/hyperic/hq/common/*Exception.class"/>
      <exclude name="org/hyperic/hq/agent/client/**"/>
    </jar>

    <!-- Control agent server handler -->
    <jar basedir="${build.dir}/classes"
         jarfile="${agent.dir}/lib/AgentControlServer.jar">
      <include name="org/hyperic/hq/control/**"/>
      <exclude name="org/hyperic/hq/control/**/*_test.java"/>
      <manifest>
        <attribute name="Main-Class" value="org.hyperic.hq.control.agent.server.ControlCommandsServer" />
      </manifest>
    </jar>

    <jar basedir="${build.dir}/classes" jarfile="${agent.dir}/lib/AgentClient.jar">
      <exclude name="org/hyperic/hq/agent/server/**"/>
      <include name="org/hyperic/hq/agent/**"/>
      <include name="org/hyperic/hq/appdef/shared/*.class"/>
      <include name="org/hyperic/hq/common/*.class"/>
      <include name="org/hyperic/hq/bizapp/agent/**"/>
      <include name="org/hyperic/hq/bizapp/client/*.class"/>
      <include name="org/hyperic/hq/bizapp/shared/*.class"/>
      <exclude name="org/hyperic/hq/bizapp/agent/server/**"/>
    </jar>

    <!-- TODO: Copy and replace properties -->
    <copy file="etc/agent.properties"
        tofile="${agent.dir}/agent.properties"/>
    <copy file="bin/background.sh"
        tofile="${agent.dir}/background.sh"/>
    <copy file="bin/background.bat"
        tofile="${agent.dir}/background.bat"/>
    <copy file="etc/agent.jaas.config"
        tofile="${agent.dir}/jaas.config"/>
    <copy file="bin/agent.rc"
        tofile="${agent.dir}/rcfiles/agent.rc"/>

    <copy file="${launcher.dir}/hq-agent.exe"
        tofile="${agent.dir}/hq-agent.exe" />
    <copy file="bin/hq-agent.sh"
        tofile="${agent.dir}/hq-agent.sh"/>

    <antcall target="chmod-exec">
      <param name="chmod.dir" value="${agent.dir}"/>
    </antcall>
  </target>

  <target name="build-agent" description="Build and pack the agent directory structure" 
          depends="compile,pack-pdk,pack-agent" />

  <!-- ==================== Catalina packaging ==================== -->

  <target name="pack-servlet" description="Pack servlet engine measurement dirs">
    
    <!-- The name is what the tomcat plugin uses. --> 
    <property name="servlet.base" location="build/native_plugins/hyperic-hq" /> 
    <mkdir dir="${servlet.base}/native-lib" />
    <mkdir dir="${servlet.base}/WEB-INF/lib" />
    <copy file="plugins/servlet/examples/web.xml" todir="${servlet.base}/WEB-INF" />
 
    <jar basedir="${build.dir}/classes" jarfile="${servlet.base}/WEB-INF/lib/hq-filter.jar">
      <include name="org/hyperic/hq/product/servlet/filter/**"/>
      <include name="org/hyperic/hq/product/servlet/mbean/**"/>
    </jar>

    <jar basedir="${build.dir}/classes" jarfile="${servlet.base}/WEB-INF/lib/hq-webapp.jar">
      <include name="org/hyperic/hq/product/servlet/webapp/**"/>
    </jar>

    <copy todir="${servlet.base}/WEB-INF/lib" >
      <fileset dir="${thirdparty.lib}" >
        <include name="commons-modeler.jar" />
        <include name="commons-logging.jar" />
      </fileset>
    </copy>

    <!-- copy the sigar libraries too. -->
    <copy todir="${servlet.base}/WEB-INF/lib">
        <fileset dir="${sigar.lib}">
            <include name="sigar.jar"/>
        </fileset>
    </copy>
    <copy todir="${servlet.base}/native-lib">
        <fileset dir="${sigar.lib}">
            <include name="*.*"/>
            <exclude name="*.jar"/>
        </fileset>
    </copy>

    <mkdir dir="build/native_plugins/libs" />

    <copy todir="build/native_plugins/libs" 
          file="${servlet.base}/WEB-INF/lib/hq-filter.jar" />

    <copy todir="build/native_plugins/libs" 
          file="${thirdparty.lib}/mx4j-jmx.jar" />

    <copy todir="build/native_plugins/libs" 
          file="${thirdparty.lib}/commons-modeler.jar" />

    <copy todir="build/native_plugins/libs" >
       <fileset dir="${thirdparty.lib}/tomcat">
         <include name="tomcat-coyote.jar" />
         <include name="tomcat-jk2.jar" />
         <include name="tomcat-http11.jar" />
         <include name="tomcat-util.jar" />
         <include name="catalina.jar" />
       </fileset>
    </copy>
     
    <!-- 2 simple webapps with instrumentation - one using global web.xml, the other using
         its own web.xml -->

    <!-- hq-filter.jar, jmx must be configured in the container and the default 
           web.xml must include our settings -->
    <mkdir dir="build/native_plugins/sample_global/WEB-INF" />
    <copy  tofile="build/native_plugins/sample_global/WEB-INF/web.xml"
           file="plugins/servlet/examples/example_global_web.xml" />
    <copy  todir="build/native_plugins/sample_global" 
           file="plugins/servlet/examples/index.jsp" />
 
    <!-- JMX must be available -->
    <mkdir dir="build/native_plugins/sample_local/WEB-INF/lib" />
    <copy  tofile="build/native_plugins/sample_local/WEB-INF/web.xml"
           file="plugins/servlet/examples/example_web.xml" />
    <copy  todir="build/native_plugins/sample_local" 
           file="plugins/servlet/examples/index.jsp" />
    <copy todir="build/native_plugins/sample_local/WEB-INF/lib" 
          file="${servlet.base}/WEB-INF/lib/hq-filter.jar" />

    <!-- Instrument hq.ear -->
    <mkdir dir="${ear.dir}/hyperic-hq.war" />
    <copy todir="${ear.dir}/hyperic-hq.war" >
      <fileset dir="${servlet.base}" includes="**" />
    </copy>
    <copy todir="${tomcat.home}" file="installer/data/web.xml" />
    <copy todir="${tomcat.home}" 
          file="${servlet.base}/WEB-INF/lib/hq-filter.jar" />
  </target>

  <!-- ==================== Shell packaging ==================== -->

  <target name="pack-shell" description="Create shell dirs">

    <mkdir dir="${build.dir}/shell/lib" />

    <!-- Pack version info in hq-shell.jar -->
    <antcall target="write-version-file">
      <param name="version-file"
             value="${build.dir}/src/version.properties"/>
    </antcall>

    <jar jarfile="${build.dir}/shell/lib/hq-shell.jar">
      <fileset dir="${hq.home}/build/classes">
        <include name="org/hyperic/**"/>
        <exclude name="org/hyperic/hq/plugin/**"/>
        <excludesfile name="${hq.home}/etc/shell-jar-excludes.txt"/>
      </fileset>
      <fileset dir="${hq.home}/build/tools/txsnatch/classes">
        <include name="org/hyperic/**"/>
      </fileset>
      <fileset dir="${hq.home}/build/classes">
        <include name="org/hyperic/hq/**/server/**/*Exception.class"/>
        <include name="org/hyperic/hq/**/agent/**/*Exception.class"/>
        <include name="org/hyperic/hq/agent/AgentRemoteValue.class"/>
        <include name="org/hyperic/hq/agent/FileDataResult.class"/>
      </fileset>
      <fileset dir="${build.dir}/src">
        <include name="version.properties"/>
      </fileset>      
    </jar>

    <copy todir="${build.dir}/shell" >
      <fileset dir="${hq.home}/bin" includes="hq-shell**" />
      <fileset dir="${hq.home}/bin" includes="shell**" />
    </copy>
    
    <chmod perm="+x" dir="${build.dir}/shell" includes="*.sh"/>
    
    <copy todir="${build.dir}/shell/lib" >
      <fileset dir="${thirdparty.lib}" >
        <include name="log4j-1.2.14.jar" />
        <include name="quartz-1.5.1.jar" />
        <include name="quartz-oracle-1.5.1.jar" />
        <include name="commons-validator.jar" />
        <include name="commons-collections.jar" />
        <include name="commons-digester.jar" />
        <include name="commons-beanutils.jar" />
        <include name="commons-logging.jar" />
        <include name="jdom_b8.jar" />
        <include name="jsch-0.1.23.jar"/>
        <include name="getopt.jar"/>
        <include name="json.jar"/>
      </fileset>

      <fileset dir="${sigar.lib}" includes="*.*" />
      <fileset dir="${jboss.home}/client" includes="jbossall-client.jar"/>
        
      <!-- The following is needed for the TxSnatch code.  Not sure why
           this is tried to load on the client, but don't have lots of 
           time to look into it ATM ..  JMT 01/05/07 -->
      <fileset dir="${jboss.home}/server/all/lib" includes="jboss.jar"/>
    </copy>
  </target>

  <target name="build-shell" description="Build and create the shell directory structure" 
          depends="compile,pack-shell" />

  <!-- ==================== Generic targets ==================== -->

  <target name="pack" description="Create the jars and copy descriptors" 
          depends="init,pack-agent,pack-pdk,pack-ear,pack-war,pack-shell,pack-servlet" >
  </target>

  <target name="all" description="xdoclet, compile and pack for everything" 
          depends="init,xdoclet,hibernate-prep,build" >
  </target>

  <target name="build" depends="init,compile,pack" 
         description="Compile and pack - no code generation" />

  <target name="clean" depends="remote-clean" description="Clean the build directory" >
    <delete dir="${build.dir}"/>
  </target>
  
  <target name="mostly-clean" depends="remote-clean" description="Clean the build directory" >
    <delete>
      <fileset dir="${build.dir}">
        <exclude name="**/jsp/"/>
        <exclude name="**/docs/"/>
      </fileset>
    </delete>
  </target>
  
  <target name="check-for-ui">
    <available property="ui-subsystem.available" file="subsystem/ui"/>
  </target>
  <target name="remote-clean" depends="check-for-ui" description="Clean the remote tomcat"
          if="ui-subsystem.available">
    <delete>
      <fileset dir="${webapp.home}" includes="**/*.nbattrs"/>
      <fileset dir="${webapp.home}" includes="**/*.DS_Store"/>            
    </delete>        
    <delete file="${webapp.home}/WEB-INF/web.warContent"/>
    <delete file="${webapp.home}/WEB-INF/tld/cam-rt.tld"/>      
    <delete >
      <fileset dir="${webapp.home}/WEB-INF/lib"/>
    </delete>
    <delete includeEmptyDirs="true">
      <fileset dir="${webapp.home}/WEB-INF/classes">
        <exclude name="ApplicationResources.properties"/>
        <exclude name="MockupResources.properties"/>
        <exclude name="*.properties"/>
        <include name="**/*.class"/>        
      </fileset>
    </delete>
  </target>  

  <target name="deploy" depends="precompile-jsp-check" 
          description="Copy the ear to jboss deploy dir ( slow )">
    <property name="jboss.deploy.dir"
              value="${jboss.home}/server/default/deploy"/>
          
    <!-- create the deploy directory -->
    <mkdir dir="${jboss.deploy.dir}/hq.ear" />
    <copy todir="${jboss.deploy.dir}/hq.ear" >
      <fileset dir="${ear.dir}" includes="**" />
    </copy>
  </target>

  <target name="redeploy" depends="undeploy,deploy"/>
  <target name="undeploy" depends="init-taskdefs"
          description="Remove the ear from jboss deploy dir">
    <delete dir="${jboss.home}/server/default/deploy/hq.ear"/>
  </target>

  <!--
  Source JBoss targets for prepare prepare-jboss
  -->
  &jboss-build;

  <target name="prepare-jboss" 
          depends="pre-prepare-jboss,post-prepare-jboss"
          description="Prepare jboss - copy required drivers"/>

  <target name="pack-installer" description="Pack the installer" 
          depends="dbsetup-uncombine,dbsetup-combine">

    <delete dir="${installer.dir}"/>
    <mkdir dir="${installer.dir}"/>
    <mkdir dir="${installer.dir}/bin"/>
    <mkdir dir="${installer.dir}/etc"/>
    <mkdir dir="${installer.dir}/lib"/>
    <mkdir dir="${installer.dir}/data"/>
    <mkdir dir="${installer.dir}/logs"/>

    <!-- Pack installer jar -->
    <antcall target="installer-jar"/>

    <!-- include zip'ed JREs in our final package -->
    <copy toDir="${installer.dir}/jres">
      <fileset dir="${jre.dir}" includes="*" />
    </copy>

    <!-- Unpack and cleanup ant -->
    <antcall target="unpack-ant"/>

    <!-- Copy ant binaries and database setup utilities -->
    <copy todir="${installer.dir}/bin" flatten="true">
      <fileset dir="${build.dir}/ant" includes="**/bin/*">
        <exclude name="**/bin/*.pl"/>
        <exclude name="**/bin/*.py"/>
        <exclude name="**/bin/antRun*"/>
      </fileset>
    </copy>

    <copy todir="${installer.dir}/etc">
      <fileset dir="${hq.home}/etc">
        <include name="hibernate/hibernate*"/>
      </fileset>
    </copy>

    <copy todir="${installer.dir}/etc/hibernate">
     <fileset dir="${hq.home}">
        <include name="sql/**/*.hq-xml"/>
        <include name="sql/**/*.hbm.xml"/>
      </fileset>
    </copy>

    <copy file="${hq.home}/etc/hibernate.properties"
          todir="${installer.dir}/etc/hibernate"/>

    <!-- Copy ant libs and DB driver libs -->
    <copy todir="${installer.dir}/lib" flatten="true">
      <fileset dir="${build.dir}/ant" includes="**/lib/*"/>
      <fileset dir="${sigar.lib}" includes="**"/>
      <fileset dir="${thirdparty.lib}">
        <include name="oracle_jdbc/ojdbc14.jar"/>
        <include name="postgresql/postgresql-8.1-*.jdbc3.jar"/>
        <include name="mysql_jdbc/mysql-connector-java-3.0.12-*.jar"/>
        <include name="jakarta-oro*.jar" />
        <include name="ant-contrib.jar" />
        <include name="commons-logging.jar"/>
        <include name="commons-collections.jar"/>
        <include name="hibernate/*.jar"/>
        <include name="json.jar"/>
      </fileset>
    </copy>

    <!-- Copy dbsetup files -->
    <copy todir="${installer.dir}/data"
          file="${build.dir}/sql/schema-orig.xml"/>
    <copy todir="${installer.dir}/data"
          file="${build.dir}/sql/data-orig.xml"/>
    <copy todir="${installer.dir}/data"
          file="${hq.home}/sql/common-dbsetup-typemap.xml"/>

    <!-- Copy install binaries and data -->
    <copy todir="${installer.dir}/bin">
      <fileset dir="installer/bin" includes="*setup*"/>
      <fileset dir="installer/bin" includes="db-*.sh"/>
      <fileset dir="installer/bin" includes="db-*.bat"/>
    </copy>
    <copy todir="${installer.dir}/data">
      <fileset dir="installer/data" includes="**"/>
    </copy>

    <!-- Copy other files needed by consolidated config system -->
    <copy tofile="${installer.dir}/data/hq-engine/jboss-service-events.xml"
          file="etc/jboss/events/sar/jboss-service.xml"/>

    <antcall target="chmod-exec">
      <param name="chmod.dir" value="${installer.dir}"/>
    </antcall>
  </target>

  <target name="installer-jar" depends="init,init-taskdefs">
    <!-- Build installer-specific sources -->
    <delete dir="${build.dir}/installer-classes"/>
    <mkdir dir="${build.dir}/installer-classes"/>
    <hq-javac destdir="${build.dir}/installer-classes">
      <classpath refid="custom-ant-tasks.path"/>
      <src>
        <path location="installer/src" />
      </src>
    </hq-javac>

    <copy todir="${build.dir}/installer-classes">
      <fileset dir="${build.dir}/classes">
        <include name="org/hyperic/util/**"/>
        <include name="org/hyperic/tools/**"/>
        <exclude name="**/*License*" />
        <exclude name="**/*license*" />
      </fileset>
    </copy>
    <mkdir dir="${installer.dir}/lib"/>
    <jar basedir="${build.dir}/installer-classes" 
         jarfile="${installer.dir}/lib/hq-installer.jar"/>

    <jar basedir="${build.dir}/installer-classes" 
         jarfile="${installer.dir}/lib/hq-boot.jar">
      <include name="org/hyperic/*.class"/>
    </jar>
  </target>

  <!-- Target to check release components before building -->
  <target name="check-release">

    <available property="jre.dir.available" file="${jre.dir}"/>
    <fail unless="jre.dir.available">
        JRES not found at ${jre.dir}.  Either change this property in
        your ~/.hq/build.properties to point to a working copy of the
        jres project or checkout a copy to ${jre.dir}
    </fail>

    <available property="pgsql.dir.available" file="${pgsql.dir}"/>
    <fail unless="pgsql.dir.available">
        PostgreSQL binaries not found at ${pgsql.dir}.  Either change
        this property in your ~/.hq/build.properties to point to a working
        copy of the pgsql project or checkout a copy to ${pgsql.dir}
    </fail>

    <available property="ant.bz2.available" file="${ant.bz2}"/>
    <fail unless="ant.bz2.available">
        Ant distribution not found at ${ant.bz2}.  Define this property
        in your ~/.hq/build.properties to point to a vaild ant bz2 binary
        release.
    </fail>   

    <available property="jboss.zip.available" file="${jboss.zip}"/>
    <fail unless="jboss.zip.available">
        JBoss distribution not found at ${jboss.zip}.  Define this property
        in your ~/.hq/build.properties to point to a vaild JBoss binary
        release
    </fail>

  </target>

  <target name="check-unpack-ant">
    <uptodate property="unpack-ant.notrequired" 
              srcfile="${ant.bz2}"
              targetfile="${build.dir}/ant" />
  </target>
  <target name="unpack-ant" 
          depends="check-unpack-ant" unless="unpack-ant.notrequired">
    <delete dir="${build.dir}/ant"/>
    <untar src="${ant.bz2}" 
           dest="${build.dir}/ant"
           compression="bzip2"/>
  </target>

  <target name="remove-tests" unless="debug.enable">
    <delete includeEmptyDirs="true">
      <fileset dir="${ear.dir}/hq.war/WEB-INF/classes" >
        <include name="**/test/*"/>
        <include name="**/test"/>
      </fileset>
    </delete>
    <delete dir="${ear.dir}/hq.war/test" />
    <delete file="${ear.dir}/hq.war/WEB-INF/lib/junit.jar"/>
    <delete file="${ear.dir}/hq.war/WEB-INF/lib/cactus-*.jar" />
    <delete file="${ear.dir}/hq.war/WEB-INF/lib/strutstest-*.jar" />
    <delete file="${ear.dir}/hq.war/WEB-INF/lib/mockejb.jar" />
    <delete file="${ear.dir}/hq.war/WEB-INF/lib/mockrunner-ejb.jar" />
    <delete file="${ear.dir}/hq.war/WEB-INF/lib/jakarta-oro-*.jar" />
    <delete file="${ear.dir}/hq.war/WEB-INF/lib/strutstest.jar" />
    <delete file="${ear.dir}/hq.war/WEB-INF/lib/commons-httpclient-2.0.jar" />    
    <delete file="${ear.dir}/hq.war/WEB-INF/classes/cactus.properties"/>
    <delete file="${ear.dir}/hq.war/WEB-INF/classes/log_client.properties"/>
  </target>

  <!-- Bring in tasks for rolling the archives -->
  &archive-build;

  <target name="archive-full" depends="init,check-release,all,precompile-jsp,pdk-javadoc,unpack-jboss,dbsetup-combine,jboss-version,pack-installer,precompile-jsp-check,remove-tests">

    <property name="archive-dir" 
              location="${archive.build.dir}/${archive.basename}-installer" />
    <mkdir dir="${archive-dir}" />

    <!-- Verify that the unpacked JBoss is the same 
         as the one in jboss.home -->
    <verifysame file1="${jboss.home}/client/jbossall-client.jar"
                file2="${build.dir}/${jboss.version}/client/jbossall-client.jar"/>

    <!-- Copy agent dir -->
    <copy toDir="${archive-dir}/agent-${version}">
      <fileset dir="${agent.dir}">
        <include name="**" />
      </fileset>
    </copy>

    <!-- Copy shell dir -->
    <copy toDir="${archive-dir}/shell-${version}">
      <fileset dir="${build.dir}/shell">
        <include name="**" />
      </fileset>
    </copy>

    <!-- Copy installer dir -->
    <copy toDir="${archive-dir}/installer-${version}">
      <fileset dir="${build.dir}/installer">
        <include name="**" />
      </fileset>
    </copy>

    <antcall target="write-version-file">
      <param name="version-file"
             value="${archive-dir}/installer-${version}/data/version.properties"/>
    </antcall>

    <!-- Copy servlet instrumentation -->
    <mkdir dir="${archive-dir}/agent-${version}/product_connectors/servlet-${version}"/>
    <copy toDir="${archive-dir}/agent-${version}/product_connectors/servlet-${version}">
      <fileset dir="${build.dir}/native_plugins">
        <include name="hyperic-hq/**" />
        <include name="libs/**" />
        <include name="sample-local/**" />
        <include name="sample-global/**" />
      </fileset>
    </copy>

    <!-- Copy SNMP and RT packages -->
    <copy toDir="${archive-dir}/agent-${version}/product_connectors">
      <fileset dir="${hq.bin}/product_connectors">
        <include name="**" />
      </fileset>
    </copy>

    <!-- Make server dirs -->
    <mkdir dir="${archive-dir}/server-${version}"/>
    <mkdir dir="${archive-dir}/server-${version}/bin"/>
    <mkdir dir="${archive-dir}/server-${version}/logs"/>
    <mkdir dir="${archive-dir}/server-${version}/data"/>
    <mkdir dir="${archive-dir}/server-${version}/data/conf"/>

    <!-- Copy jboss -->
    <copy toDir="${archive-dir}/server-${version}/hq-engine">
      <fileset dir="${build.dir}/${jboss.version}">
        <include name="**" />
      </fileset>
    </copy>

    <!-- Copy server README -->
    <copy toFile="${archive-dir}/server-${version}/README.txt"
          file="installer/SERVER-README.txt"/>
    <replace file="${archive-dir}/server-${version}/README.txt">
      <replacefilter token="@@@VERSION@@@" value="${version}"/>
    </replace>

    <!-- Copy agent README -->
    <copy toFile="${archive-dir}/agent-${version}/README.txt"
          file="installer/AGENT-README.txt"/>
    <replace file="${archive-dir}/agent-${version}/README.txt">
      <replacefilter token="@@@VERSION@@@" value="${version}"/>
    </replace>

    <!-- Copy server startup scripts -->
    <copy todir="${archive-dir}/server-${version}/bin" file="installer/bin/hq-server.sh"/>
    <copy todir="${archive-dir}/server-${version}/bin" file="installer/bin/hq-threaddump.sh"/>
    <copy todir="${archive-dir}/server-${version}/bin" file="${launcher.dir}/hq-server.exe" />
    
    <!-- Copy EAR -->
    <property name="archive-ear-dir"
              value="${archive-dir}/server-${version}/hq-engine/server/default/deploy/hq.ear"/>
    <copy toDir="${archive-ear-dir}">
      <fileset dir="${ear.dir}">
        <include name="**" />
      </fileset>
    </copy>

    <!-- The installer needs a copy of the unsubstituted version of
         certain subsystems jboss-service files -->
    <copy file="etc/jboss/scheduler/sar/jboss-service.xml"
          toFile="${archive-dir}/installer-${version}/data/hq-engine/scheduler-service.xml"/>

    <!-- Truncate all JSPs and .do files  They are all pre-compiled -->
    <truncate>
      <fileset dir="${archive-dir}/server-${version}/hq-engine/server/default/deploy/hq.ear/hq.war">
        <include name="**/*.jsp"/>
        <include name="**/*.do"/>
      </fileset>
    </truncate>

    <!-- Copy setup scripts to top-level of install bundle -->
    <copy toFile="${archive-dir}/setup.sh" file="${build.dir}/installer/bin/setup.sh"/>
    <copy toFile="${archive-dir}/setup.bat" file="${build.dir}/installer/bin/setup.bat"/>
    <!-- Replace version token in  setup scripts -->
    <replace file="${archive-dir}/setup.sh" token="@@@VERSION@@@" value="${version}"/>
    <replace file="${archive-dir}/setup.bat" token="@@@VERSION@@@" value="${version}"/>
    <!-- Remote setup scripts from installer's bin dir -->
    <delete file="${archive-dir}/installer-${version}/bin/setup.sh"/>
    <delete file="${archive-dir}/installer-${version}/bin/setup.bat"/>

    <!-- Set file permissions -->
    <antcall target="chmod-exec">
      <param name="chmod.dir" value="${archive.build.dir}"/>
    </antcall>

    <!-- Packup the agent, server, shell, and servlet dirs -->
    <antcall target="compress-dir">
      <param name="archive-dir" value="${archive-dir}/agent-${version}"/>
      <param name="archive-file" value="${archive-dir}/agent-${version}.tgz"/>
      <param name="remove-archive-dir" value="true"/>
    </antcall>
    <antcall target="compress-dir">
      <param name="archive-dir" value="${archive-dir}/server-${version}"/>
      <param name="archive-file" value="${archive-dir}/server-${version}.tgz"/>
      <param name="remove-archive-dir" value="true"/>
    </antcall>
    <antcall target="compress-dir">
      <param name="archive-dir" value="${archive-dir}/shell-${version}"/>
      <param name="archive-file" value="${archive-dir}/shell-${version}.tgz"/>
      <param name="remove-archive-dir" value="true"/>
    </antcall>

    <antcall target="roll-archives"/>
  </target>

  <target name="extract-jboss" depends="jboss-version">
    <unzip src="${jboss.zip}" dest="${jboss.home}/.."/>
  </target>

  <target name="hq-javadoc" depends="xdoclet,hibernate-prep">
    <!-- 
    set this in ~/hq/build.properties if you want it someplace other than 
    your source tree 
    -->
    <property name="hq.javadoc.dest.dir" location="${build.dir}/javadoc" />
    <property name="hq.api.version" value="${version}" />
    <mkdir dir="${hq.javadoc.dest.dir}" />
    <javadoc
      destdir="${hq.javadoc.dest.dir}"
      private="false"
      package="false"
      version="true"
      author="true"
      maxmemory="256M"
      use="true"
      packagenames="org.hyperic.*"
      additionalparam="-breakiterator"
      overview="doc/javadoc-overview.html"
      windowtitle="Hyperic HQ Management System">
      <sourcepath>
        <pathelement location="src"/>
        <pathelement location="build/src"/>
      </sourcepath>
      <classpath>
        <path refid="alljars" />
        <pathelement location="build/classes"/>
      </classpath>
      <doctitle><![CDATA[ Hyperic HQ  <br>API Specification ]]></doctitle>
      <header>
        <![CDATA[<font size="2">Hyperic HQ v. ${hq.api.version}</font>]]>
      </header>
      <bottom>
        <![CDATA[Copyright &#169; 2004-2006 Hyperic, Inc. <a href="mailto:info@hyperic.net">info@hyperic.net</a>, All Rights Reserved.]]>
      </bottom>
    </javadoc>
  </target>

</project>
